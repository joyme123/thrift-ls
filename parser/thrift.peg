{
package parser

func toStringSlice(strs any) []string {
	if strs == nil {
		return nil
	}

	items := strs.([]any)
	ret := make([]string, 0, len(items))
	for i := range items {
		var item string
		if _, ok := items[i].([]interface{}); ok {
			data := items[i].([]interface{})[1]
			if bs, ok := data.([]uint8); ok {
				item = string(bs)
			} else {
				item = items[i].([]interface{})[1].(string)
			}
		} else {
			item = items[i].(string)
		}
		
		ret = append(ret, item)
	}

	return ret
}

func toFieldSlice(fields any) []*Field {
	if fields == nil {
		return nil
	}
	
	items := fields.([]any)
	ret := make([]*Field, 0, len(items))
	for i := range items {
		item := items[i].(*Field)
		ret = append(ret, item)
	}
	return ret
}

func toConstValueSlice(values any) []*ConstValue {
	if values == nil {
		return nil
	}

	items := values.([]any)
	ret := make([]*ConstValue, 0, len(items))
	for i := range items {
		item := items[i].(*ConstValue)
		ret = append(ret, item)
	}
	return ret
}

func toString(text any) string {
	if text == nil {
		return ""
	}

	data := text.([]interface{})
	
	ret := bytes.NewBuffer(nil)
	for i := range data {
		ret.WriteString(data[i].(string))
	}

	return ret.String()
}

func toAnnotationSlice(annos any) []*Annotation {
	if annos == nil {
		return nil
	}
	items := annos.([]any)
	ret := make([]*Annotation, 0, len(items))
	for i := range items {
		ret = append(ret, items[i].(*Annotation))
	}

	return ret
}

func toHeaderSlice(headers any) []Header {
	if headers == nil {
		return nil
	}
	items := headers.([]any)
	ret := make([]Header, 0, len(items))
	for i := range items {
		ret = append(ret, items[i].(Header))
	}
	return ret
}

func toDefinitionSlice(defs any) []Definition {
	if defs == nil {
		return nil
	}
	items := defs.([]any)
	ret := make([]Definition, 0, len(items))
	for i := range items {
		ret = append(ret, items[i].(Definition))
	}
	return ret
}

func toEnumValueSlice(v any) []*EnumValue {
	if v == nil {
		return nil
	}
	values := v.([]any)

	ret := make([]*EnumValue, 0, len(values))
	value := int64(0)
	for i := range values {
		enumV := values[i].(*EnumValue)
		if enumV.ValueNode == nil {
			enumV.Value = value
		} else {
			value = enumV.Value
		}
		value++
		ret = append(ret, enumV)
	}
	return ret
}

func toFunctionSlice(fns any) []*Function {
	if fns == nil {
		return nil
	}
	items := fns.([]any)
	ret := make([]*Function, 0, len(items))
	for i := range items {
		ret = append(ret, items[i].(*Function))
	}
	return ret
}

func toCommentSlice(comments any) []*Comment {
	if comments == nil {
		return nil
	}
	items := comments.([]any)
	ret := make([]*Comment, 0, len(items))
	for i := range items {
		item := items[i]
		commentItem, ok := item.(*Comment)
		if ok {
			ret = append(ret, commentItem)
		}
	}

	if len(ret) == 0 {
		return nil
	}

	return ret
}

func toAnnotations(annos any) *Annotations {
	if annos == nil {
		return nil
	}

	return annos.(*Annotations)
}

func toListSeparatorKeyword(sep any) *ListSeparatorKeyword {
	if sep == nil {
		return nil
	}

	return sep.(*ListSeparatorKeyword)
}

}

Document = headers:Header*  defs:Definition* comments:ReservedComments !. {
	return NewDocument(toHeaderSlice(headers), toDefinitionSlice(defs), comments.([]*Comment), NewLocationFromCurrent(c)), nil
} //{errHeader} ErrHeader //{errDefinition} ErrDefinition

Header = comments:ReservedComments v:(Include / CppInclude / Namespace) endLineComments:ReservedEndLineComments {
	c.globalStore["parse"] = "header"
	v.(Header).SetComments(comments.([]*Comment), endLineComments.([]*Comment))
	return v, nil
} / x:(!(Definition) ReservedComments &(.+) &{
	/* fmt.Println("header predict:", c.pos, "text:", string(c.text)) */
	if state, ok := c.globalStore["parse"]; (!ok || ok && state.(string) == "header") {
		return true, nil
	}
	return false, nil
} %{errHeader}) {
	/* fmt.Println("header return:", c.pos, "text:", string(c.text)) */
	badHeader := x.([]any)[4].(*BadHeader)
	return badHeader, nil
} //{errInclude} ErrInclude //{errCppInclude} ErrorCppInclude //{errNamespace} ErrorNamespace

Include = includeKeyword:INCLUDE include:Literal {
	includeV, ok := include.(*Literal)
	if !ok {
		includeV = include.([]interface{})[0].(*Literal)
	}
	return NewInclude(includeKeyword.(*IncludeKeyword), includeV, NewLocationFromCurrent(c)), nil
} / x:(&(INCLUDE .*) %{errInclude}) {
	return x.([]any)[1], nil
}


CppInclude <- cppIncludeKeyword:CPPINCLUDE include:Literal {
	includeV, ok := include.(*Literal)
	if !ok {
		includeV = include.([]interface{})[0].(*Literal)
	}
	return NewCPPInclude(cppIncludeKeyword.(*CPPIncludeKeyword), includeV, NewLocationFromCurrent(c)), nil
} / x:(&(CPPINCLUDE .*) %{errCppInclude}) {
	return x.([]any)[1], nil
}


Namespace <- namespaceKeyword:NAMESPACE language:NamespaceScope name:Identifier annotations:Annotations? {
	return NewNamespace(namespaceKeyword.(*NamespaceKeyword), language.(*NamespaceScope), name.(*Identifier), toAnnotations(annotations), NewLocationFromCurrent(c)), nil
} / x:(&(NAMESPACE .*) %{errNamespace}) {
	return x.([]any)[1], nil
}

NamespaceScope <- v:(NamespaceScopeAny / Identifier) {
	id := v.(*Identifier)
	res := &NamespaceScope{
		Identifier: *id,
	}

	return res, nil
}

NamespaceScopeAny = comments:ReservedComments idName:NamespaceScopeAnyToken Indent* {
	return NewIdentifier(idName.(*IdentifierName), comments.([]*Comment), NewLocationFromCurrent(c)), nil
}

NamespaceScopeAnyToken = '*' {
	return NewIdentifierName("*", NewLocationFromCurrent(c)), nil
}

Definition = comments:ReservedComments v:(Const / Typedef / Enum / Service / Struct / Union / Exception) annos:Annotations? endLineComments:ReservedEndLineComments {
	c.globalStore["parse"] = "definition"
	def := v.(Definition)
	def.SetComments(comments.([]*Comment), endLineComments.([]*Comment))
	def.SetAnnotations(toAnnotations(annos))
	def.SetLocation(NewLocationFromCurrent(c))
	return def, nil
} / x:(ReservedComments &(.+) &{
	/* fmt.Println("definition predict:", c.pos, "text:", string(c.text)) */
	if state, ok := c.globalStore["parse"]; ok && state.(string) == "definition" {
		return true, nil
	}
	return false, nil
} %{errDefinition}) {
	/* fmt.Println("definition return:", c.pos, "text:", string(c.text)) */
	return x.([]any)[3], nil
} //{errConst} ErrConst //{errTypedef} ErrTypedef //{errEnum} ErrEnum //{errService} ErrService //{errStruct} ErrStruct //{errUnion} ErrUnion //{errException} ErrException

Const = constKeyword:CONST t:FieldType name:DefinitionIdentifier v:ConstEqualValue sep:ListSeparator? {
	equalAndValue := v.([]any)
	return NewConst(constKeyword.(*ConstKeyword), equalAndValue[0].(*EqualKeyword), toListSeparatorKeyword(sep), name.(*Identifier), t.(*FieldType), equalAndValue[1].(*ConstValue), NewLocationFromCurrent(c)), nil
} / x:(&(CONST .*) %{errConst}) {
	return x.([]any)[1], nil
} //{errIdentifier} ErrConstIdentifier //{errConstMissingValue} ErrConstMissingValue //{errConstConstValue} ErrConstConstValue

ConstEqualValue = v:(EQUAL ConstValue) {
	return v, nil
} / x:(!EQUAL %{errConstMissingValue}) {
	return []any{NewBadEqualKeyword(), x.([]any)[1]}, nil
} / x:(EQUAL %{errConstConstValue}) {
	return x, nil
}

Typedef = typedefKeyword:TYPEDEF t:FieldType alias:DefinitionIdentifier {
	return NewTypedef(typedefKeyword.(*TypedefKeyword), t.(*FieldType), alias.(*Identifier), NewLocationFromCurrent(c)), nil
} / x:(&(TYPEDEF .*) %{errTypedef}) {
	return x.([]any)[1], nil
} //{errIdentifier} ErrTypedefIdentifier

Enum = enum:ENUM name:DefinitionIdentifier lcur:LCUR v:EnumValueLine* rcur:RCUR {
	values := toEnumValueSlice(v)
	return NewEnum(enum.(*EnumKeyword), lcur.(*LCurKeyword), rcur.(*RCurKeyword), name.(*Identifier), values, NewLocationFromCurrent(c)), nil
} / x:(&(ENUM .*) %{errEnum}) {
	return x.([]any)[1], nil
} //{errIdentifier} ErrEnumIdentifier //{errRCUR} ErrEnumRCUR //{errEnumValue} ErrEnumValue

EnumValueLine = comments:ReservedComments v:EnumValue endLineComments:ReservedEndLineComments {
        v.(*EnumValue).SetComments(comments.([]*Comment), endLineComments.([]*Comment))
	return v, nil
}

EnumValue =  name:Identifier value:(EnumValueIntConstant)? annos:Annotations? sep:ListSeparator? {
	var valueNode *ConstValue
	var equalNode *EqualKeyword
	intV := int64(-1)
	if value != nil {
		//fmt.Println(value.(Node).Type(), value)
		equalNode = value.([]any)[0].(*EqualKeyword)
		valueNode = value.([]any)[1].(*ConstValue)
		intV = valueNode.Value.(int64)
	}

	return NewEnumValue(toListSeparatorKeyword(sep), equalNode, name.(*Identifier), valueNode, intV, toAnnotations(annos), NewLocationFromCurrent(c)), nil
} //{errIntConstant} ErrEnumValueIntConstant

Service = svc:SERVICE name:DefinitionIdentifier extends:( EXTENDS Identifier )? lcur:LCUR fns:Function* rcur:RCUR {
	var extendsVal *Identifier
	var extendsKeyword *ExtendsKeyword
	if extends != nil {
		extendsKeyword = extends.([]any)[0].(*ExtendsKeyword)
		extendsVal = extends.([]any)[1].(*Identifier)
	}
	fnsVal := toFunctionSlice(fns)
	return NewService(svc.(*ServiceKeyword), extendsKeyword, lcur.(*LCurKeyword), rcur.(*RCurKeyword), name.(*Identifier), extendsVal, fnsVal, NewLocationFromCurrent(c)), nil
} / x:(&(SERVICE .*) %{errService}) {
	return x.([]any)[1], nil
} //{errIdentifier} ErrServiceIdentifier //{errRCUR} ErrServiceRCUR //{errFunction} ErrServiceFunction 

Struct = st:STRUCT id:DefinitionIdentifier lcur:LCUR fields:FieldWithThrow* rcur:RCUR {
	return NewStruct(st.(*StructKeyword), lcur.(*LCurKeyword), rcur.(*RCurKeyword), id.(*Identifier), toFieldSlice(fields), NewLocationFromCurrent(c)), nil
} / x:(&(STRUCT .*) %{errStruct}) {
	return x.([]any)[1], nil
} //{errIdentifier} ErrStructIdentifier //{errRCUR} ErrStructRCUR  //{errField} ErrStructField

Union = union:UNION name:DefinitionIdentifier lcur:LCUR fields:FieldWithThrow* rcur:RCUR {
	return NewUnion(union.(*UnionKeyword), lcur.(*LCurKeyword), rcur.(*RCurKeyword), name.(*Identifier), toFieldSlice(fields), NewLocationFromCurrent(c)), nil
} / x:(&(UNION .*) %{errUnion}) {
	return x.([]any)[1], nil
} //{errIdentifier} ErrUnionIdentifier //{errRCUR} ErrUnionRCUR //{errField} ErrUnionField


Exception <- excep:EXCEPTION name:DefinitionIdentifier lcur:LCUR fields:FieldWithThrow* rcur:RCUR {
	return NewException(excep.(*ExceptionKeyword), lcur.(*LCurKeyword), rcur.(*RCurKeyword), name.(*Identifier), toFieldSlice(fields), NewLocationFromCurrent(c)), nil
} / x:(&(EXCEPTION .*) %{errException}) {
	return x.([]any)[1], nil
} //{errIdentifier} ErrExceptionIdentifier //{errRCUR} ErrExceptionRCUR //{errField} ErrExceptionField


FieldWithThrow = Field / x:( ReservedComments !(( '}' Indent*) / DefinitionStart ) %{errField} ) {
	return x.([]any)[2], nil
}

Field = comments:ReservedComments index:FieldId required:FieldReq? fieldType:FieldType id:Identifier value:(EQUAL ConstValue)? annos:Annotations? sep:ListSeparator? lineComments:ReservedEndLineComments {
        var constV *ConstValue
	var equalKeyword *EqualKeyword
	if value !=  nil {
           equalKeyword = value.([]any)[0].(*EqualKeyword)
	   constV = value.([]any)[1].(*ConstValue)
	}
	var requiredV *RequiredKeyword
	if required != nil {
		requiredV = required.(*RequiredKeyword)
	}

	return NewField(equalKeyword, toListSeparatorKeyword(sep), comments.([]*Comment), lineComments.([]*Comment), toAnnotations(annos), index.(*FieldIndex), requiredV, fieldType.(*FieldType), id.(*Identifier), constV, NewLocationFromCurrent(c)), nil
}


FieldId = comments:ReservedComments i:FieldIndex colon:COLON Indent* {
	fieldIndex := i.(*FieldIndex)
	

	return NewFieldIndex(colon.(*ColonKeyword), fieldIndex.Value, comments.([]*Comment), fieldIndex.Location), nil
} //{errFieldIndex} ErrFieldIndex

FieldReq = comments:ReservedComments r:IsRequired Indent* {
	kw := NewKeyword(comments.([]*Comment), r.(*KeywordLiteral), NewLocationFromCurrent(c))

	return &RequiredKeyword{Keyword: kw}, nil
}
IsRequired = v:(RequiredToken / OptionalToken) {
	return v, nil
}

RequiredToken = "required" {
	return NewKeywordLiteral(c), nil
}

OptionalToken = "optional" {
	return NewKeywordLiteral(c), nil
}

Function = comments:ReservedComments oneway:ONEWAY? ft:FunctionType name:DefinitionIdentifier lpar:LPAR args:FunctionFieldWithThrow* rpar:RPAR throws:Throws? annos:Annotations? sep:ListSeparator? endLineComments:ReservedEndLineComments {
	var ftype *FieldType
	var voidKeyword *VoidKeyword
	if _, ok := ft.(*VoidKeyword); ok {
		voidKeyword = ft.(*VoidKeyword)
	} else {
		ftype = ft.(*FieldType) 
	}

	var throwsV *Throws
	if throws != nil {
		throwsV = throws.(*Throws)
	}

	var onewayKeyword *OnewayKeyword
	if oneway != nil {
		onewayKeyword = oneway.(*OnewayKeyword)
	}

	return NewFunction(lpar.(*LParKeyword), rpar.(*RParKeyword), toListSeparatorKeyword(sep), name.(*Identifier), onewayKeyword, voidKeyword, ftype, toFieldSlice(args), throwsV, comments.([]*Comment), endLineComments.([]*Comment), toAnnotations(annos), NewLocationFromCurrent(c)), nil
} / x:(ReservedComments &(oneway:ONEWAY? ft:FunctionType) %{errFunction}) {
	return x.([]any)[2], nil
} //{errIdentifier} ErrFunctionIdentifier //{errField} ErrFunctionArgument

FunctionFieldWithThrow = v:Field {
	return v, nil
} /  x:(comments:ReservedComments &(index:FieldId required:FieldReq? fieldType:FieldType) %{errField})  {
	return x.([]any)[2], nil
}


FunctionType  <- VOID / FieldType

Throws <- throws:THROWS lpar:LPAR fields:Field* rpar:RPAR {
	return NewThrows(throws.(*ThrowsKeyword), lpar.(*LParKeyword), rpar.(*RParKeyword), toFieldSlice(fields), NewLocationFromCurrent(c)), nil
}

FieldType = v:(ContainerType / BaseType / IdentifierType) annos:Annotations? {
	ft := v.(*FieldType)
	ft.Annotations = toAnnotations(annos)

	return ft, nil
}

IdentifierType = v:Identifier {
	return v.(*Identifier).ToFieldType(), nil
}

BaseType = v:(BOOL / BYTE / I8 / I16 / I32 / I64 / DOUBLE / STRING / BINARY) {
	return NewFieldType(nil, nil, nil, nil, v.(*TypeName), nil, nil, NewLocationFromCurrent(c)), nil
}

ContainerType = v:(MapType / SetType / ListType) {
	return v.(*FieldType), nil
}

MapType =  t:MAP cpp:CppType? lp:LPOINT key:FieldType comma:COMMA value:FieldType rp:RPOINT {
	var cppType *CppType
	if cpp != nil {
		cppType = cpp.(*CppType)
	}
	

	return NewFieldType(lp.(*LPointKeyword), rp.(*RPointKeyword), comma.(*CommaKeyword), cppType, t.(*TypeName), key.(*FieldType), value.(*FieldType), NewLocationFromCurrent(c)), nil
}

SetType = t:SET cpp:CppType? lp:LPOINT key:FieldType rp:RPOINT {
	var cppType *CppType
	if cpp != nil {
		cppType = cpp.(*CppType)
	}

	return NewFieldType(lp.(*LPointKeyword), rp.(*RPointKeyword), nil, cppType, t.(*TypeName), key.(*FieldType), nil, NewLocationFromCurrent(c)), nil
}

ListType = t:LIST lp:LPOINT key:FieldType rp:RPOINT cpp:CppType? {
	var cppType *CppType
	if cpp != nil {
		cppType = cpp.(*CppType)
	}

	return NewFieldType(lp.(*LPointKeyword), rp.(*RPointKeyword), nil, cppType, t.(*TypeName), key.(*FieldType), nil, NewLocationFromCurrent(c)), nil
}

CppType = cpp:CPPTYPE l:Literal {
	return NewCppType(cpp.(*CppTypeKeyword), l.(*Literal), NewLocationFromCurrent(c)), nil
}

ConstValue = v:(DoubleConstant / IntConstant / Literal / IdentifierConst / ConstMap / ConstList ) {
	if literal, ok := v.(*Literal); ok {
		return NewConstValue("string", literal, NewLocationFromCurrent(c)), nil
	}
	return v.(*ConstValue), nil
}

IdentifierConst = id:Identifier {
	return NewConstValue("identifier", id.(*Identifier).Name.Text, NewLocationFromCurrent(c)), nil
}

EnumValueIntConstant = v:(EQUAL IntConstant) {
	return v, nil
} / x:(EQUAL ReservedComments %{errIntConstant} Indent*) {
	return []any{x.([]any)[0], x.([]any)[2]}, nil
}

IntConstant = comments:ReservedComments  v:(HexIntConstant / OctIntConstant / NormalIntConstant) ![a-zA-Z]  Indent* {
	cv := v.(*ConstValue)
	cv.SetComments(comments.([]*Comment))

	return cv, nil
} / x:(ReservedComments &("0x" / "0o" / (('+' / '-')? Digit)) %{errIntConstant}) {
	return x.([]any)[2], nil
}

HexIntConstant = "0x" ([0-9] / [A-Z] / [a-z])+ {
        v, err := strconv.ParseInt(strings.TrimLeft(string(c.text), "0x"), 16, 64)
	if err != nil {
		return nil, err
	}

	cv := NewConstValue("i64", v, NewLocationFromCurrent(c))
	cv.ValueInText = string(c.text)

	return cv, nil
}

OctIntConstant = "0o" Digit+ {
	v, err := strconv.ParseInt(strings.TrimLeft(string(c.text), "0o"), 8, 64)
	if err != nil {
		return nil, err
	}
	cv := NewConstValue("i64", v, NewLocationFromCurrent(c))
	cv.ValueInText = string(c.text)

	return cv, nil
}

NormalIntConstant = ('+' / '-')? Digit+ {
	v, err := strconv.ParseInt(string(c.text), 10, 64)
	if err != nil {
		return nil, err
	}
	cv := NewConstValue("i64", v, NewLocationFromCurrent(c))
	cv.ValueInText = string(c.text)

	return cv, nil
}

FieldIndex = Digit+ {
	v, err := strconv.ParseInt(string(c.text), 10, 64)
	if err != nil {
		return nil, err
	}
	return NewFieldIndex(nil, int(v), nil, NewLocationFromCurrent(c)), nil
} / x:(ReservedComments &([a-zA-Z]+ COLON) %{errFieldIndex}) {
	return x.([]any)[2], nil
}

DoubleConstant  = comments:ReservedComments v:DoubleConstantValue Indent* {
	cv := v.(*ConstValue)
	cv.SetComments(comments.([]*Comment))

	return cv, nil
}

DoubleConstantValue = ('+' / '-')? (Digit* '.' Digit+  Exponent? / Digit+ Exponent) {
    	v, err := strconv.ParseFloat(string(c.text), 64)
	if err != nil {
		return nil, err
	}
    	cv := NewConstValue("double", v, NewLocationFromCurrent(c))
	cv.ValueInText = string(c.text)

	return cv, nil
}

Exponent = ('e' / 'E') IntConstant

Annotations <- lpar:LPAR annos:Annotation+ rpar:RPAR {
	return NewAnnotations(lpar.(*LParKeyword), rpar.(*RParKeyword), toAnnotationSlice(annos), NewLocationFromCurrent(c)), nil
}

Annotation <- id:Identifier eq:EQUAL value:Literal sep:ListSeparator? {
	return NewAnnotation(eq.(*EqualKeyword), toListSeparatorKeyword(sep), id.(*Identifier), value.(*Literal), NewLocationFromCurrent(c)), nil
}

ConstList  = lbrk:LBRK v:ConstListItem* rbrk:RBRK {
	cv := NewConstValue("list", toConstValueSlice(v), NewLocationFromCurrent(c))

	cv.LBrkKeyword = lbrk.(*LBrkKeyword)
	cv.RBrkKeyword = rbrk.(*RBrkKeyword)

	return cv, nil
}

ConstListItem = v:ConstValue sep:ListSeparator? {
	cv := v.(*ConstValue)

	if sep != nil {
		cv.ListSeparatorKeyword = sep.(*ListSeparatorKeyword)
	}

	return cv, nil
}

ConstMap  = lcur:LCUR v:ConstMapItem* rcur:RCUR {
	cv := NewConstValue("map", toConstValueSlice(v), NewLocationFromCurrent(c))

	cv.LCurKeyword = lcur.(*LCurKeyword)
	cv.RCurKeyword = rcur.(*RCurKeyword)

	return cv, nil
}

ConstMapItem = key:ConstValue colon:COLON value:ConstValue sep:ListSeparator? {
	cv := NewMapConstValue(key.(*ConstValue), value.(*ConstValue), NewLocationFromCurrent(c))

	cv.ColonKeyword = colon.(*ColonKeyword)
	if sep != nil {
		cv.ListSeparatorKeyword = sep.(*ListSeparatorKeyword)
	}

	return cv, nil
}

EscapeLiteralChar = '\\' ["'] {
	return string(c.text), nil
}

Literal = l:(Literal1 / Literal2) {
	return l, nil
} //{errLiteral1MissingRight} ErrLiteral1MissingRight //{errLiteral1} ErrLiteral1 //{errLiteral2MissingRight} ErrLiteral2MissingRight //{errLiteral2} ErrLiteral2

Literal1 = comments:ReservedComments '"' t:Literal1Val '"' Indent* {
	return NewLiteral(comments.([]*Comment), t.(*LiteralValue), "\"", NewLocationFromCurrent(c)), nil
} / x:(&(ReservedComments '"' t:(EscapeLiteralChar / !'"' .)* Indent*) %{errLiteral1MissingRight}) {
	 return x.([]any)[1], nil 
}

Literal2 = comments:ReservedComments "'" t:Literal2Val "'" Indent* {
	return NewLiteral(comments.([]*Comment), t.(*LiteralValue), "'", NewLocationFromCurrent(c)), nil
} / x:(&(ReservedComments "'" t:(EscapeLiteralChar / !"'" .)* Indent*) %{errLiteral2MissingRight}) {
	 return x.([]any)[1], nil 
}

Literal1Val = (EscapeLiteralChar / !["\r\n] .)* {
	return NewLiteralValue(string(c.text), NewLocationFromCurrent(c)), nil
}

Literal2Val = (EscapeLiteralChar / !['\r\n] .)* {
	return NewLiteralValue(string(c.text), NewLocationFromCurrent(c)), nil
}

DefinitionIdentifier = id:Identifier {
	return id.(*Identifier), nil
} / %{errIdentifier}

Identifier = comments:ReservedComments id:IdentifierToken Indent* {
	idName := id.(*IdentifierName)

	return NewIdentifier(idName, comments.([]*Comment), NewLocationFromCurrent(c)), nil
}

IdentifierToken = Letter ( Letter / Digit / '.' )* {
	return NewIdentifierName(string(c.text), NewLocationFromCurrent(c)), nil
} 

ListSeparator = comments:ReservedComments t:ListSeparatorToken Indent* {
	kw := NewKeyword(comments.([]*Comment), t.(*KeywordLiteral), NewLocationFromCurrent(c))

	return &ListSeparatorKeyword{Keyword: kw}, nil
}

ListSeparatorToken = (',' / ';') {
	return NewKeywordLiteral(c), nil
}

Letter = [A-Z] / [a-z] / '_' {
	return string(c.text), nil
}
LetterOrDigit = [a-z] / [A-Z] / [0-9] / [_$] {
	return string(c.text), nil
}

Digit = [0-9] {
	return string(c.text), nil
}

ReservedComments = comments:(Space / Comment)* {
	return toCommentSlice(comments), nil
}
ReservedEndLineComments = comments:(Indent / Comment)* {
	return toCommentSlice(comments), nil
}

Space = (Indent / CarriageReturnLineFeed)+ {
	return "", nil
}
Indent = [ \t\v] {
	return "", nil
}
CarriageReturnLineFeed = [\r\n]

Comment = v:(LongComment / LineComment / UnixComment) {
	return v.(*Comment), nil
}
LongComment = "/*" LongCommentMatch "*/" {
	return NewComment(string(c.text), CommentStyleMultiLine, NewLocationFromCurrent(c)), nil
}
LongCommentMatch = (!"*/" .)* {
	return string(c.text), nil
}

LineComment = "//" LineCommentMatch {
	return NewComment(string(c.text), CommentStyleSingleLine, NewLocationFromCurrent(c)), nil
}
LineCommentMatch = (![\r\n] .)* {
	return string(c.text), nil
}

UnixComment = '#' UnixCommentMatch {
	return NewComment(string(c.text), CommentStyleShell, NewLocationFromCurrent(c)), nil
}
UnixCommentMatch = (![\r\n] .)*  {
	return string(c.text), nil
}

BOOL = comments:ReservedComments t:BOOLToken        !LetterOrDigit  Indent* {
	tn := t.(*TypeName)
	tn.Comments = comments.([]*Comment)

	return tn, nil
}
BOOLToken  = "bool" {
	return NewTypeName(string(c.text), c.pos), nil
}

BYTE = comments:ReservedComments t:BYTEToken        !LetterOrDigit  Indent* {
	tn := t.(*TypeName)
	tn.Comments = comments.([]*Comment)

	return tn, nil
}
BYTEToken = "byte" {
	return NewTypeName(string(c.text), c.pos), nil
}

I8 = comments:ReservedComments t:I8Token          !LetterOrDigit  Indent* {
	tn := t.(*TypeName)
	tn.Comments = comments.([]*Comment)

	return tn, nil
}
I8Token = "i8" {
	return NewTypeName(string(c.text), c.pos), nil
}


I16 = comments:ReservedComments t:I16Token         !LetterOrDigit  Indent* {
	tn := t.(*TypeName)
	tn.Comments = comments.([]*Comment)

	return tn, nil
}
I16Token = "i16" {
	return NewTypeName(string(c.text), c.pos), nil
}

I32 = comments:ReservedComments t:I32Token         !LetterOrDigit  Indent* {
	tn := t.(*TypeName)
	tn.Comments = comments.([]*Comment)

	return tn, nil
}
I32Token = "i32" {
	return NewTypeName(string(c.text), c.pos), nil
}

I64 = comments:ReservedComments t:I64Token         !LetterOrDigit  Indent* {
	tn := t.(*TypeName)
	tn.Comments = comments.([]*Comment)

	return tn, nil
}
I64Token = "i64" {
	return NewTypeName(string(c.text), c.pos), nil
}

DOUBLE = comments:ReservedComments t:DOUBLEToken      !LetterOrDigit  Indent* {
	tn := t.(*TypeName)
	tn.Comments = comments.([]*Comment)

	return tn, nil
}
DOUBLEToken = "double" {
	return NewTypeName(string(c.text), c.pos), nil
}

STRING = comments:ReservedComments t:STRINGToken      !LetterOrDigit  Indent* {
	tn := t.(*TypeName)
	tn.Comments = comments.([]*Comment)

	return tn, nil
}
STRINGToken = "string" {
	return NewTypeName(string(c.text), c.pos), nil
}

BINARY = comments:ReservedComments t:BINARYToken      !LetterOrDigit  Indent* {
	tn := t.(*TypeName)
	tn.Comments = comments.([]*Comment)

	return tn, nil
}
BINARYToken = "binary" {
	return NewTypeName(string(c.text), c.pos), nil
}

MAP = comments:ReservedComments t:MAPToken           !LetterOrDigit  Indent* {
	tn := t.(*TypeName)
	tn.Comments = comments.([]*Comment)

	return tn, nil
}
MAPToken = "map" {
	return NewTypeName(string(c.text), c.pos), nil
}

SET = comments:ReservedComments t:SETToken           !LetterOrDigit  Indent* {
	tn := t.(*TypeName)
	tn.Comments = comments.([]*Comment)

	return tn, nil
}
SETToken = "set" {
	return NewTypeName(string(c.text), c.pos), nil
}

LIST = comments:ReservedComments t:ListToken          !LetterOrDigit  Indent* {
	tn := t.(*TypeName)
	tn.Comments = comments.([]*Comment)

	return tn, nil
}
ListToken = "list" {
	return NewTypeName(string(c.text), c.pos), nil
}

CONST = comments:ReservedComments t:CONSTToken         !LetterOrDigit  Indent* {

	kw := NewKeyword(comments.([]*Comment), t.(*KeywordLiteral), NewLocationFromCurrent(c))

	return &ConstKeyword{Keyword: kw}, nil
}
CONSTToken = "const" {
	return NewKeywordLiteral(c), nil
}

ONEWAY = comments:ReservedComments t:ONEWAYToken        !LetterOrDigit  Indent* {

	kw := NewKeyword(comments.([]*Comment), t.(*KeywordLiteral), NewLocationFromCurrent(c))

	return &OnewayKeyword{Keyword: kw}, nil
}
ONEWAYToken = "oneway" {
	return NewKeywordLiteral(c), nil
}

TYPEDEF = comments:ReservedComments t:TYPEDEFToken     !LetterOrDigit  Indent* {
	kw := NewKeyword(comments.([]*Comment), t.(*KeywordLiteral), NewLocationFromCurrent(c))

	return &TypedefKeyword{Keyword: kw}, nil
}

TYPEDEFToken = "typedef" {
	return NewKeywordLiteral(c), nil
}


VOID        = comments:ReservedComments t:VOIDToken         !LetterOrDigit  Indent* {
	kw := NewKeyword(comments.([]*Comment), t.(*KeywordLiteral), NewLocationFromCurrent(c))

	return &VoidKeyword{Keyword: kw}, nil
}
VOIDToken = "void" {
	return NewKeywordLiteral(c), nil
}

THROWS      = comments:ReservedComments t:THROWSToken        !LetterOrDigit  Indent* {
	kw := NewKeyword(comments.([]*Comment), t.(*KeywordLiteral), NewLocationFromCurrent(c))

	return &ThrowsKeyword{Keyword: kw}, nil
}
THROWSToken = "throws" {
	return NewKeywordLiteral(c), nil
}

EXCEPTION   = comments:ReservedComments t:EXCEPTIONToken     !LetterOrDigit  Indent* {
	kw := NewKeyword(comments.([]*Comment), t.(*KeywordLiteral), NewLocationFromCurrent(c))

	return &ExceptionKeyword{Keyword: kw}, nil
}
EXCEPTIONToken = "exception" {
	return NewKeywordLiteral(c), nil
}


EXTENDS     = comments:ReservedComments t:EXTENDSToken       !LetterOrDigit  Indent* {
	kw := NewKeyword(comments.([]*Comment), t.(*KeywordLiteral), NewLocationFromCurrent(c))

	return &ExtendsKeyword{Keyword: kw}, nil
}
EXTENDSToken = "extends" {
	return NewKeywordLiteral(c), nil
}

SERVICE     = comments:ReservedComments t:SERVICEToken       !LetterOrDigit  Indent* {
	kw := NewKeyword(comments.([]*Comment), t.(*KeywordLiteral), NewLocationFromCurrent(c))

	return &ServiceKeyword{Keyword: kw}, nil
}
SERVICEToken = "service" {
	return NewKeywordLiteral(c), nil
}

STRUCT      = comments:ReservedComments t:STRUCTToken        !LetterOrDigit  Indent* {
	kw := NewKeyword(comments.([]*Comment), t.(*KeywordLiteral), NewLocationFromCurrent(c))

	return &StructKeyword{Keyword: kw}, nil
}
STRUCTToken = "struct" {
	return NewKeywordLiteral(c), nil
}

UNION       = comments:ReservedComments t:UNIONToken        !LetterOrDigit  Indent* {
	kw := NewKeyword(comments.([]*Comment), t.(*KeywordLiteral), NewLocationFromCurrent(c))

	return &UnionKeyword{Keyword: kw}, nil
}
UNIONToken = "union" {
	return NewKeywordLiteral(c), nil
}

ENUM        = comments:ReservedComments t:ENUMToken          !LetterOrDigit  Indent* {
	kw := NewKeyword(comments.([]*Comment), t.(*KeywordLiteral), NewLocationFromCurrent(c))

	return &EnumKeyword{Keyword: kw}, nil
}
ENUMToken = "enum" {
	return NewKeywordLiteral(c), nil
}

INCLUDE     = comments:ReservedComments t:INCLUDEToken       !LetterOrDigit  Indent* {
	kw := NewKeyword(comments.([]*Comment), t.(*KeywordLiteral), NewLocationFromCurrent(c))

	return &IncludeKeyword{Keyword: kw}, nil
}
INCLUDEToken = "include" {
	return NewKeywordLiteral(c), nil
}

CPPINCLUDE  = comments:ReservedComments t:CPPINCLUDEToken   !LetterOrDigit  Indent* {
	kw := NewKeyword(comments.([]*Comment), t.(*KeywordLiteral), NewLocationFromCurrent(c))

	return &CPPIncludeKeyword{Keyword: kw}, nil
}
CPPINCLUDEToken = "cpp_include" {
	return NewKeywordLiteral(c), nil
}

NAMESPACE   = comments:ReservedComments t:NAMESPACEToken     !LetterOrDigit  Indent* {
	kw := NewKeyword(comments.([]*Comment), t.(*KeywordLiteral), NewLocationFromCurrent(c))

	return &NamespaceKeyword{Keyword: kw}, nil
}
NAMESPACEToken = "namespace" {
	return NewKeywordLiteral(c), nil
}


CPPTYPE     = comments:ReservedComments t:CPPTYPEToken      !LetterOrDigit  Indent* {
	kw := NewKeyword(comments.([]*Comment), t.(*KeywordLiteral), NewLocationFromCurrent(c))

	return &CppTypeKeyword{Keyword: kw}, nil
}
CPPTYPEToken = "cpp_type" {
	return NewKeywordLiteral(c), nil
}


LBRK        = comments:ReservedComments t:LBRKToken     Indent* {
	kw := NewKeyword(comments.([]*Comment), t.(*KeywordLiteral), NewLocationFromCurrent(c))

	return &LBrkKeyword{Keyword: kw}, nil
}
LBRKToken = "[" {
	return NewKeywordLiteral(c), nil
}

RBRK        = comments:ReservedComments t:RBRKToken     Indent* {
	kw := NewKeyword(comments.([]*Comment), t.(*KeywordLiteral), NewLocationFromCurrent(c))

	return &RBrkKeyword{Keyword: kw}, nil
}
RBRKToken = "]" {
	return NewKeywordLiteral(c), nil
}

LCUR       = comments:ReservedComments t:LCURToken     Indent* {
	kw := NewKeyword(comments.([]*Comment), t.(*KeywordLiteral), NewLocationFromCurrent(c))

	return &LCurKeyword{Keyword: kw}, nil
}
RCUR = comments:ReservedComments t:RCURToken     Indent* {
	kw := NewKeyword(comments.([]*Comment), t.(*KeywordLiteral), NewLocationFromCurrent(c))

	return &RCurKeyword{Keyword: kw}, nil
}
LCURToken = "{" {
	return NewKeywordLiteral(c), nil
}
RCURToken = "}" {
	return NewKeywordLiteral(c), nil
} / %{errRCUR}


EQUAL = comments:ReservedComments t:EQUALToken     Indent* {
	kw := NewKeyword(comments.([]*Comment), t.(*KeywordLiteral), NewLocationFromCurrent(c))

	return &EqualKeyword{Keyword: kw}, nil
}
EQUALToken = "=" {
	return NewKeywordLiteral(c), nil
}

LPOINT      = comments:ReservedComments t:LPOINTToken     Indent* {
	kw := NewKeyword(comments.([]*Comment), t.(*KeywordLiteral), NewLocationFromCurrent(c))

	return &LPointKeyword{Keyword: kw}, nil
}
LPOINTToken = "<" {
	return NewKeywordLiteral(c), nil
}

RPOINT      = comments:ReservedComments t:RPOINTToken    Indent* {
	kw := NewKeyword(comments.([]*Comment), t.(*KeywordLiteral), NewLocationFromCurrent(c))

	return &RPointKeyword{Keyword: kw}, nil
}
RPOINTToken = ">" {
	return NewKeywordLiteral(c), nil
}

COMMA       = comments:ReservedComments t:COMMAToken     Indent* {
	kw := NewKeyword(comments.([]*Comment), t.(*KeywordLiteral), NewLocationFromCurrent(c))

	return &CommaKeyword{Keyword: kw}, nil
}
COMMAToken = "," {
	return NewKeywordLiteral(c), nil
}

LPAR        = comments:ReservedComments t:LPARToken     Indent* {
	kw := NewKeyword(comments.([]*Comment), t.(*KeywordLiteral), NewLocationFromCurrent(c))

	return &LParKeyword{Keyword: kw}, nil
}
LPARToken = "(" {
	return NewKeywordLiteral(c), nil
}

RPAR        = comments:ReservedComments t:RPARToken     Indent* {
	kw := NewKeyword(comments.([]*Comment), t.(*KeywordLiteral), NewLocationFromCurrent(c))

	return &RParKeyword{Keyword: kw}, nil
}
RPARToken = ")" {
	return NewKeywordLiteral(c), nil
}

COLON       = comments:ReservedComments t:COLONToken     Indent* {
	kw := NewKeyword(comments.([]*Comment), t.(*KeywordLiteral), NewLocationFromCurrent(c))

	return &ColonKeyword{Keyword: kw}, nil
}
COLONToken = ":" {
	return NewKeywordLiteral(c), nil
}

DefinitionStart = STRUCT / UNION / EXCEPTION / ENUM / SERVICE / CONST / TYPEDEF

ErrFieldIndex = #{
	return InvalidFieldIndexError
} (!([:\r\n]) .)* { // 消费到冒号或本行结束
	return NewBadFieldIndex(NewLocationFromCurrent(c)), nil
}

// struct

ErrStructField = #{
	return InvalidStructFieldError
} ( !(Field / (ReservedComments '}' Indent*) / DefinitionStart ) . )+ {
	return NewBadField(NewLocationFromCurrent(c)), nil
}

ErrStructIdentifier = #{
	return InvalidStructIdentifierError
} ( !'{' .)* { // struct identifier 异常，consume 掉异常字符直到出现 '{' 为止
	t := NewBadIdentifier(NewLocationFromCurrent(c))

	return t, nil
} // 构造 identifier 的 badnode

ErrStructRCUR = #{
	return InvalidStructBlockRCURError
} ( !DefinitionStart .)* { // 缺少 '}'，消费异常字符直到出现下一个 definition。TODO(jpf): 后面会加入 typedef 等定义，需要扩展补充
	return NewBadKeywordLiteral(c), nil
}

ErrStructLCUR = #{
	return InvalidStructBlockLCURError
} ( !'}' .)* { // 缺少 '{'，消费异常字符直到出现下一个 Field 或者 '}'
	return NewBadKeywordLiteral(c), nil
}

// union

ErrUnionIdentifier = #{
	return InvalidUnionIdentifierError
} ( !'{' .)* { // identifier 异常，consume 掉异常字符直到出现 '{' 为止
	t := NewBadIdentifier(NewLocationFromCurrent(c))

	return t, nil
}

ErrUnionRCUR = #{
	return InvalidUnionBlockRCURError
} ( !DefinitionStart .)* {
	return NewBadKeywordLiteral(c), nil
}

ErrUnionLCUR = #{
	return InvalidUnionBlockLCURError
} ( !'}' .)* { // 缺少 '{'，消费异常字符直到出现下一个 Field 或者 '}'
	return "?", nil
}

ErrUnionField = #{
	return InvalidUnionFieldError
} ( !(Field / (ReservedComments '}' Indent*) / DefinitionStart ) . )+ {
	return NewBadField(NewLocationFromCurrent(c)), nil
}

// exception

ErrExceptionIdentifier = #{
	return InvalidExceptionIdentifierError
} ( !'{' .)* { // identifier 异常，consume 掉异常字符直到出现 '{' 为止
	t := NewBadIdentifier(NewLocationFromCurrent(c))

	return t, nil
}

ErrExceptionRCUR = #{
	return InvalidExceptionBlockRCURError
} ( !DefinitionStart .)* {
	return NewBadKeywordLiteral(c), nil
}

ErrExceptionLCUR = #{
	return InvalidExceptionBlockLCURError
} ( !'}' .)* { // 缺少 '{'，消费异常字符直到出现下一个 Field 或者 '}'
	return NewBadKeywordLiteral(c), nil
}

ErrExceptionField = #{
	return InvalidExceptionFieldError
} ( !(Field / (ReservedComments '}' Indent*) / DefinitionStart ) . )+ {
	return NewBadField(NewLocationFromCurrent(c)), nil
}

// enum

ErrEnumIdentifier = #{
	return InvalidEnumIdentifierError
} ( !'{' .)* { // enum identifier 异常，consume 掉异常字符直到出现 '{' 为止
	t := NewBadIdentifier(NewLocationFromCurrent(c))

	return t, nil
}

ErrEnumRCUR = #{
	return InvalidEnumBlockRCURError
} ( !DefinitionStart .)* {
	return NewBadKeywordLiteral(c), nil
}

ErrEnumLCUR = #{
	return InvalidEnumBlockLCURError
} ( !'}' .)* { // 缺少 '{'，消费异常字符直到出现下一个 Field 或者 '}'
	return NewBadKeywordLiteral(c), nil
}

ErrEnumValue = #{
	return InvalidEnumValueError
} ( !(Field / (ReservedComments '}' Indent*) / DefinitionStart ) . )* {
	return NewBadEnumValue(NewLocationFromCurrent(c)), nil
}

ErrEnumValueIntConstant = #{
	return InvalidEnumValueIntConstantError
} ( !(CarriageReturnLineFeed ) . )* {
	return  NewBadIntConstValue(NewLocationFromCurrent(c)), nil
}

// typedef

ErrTypedefIdentifier = #{
	return InvalidTypedefIdentifierError
} ( !(CarriageReturnLineFeed) .)* {
	t := NewBadIdentifier(NewLocationFromCurrent(c))
	return t, nil
}

// const

ErrConstIdentifier = #{
	return InvalidConstIdentifierError
} (!EQUAL .)* {
	t := NewBadIdentifier(NewLocationFromCurrent(c))

	return t, nil
}

ErrConstMissingValue = #{
	return InvalidConstMissingValueError
} (![\r\n] .)* {
	return NewBadConstValue(NewLocationFromCurrent(c)), nil
}

ErrConstConstValue = #{
	return InvalidConstConstValueError
} (![\r\n] .)* {
	return NewBadConstValue(NewLocationFromCurrent(c)), nil
}

// service

ErrServiceIdentifier = #{
	return InvalidServiceIdentifierError
} ( !'{' .)* { // identifier 异常，consume 掉异常字符直到出现 '{' 为止
	t := NewBadIdentifier(NewLocationFromCurrent(c))

	return t, nil
}

ErrServiceRCUR = #{
	return InvalidServiceBlockRCURError
} ( !DefinitionStart .)* {
	return NewBadKeywordLiteral(c), nil
}

ErrServiceFunction  = #{
	return InvalidServiceFunctionError
} ( ![\r\n] .)* {
	return NewBadFunction(NewLocationFromCurrent(c)), nil
}

// function
ErrFunctionIdentifier = #{
	return InvalidFunctionIdentifierError
} ( !'(' .)* { // identifier 异常，consume 掉异常字符直到出现 '(' 为止
	t := NewBadIdentifier(NewLocationFromCurrent(c))

	return t, nil
} // 构造 identifier 的 badnode

ErrFunctionArgument = #{
	return InvalidFunctionArgumentError
} ( ![,;)\r\n] . )* {
	return NewBadField(NewLocationFromCurrent(c)), nil
}


// common error

ErrLiteral1MissingRight = #{
	return InvalidLiteral1MissingRightError
} ( ![\r\n] .)* { // 消费异常字符直到这行结束
	return NewBadLiteral(NewLocationFromCurrent(c)), nil
}

ErrLiteral1 = #{
	return InvalidLiteral1Error
} ( ![\r\n] .)* { // 消费异常字符直到这行结束
	return NewBadLiteral(NewLocationFromCurrent(c)), nil
}

ErrLiteral2MissingRight = #{
	return InvalidLiteral2MissingRightError
} ( ![\r\n] .)* { // 消费异常字符直到这行结束
	return NewBadLiteral(NewLocationFromCurrent(c)), nil
}

ErrLiteral2 = #{
	return InvalidLiteral2Error
} ( ![\r\n] .)* { // 消费异常字符直到这行结束
	return NewBadLiteral(NewLocationFromCurrent(c)), nil
}

ErrConst = #{
	return InvalidConstError
} (![\r\n] .)* { // 消费异常字符直到这行结束
	return NewBadConst(NewLocationFromCurrent(c)), nil
}

ErrTypedef = #{
	return InvalidTypedefError
} (![\r\n] .)* { // 消费异常字符直到这行结束
	return NewBadTypedef(NewLocationFromCurrent(c)), nil
} 

ErrEnum = #{
	return InvalidEnumError
} (![\r\n] .)* { // 消费异常字符直到这行结束
	return NewBadEnum(NewLocationFromCurrent(c)), nil
} 

ErrService = #{
	return InvalidServiceError
} (![\r\n] .)* { // 消费异常字符直到这行结束
	return NewBadService(NewLocationFromCurrent(c)), nil
} 

ErrStruct = #{
	return InvalidStructError
} (![\r\n] .)* { // 消费异常字符直到这行结束
	return NewBadStruct(NewLocationFromCurrent(c)), nil
} 

ErrUnion = #{
	return InvalidUnionError
} (![\r\n] .)* { // 消费异常字符直到这行结束
	return NewBadUnion(NewLocationFromCurrent(c)), nil
} 

ErrException = #{
	return InvalidExceptionError
} (![\r\n] .)* { // 消费异常字符直到这行结束
	return NewBadException(NewLocationFromCurrent(c)), nil
} 

ErrDefinition = #{
	return InvalidDefinitionError
} (![\r\n] .)* { // 消费异常字符直到这行结束
	return NewBadDefinition(NewLocationFromCurrent(c)), nil
}

ErrInclude = #{
	return InvalidIncludeError
} (![\r\n] .)* { // 消费异常字符直到这行结束
	return NewBadInclude(NewLocationFromCurrent(c)), nil
}

ErrCppInclude = #{
	return InvalidCppIncludeError
} (![\r\n] .)* { // 消费异常字符直到这行结束
	return NewBadCPPInclude(NewLocationFromCurrent(c)), nil
}

ErrNamespace = #{
	return InvalidNamespaceError
} (![\r\n] .)* { // 消费异常字符直到这行结束
	return NewBadNamespace(NewLocationFromCurrent(c)), nil
}

ErrHeader = #{
	return InvalidHeaderError
} (![\r\n] .)* { // 消费异常字符直到这行结束
	return NewBadHeader(NewLocationFromCurrent(c)), nil
}
