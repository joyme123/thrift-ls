// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"sync"
	"unicode"
	"unicode/utf8"
)

func toStringSlice(strs any) []string {
	if strs == nil {
		return nil
	}

	items := strs.([]any)
	ret := make([]string, 0, len(items))
	for i := range items {
		var item string
		if _, ok := items[i].([]interface{}); ok {
			data := items[i].([]interface{})[1]
			if bs, ok := data.([]uint8); ok {
				item = string(bs)
			} else {
				item = items[i].([]interface{})[1].(string)
			}
		} else {
			item = items[i].(string)
		}

		ret = append(ret, item)
	}

	return ret
}

func toFieldSlice(fields any) []*Field {
	if fields == nil {
		return nil
	}

	items := fields.([]any)
	ret := make([]*Field, 0, len(items))
	for i := range items {
		item := items[i].(*Field)
		ret = append(ret, item)
	}
	return ret
}

func toConstValueSlice(values any) []*ConstValue {
	if values == nil {
		return nil
	}

	items := values.([]any)
	ret := make([]*ConstValue, 0, len(items))
	for i := range items {
		item := items[i].(*ConstValue)
		ret = append(ret, item)
	}
	return ret
}

func toString(text any) string {
	if text == nil {
		return ""
	}

	data := text.([]interface{})

	ret := bytes.NewBuffer(nil)
	for i := range data {
		ret.WriteString(data[i].(string))
	}

	return ret.String()
}

func toAnnotationSlice(annos any) []*Annotation {
	if annos == nil {
		return nil
	}
	items := annos.([]any)
	ret := make([]*Annotation, 0, len(items))
	for i := range items {
		ret = append(ret, items[i].(*Annotation))
	}

	return ret
}

func toHeaderSlice(headers any) []Header {
	if headers == nil {
		return nil
	}
	items := headers.([]any)
	ret := make([]Header, 0, len(items))
	for i := range items {
		ret = append(ret, items[i].(Header))
	}
	return ret
}

func toDefinitionSlice(defs any) []Definition {
	if defs == nil {
		return nil
	}
	items := defs.([]any)
	ret := make([]Definition, 0, len(items))
	for i := range items {
		ret = append(ret, items[i].(Definition))
	}
	return ret
}

func toEnumValueSlice(v any) []*EnumValue {
	if v == nil {
		return nil
	}
	values := v.([]any)

	ret := make([]*EnumValue, 0, len(values))
	value := int64(0)
	for i := range values {
		enumV := values[i].(*EnumValue)
		if enumV.ValueNode == nil {
			enumV.Value = value
		} else {
			value = enumV.Value
		}
		value++
		ret = append(ret, enumV)
	}
	return ret
}

func toFunctionSlice(fns any) []*Function {
	if fns == nil {
		return nil
	}
	items := fns.([]any)
	ret := make([]*Function, 0, len(items))
	for i := range items {
		ret = append(ret, items[i].(*Function))
	}
	return ret
}

func toCommentSlice(comments any) []*Comment {
	if comments == nil {
		return nil
	}
	items := comments.([]any)
	ret := make([]*Comment, 0, len(items))
	for i := range items {
		item := items[i]
		commentItem, ok := item.(*Comment)
		if ok {
			ret = append(ret, commentItem)
		}
	}

	if len(ret) == 0 {
		return nil
	}

	return ret
}

func toAnnotations(annos any) *Annotations {
	if annos == nil {
		return nil
	}

	return annos.(*Annotations)
}

func toListSeparatorKeyword(sep any) *ListSeparatorKeyword {
	if sep == nil {
		return nil
	}

	return sep.(*ListSeparatorKeyword)
}

var g = &grammar{
	rules: []*rule{
		{
			name: "Document",
			pos:  position{line: 182, col: 1, offset: 3075},
			expr: &recoveryExpr{
				pos: position{line: 182, col: 12, offset: 3086},
				expr: &recoveryExpr{
					pos: position{line: 182, col: 12, offset: 3086},
					expr: &actionExpr{
						pos: position{line: 182, col: 12, offset: 3086},
						run: (*parser).callonDocument3,
						expr: &seqExpr{
							pos: position{line: 182, col: 12, offset: 3086},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 182, col: 12, offset: 3086},
									label: "headers",
									expr: &zeroOrMoreExpr{
										pos: position{line: 182, col: 20, offset: 3094},
										expr: &ruleRefExpr{
											pos:  position{line: 182, col: 20, offset: 3094},
											name: "Header",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 182, col: 29, offset: 3103},
									label: "defs",
									expr: &zeroOrMoreExpr{
										pos: position{line: 182, col: 34, offset: 3108},
										expr: &ruleRefExpr{
											pos:  position{line: 182, col: 34, offset: 3108},
											name: "Definition",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 182, col: 46, offset: 3120},
									label: "comments",
									expr: &ruleRefExpr{
										pos:  position{line: 182, col: 55, offset: 3129},
										name: "ReservedComments",
									},
								},
								&notExpr{
									pos: position{line: 182, col: 72, offset: 3146},
									expr: &anyMatcher{
										line: 182, col: 73, offset: 3147,
									},
								},
							},
						},
					},
					recoverExpr: &ruleRefExpr{
						pos:  position{line: 184, col: 17, offset: 3291},
						name: "ErrHeader",
					},
					failureLabel: []string{
						"errHeader",
					},
				},
				recoverExpr: &ruleRefExpr{
					pos:  position{line: 184, col: 45, offset: 3319},
					name: "ErrDefinition",
				},
				failureLabel: []string{
					"errDefinition",
				},
			},
		},
		{
			name: "Header",
			pos:  position{line: 186, col: 1, offset: 3334},
			expr: &recoveryExpr{
				pos: position{line: 186, col: 10, offset: 3343},
				expr: &recoveryExpr{
					pos: position{line: 186, col: 10, offset: 3343},
					expr: &recoveryExpr{
						pos: position{line: 186, col: 10, offset: 3343},
						expr: &choiceExpr{
							pos: position{line: 186, col: 10, offset: 3343},
							alternatives: []any{
								&actionExpr{
									pos: position{line: 186, col: 10, offset: 3343},
									run: (*parser).callonHeader5,
									expr: &seqExpr{
										pos: position{line: 186, col: 10, offset: 3343},
										exprs: []any{
											&labeledExpr{
												pos:   position{line: 186, col: 10, offset: 3343},
												label: "comments",
												expr: &ruleRefExpr{
													pos:  position{line: 186, col: 19, offset: 3352},
													name: "ReservedComments",
												},
											},
											&labeledExpr{
												pos:   position{line: 186, col: 36, offset: 3369},
												label: "v",
												expr: &choiceExpr{
													pos: position{line: 186, col: 39, offset: 3372},
													alternatives: []any{
														&ruleRefExpr{
															pos:  position{line: 186, col: 39, offset: 3372},
															name: "Include",
														},
														&ruleRefExpr{
															pos:  position{line: 186, col: 49, offset: 3382},
															name: "CppInclude",
														},
														&ruleRefExpr{
															pos:  position{line: 186, col: 62, offset: 3395},
															name: "Namespace",
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 186, col: 73, offset: 3406},
												label: "endLineComments",
												expr: &ruleRefExpr{
													pos:  position{line: 186, col: 89, offset: 3422},
													name: "ReservedEndLineComments",
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 190, col: 5, offset: 3579},
									run: (*parser).callonHeader16,
									expr: &labeledExpr{
										pos:   position{line: 190, col: 5, offset: 3579},
										label: "x",
										expr: &seqExpr{
											pos: position{line: 190, col: 8, offset: 3582},
											exprs: []any{
												&notExpr{
													pos: position{line: 190, col: 8, offset: 3582},
													expr: &ruleRefExpr{
														pos:  position{line: 190, col: 10, offset: 3584},
														name: "Definition",
													},
												},
												&ruleRefExpr{
													pos:  position{line: 190, col: 22, offset: 3596},
													name: "ReservedComments",
												},
												&andExpr{
													pos: position{line: 190, col: 39, offset: 3613},
													expr: &oneOrMoreExpr{
														pos: position{line: 190, col: 41, offset: 3615},
														expr: &anyMatcher{
															line: 190, col: 41, offset: 3615,
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 190, col: 45, offset: 3619},
													run: (*parser).callonHeader25,
												},
												&throwExpr{
													pos:   position{line: 196, col: 3, offset: 3820},
													label: "errHeader",
												},
											},
										},
									},
								},
							},
						},
						recoverExpr: &ruleRefExpr{
							pos:  position{line: 200, col: 18, offset: 3985},
							name: "ErrInclude",
						},
						failureLabel: []string{
							"errInclude",
						},
					},
					recoverExpr: &ruleRefExpr{
						pos:  position{line: 200, col: 47, offset: 4014},
						name: "ErrorCppInclude",
					},
					failureLabel: []string{
						"errCppInclude",
					},
				},
				recoverExpr: &ruleRefExpr{
					pos:  position{line: 200, col: 80, offset: 4047},
					name: "ErrorNamespace",
				},
				failureLabel: []string{
					"errNamespace",
				},
			},
		},
		{
			name: "Include",
			pos:  position{line: 202, col: 1, offset: 4063},
			expr: &choiceExpr{
				pos: position{line: 202, col: 11, offset: 4073},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 202, col: 11, offset: 4073},
						run: (*parser).callonInclude2,
						expr: &seqExpr{
							pos: position{line: 202, col: 11, offset: 4073},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 202, col: 11, offset: 4073},
									label: "includeKeyword",
									expr: &ruleRefExpr{
										pos:  position{line: 202, col: 26, offset: 4088},
										name: "INCLUDE",
									},
								},
								&labeledExpr{
									pos:   position{line: 202, col: 34, offset: 4096},
									label: "include",
									expr: &ruleRefExpr{
										pos:  position{line: 202, col: 42, offset: 4104},
										name: "Literal",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 208, col: 5, offset: 4313},
						run: (*parser).callonInclude8,
						expr: &labeledExpr{
							pos:   position{line: 208, col: 5, offset: 4313},
							label: "x",
							expr: &seqExpr{
								pos: position{line: 208, col: 8, offset: 4316},
								exprs: []any{
									&andExpr{
										pos: position{line: 208, col: 8, offset: 4316},
										expr: &seqExpr{
											pos: position{line: 208, col: 10, offset: 4318},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 208, col: 10, offset: 4318},
													name: "INCLUDE",
												},
												&zeroOrMoreExpr{
													pos: position{line: 208, col: 18, offset: 4326},
													expr: &anyMatcher{
														line: 208, col: 18, offset: 4326,
													},
												},
											},
										},
									},
									&throwExpr{
										pos:   position{line: 208, col: 22, offset: 4330},
										label: "errInclude",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CppInclude",
			pos:  position{line: 213, col: 1, offset: 4377},
			expr: &choiceExpr{
				pos: position{line: 213, col: 15, offset: 4391},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 213, col: 15, offset: 4391},
						run: (*parser).callonCppInclude2,
						expr: &seqExpr{
							pos: position{line: 213, col: 15, offset: 4391},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 213, col: 15, offset: 4391},
									label: "cppIncludeKeyword",
									expr: &ruleRefExpr{
										pos:  position{line: 213, col: 33, offset: 4409},
										name: "CPPINCLUDE",
									},
								},
								&labeledExpr{
									pos:   position{line: 213, col: 44, offset: 4420},
									label: "include",
									expr: &ruleRefExpr{
										pos:  position{line: 213, col: 52, offset: 4428},
										name: "Literal",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 219, col: 5, offset: 4646},
						run: (*parser).callonCppInclude8,
						expr: &labeledExpr{
							pos:   position{line: 219, col: 5, offset: 4646},
							label: "x",
							expr: &seqExpr{
								pos: position{line: 219, col: 8, offset: 4649},
								exprs: []any{
									&andExpr{
										pos: position{line: 219, col: 8, offset: 4649},
										expr: &seqExpr{
											pos: position{line: 219, col: 10, offset: 4651},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 219, col: 10, offset: 4651},
													name: "CPPINCLUDE",
												},
												&zeroOrMoreExpr{
													pos: position{line: 219, col: 21, offset: 4662},
													expr: &anyMatcher{
														line: 219, col: 21, offset: 4662,
													},
												},
											},
										},
									},
									&throwExpr{
										pos:   position{line: 219, col: 25, offset: 4666},
										label: "errCppInclude",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Namespace",
			pos:  position{line: 224, col: 1, offset: 4716},
			expr: &choiceExpr{
				pos: position{line: 224, col: 14, offset: 4729},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 224, col: 14, offset: 4729},
						run: (*parser).callonNamespace2,
						expr: &seqExpr{
							pos: position{line: 224, col: 14, offset: 4729},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 224, col: 14, offset: 4729},
									label: "namespaceKeyword",
									expr: &ruleRefExpr{
										pos:  position{line: 224, col: 31, offset: 4746},
										name: "NAMESPACE",
									},
								},
								&labeledExpr{
									pos:   position{line: 224, col: 41, offset: 4756},
									label: "language",
									expr: &ruleRefExpr{
										pos:  position{line: 224, col: 50, offset: 4765},
										name: "NamespaceScope",
									},
								},
								&labeledExpr{
									pos:   position{line: 224, col: 65, offset: 4780},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 224, col: 70, offset: 4785},
										name: "Identifier",
									},
								},
								&labeledExpr{
									pos:   position{line: 224, col: 81, offset: 4796},
									label: "annotations",
									expr: &zeroOrOneExpr{
										pos: position{line: 224, col: 93, offset: 4808},
										expr: &ruleRefExpr{
											pos:  position{line: 224, col: 93, offset: 4808},
											name: "Annotations",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 226, col: 5, offset: 4994},
						run: (*parser).callonNamespace13,
						expr: &labeledExpr{
							pos:   position{line: 226, col: 5, offset: 4994},
							label: "x",
							expr: &seqExpr{
								pos: position{line: 226, col: 8, offset: 4997},
								exprs: []any{
									&andExpr{
										pos: position{line: 226, col: 8, offset: 4997},
										expr: &seqExpr{
											pos: position{line: 226, col: 10, offset: 4999},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 226, col: 10, offset: 4999},
													name: "NAMESPACE",
												},
												&zeroOrMoreExpr{
													pos: position{line: 226, col: 20, offset: 5009},
													expr: &anyMatcher{
														line: 226, col: 20, offset: 5009,
													},
												},
											},
										},
									},
									&throwExpr{
										pos:   position{line: 226, col: 24, offset: 5013},
										label: "errNamespace",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NamespaceScope",
			pos:  position{line: 230, col: 1, offset: 5061},
			expr: &actionExpr{
				pos: position{line: 230, col: 19, offset: 5079},
				run: (*parser).callonNamespaceScope1,
				expr: &labeledExpr{
					pos:   position{line: 230, col: 19, offset: 5079},
					label: "v",
					expr: &choiceExpr{
						pos: position{line: 230, col: 22, offset: 5082},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 230, col: 22, offset: 5082},
								name: "NamespaceScopeAny",
							},
							&ruleRefExpr{
								pos:  position{line: 230, col: 42, offset: 5102},
								name: "Identifier",
							},
						},
					},
				},
			},
		},
		{
			name: "NamespaceScopeAny",
			pos:  position{line: 239, col: 1, offset: 5207},
			expr: &actionExpr{
				pos: position{line: 239, col: 21, offset: 5227},
				run: (*parser).callonNamespaceScopeAny1,
				expr: &seqExpr{
					pos: position{line: 239, col: 21, offset: 5227},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 239, col: 21, offset: 5227},
							label: "comments",
							expr: &ruleRefExpr{
								pos:  position{line: 239, col: 30, offset: 5236},
								name: "ReservedComments",
							},
						},
						&litMatcher{
							pos:        position{line: 239, col: 47, offset: 5253},
							val:        "*",
							ignoreCase: false,
							want:       "\"*\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 239, col: 51, offset: 5257},
							expr: &ruleRefExpr{
								pos:  position{line: 239, col: 51, offset: 5257},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "Definition",
			pos:  position{line: 243, col: 1, offset: 5352},
			expr: &recoveryExpr{
				pos: position{line: 243, col: 14, offset: 5365},
				expr: &recoveryExpr{
					pos: position{line: 243, col: 14, offset: 5365},
					expr: &recoveryExpr{
						pos: position{line: 243, col: 14, offset: 5365},
						expr: &recoveryExpr{
							pos: position{line: 243, col: 14, offset: 5365},
							expr: &recoveryExpr{
								pos: position{line: 243, col: 14, offset: 5365},
								expr: &recoveryExpr{
									pos: position{line: 243, col: 14, offset: 5365},
									expr: &recoveryExpr{
										pos: position{line: 243, col: 14, offset: 5365},
										expr: &choiceExpr{
											pos: position{line: 243, col: 14, offset: 5365},
											alternatives: []any{
												&actionExpr{
													pos: position{line: 243, col: 14, offset: 5365},
													run: (*parser).callonDefinition9,
													expr: &seqExpr{
														pos: position{line: 243, col: 14, offset: 5365},
														exprs: []any{
															&labeledExpr{
																pos:   position{line: 243, col: 14, offset: 5365},
																label: "comments",
																expr: &ruleRefExpr{
																	pos:  position{line: 243, col: 23, offset: 5374},
																	name: "ReservedComments",
																},
															},
															&labeledExpr{
																pos:   position{line: 243, col: 40, offset: 5391},
																label: "v",
																expr: &choiceExpr{
																	pos: position{line: 243, col: 43, offset: 5394},
																	alternatives: []any{
																		&ruleRefExpr{
																			pos:  position{line: 243, col: 43, offset: 5394},
																			name: "Const",
																		},
																		&ruleRefExpr{
																			pos:  position{line: 243, col: 51, offset: 5402},
																			name: "Typedef",
																		},
																		&ruleRefExpr{
																			pos:  position{line: 243, col: 61, offset: 5412},
																			name: "Enum",
																		},
																		&ruleRefExpr{
																			pos:  position{line: 243, col: 68, offset: 5419},
																			name: "Service",
																		},
																		&ruleRefExpr{
																			pos:  position{line: 243, col: 78, offset: 5429},
																			name: "Struct",
																		},
																		&ruleRefExpr{
																			pos:  position{line: 243, col: 87, offset: 5438},
																			name: "Union",
																		},
																		&ruleRefExpr{
																			pos:  position{line: 243, col: 95, offset: 5446},
																			name: "Exception",
																		},
																	},
																},
															},
															&labeledExpr{
																pos:   position{line: 243, col: 106, offset: 5457},
																label: "annos",
																expr: &zeroOrOneExpr{
																	pos: position{line: 243, col: 112, offset: 5463},
																	expr: &ruleRefExpr{
																		pos:  position{line: 243, col: 112, offset: 5463},
																		name: "Annotations",
																	},
																},
															},
															&labeledExpr{
																pos:   position{line: 243, col: 125, offset: 5476},
																label: "endLineComments",
																expr: &ruleRefExpr{
																	pos:  position{line: 243, col: 141, offset: 5492},
																	name: "ReservedEndLineComments",
																},
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 249, col: 5, offset: 5713},
													run: (*parser).callonDefinition27,
													expr: &labeledExpr{
														pos:   position{line: 249, col: 5, offset: 5713},
														label: "x",
														expr: &seqExpr{
															pos: position{line: 249, col: 8, offset: 5716},
															exprs: []any{
																&ruleRefExpr{
																	pos:  position{line: 249, col: 8, offset: 5716},
																	name: "ReservedComments",
																},
																&andExpr{
																	pos: position{line: 249, col: 25, offset: 5733},
																	expr: &oneOrMoreExpr{
																		pos: position{line: 249, col: 27, offset: 5735},
																		expr: &anyMatcher{
																			line: 249, col: 27, offset: 5735,
																		},
																	},
																},
																&andCodeExpr{
																	pos: position{line: 249, col: 31, offset: 5739},
																	run: (*parser).callonDefinition34,
																},
																&throwExpr{
																	pos:   position{line: 255, col: 3, offset: 5939},
																	label: "errDefinition",
																},
															},
														},
													},
												},
											},
										},
										recoverExpr: &ruleRefExpr{
											pos:  position{line: 258, col: 16, offset: 6073},
											name: "ErrConst",
										},
										failureLabel: []string{
											"errConst",
										},
									},
									recoverExpr: &ruleRefExpr{
										pos:  position{line: 258, col: 40, offset: 6097},
										name: "ErrTypedef",
									},
									failureLabel: []string{
										"errTypedef",
									},
								},
								recoverExpr: &ruleRefExpr{
									pos:  position{line: 258, col: 63, offset: 6120},
									name: "ErrEnum",
								},
								failureLabel: []string{
									"errEnum",
								},
							},
							recoverExpr: &ruleRefExpr{
								pos:  position{line: 258, col: 86, offset: 6143},
								name: "ErrService",
							},
							failureLabel: []string{
								"errService",
							},
						},
						recoverExpr: &ruleRefExpr{
							pos:  position{line: 258, col: 111, offset: 6168},
							name: "ErrStruct",
						},
						failureLabel: []string{
							"errStruct",
						},
					},
					recoverExpr: &ruleRefExpr{
						pos:  position{line: 258, col: 134, offset: 6191},
						name: "ErrUnion",
					},
					failureLabel: []string{
						"errUnion",
					},
				},
				recoverExpr: &ruleRefExpr{
					pos:  position{line: 258, col: 160, offset: 6217},
					name: "ErrException",
				},
				failureLabel: []string{
					"errException",
				},
			},
		},
		{
			name: "Const",
			pos:  position{line: 260, col: 1, offset: 6231},
			expr: &recoveryExpr{
				pos: position{line: 260, col: 9, offset: 6239},
				expr: &recoveryExpr{
					pos: position{line: 260, col: 9, offset: 6239},
					expr: &recoveryExpr{
						pos: position{line: 260, col: 9, offset: 6239},
						expr: &choiceExpr{
							pos: position{line: 260, col: 9, offset: 6239},
							alternatives: []any{
								&actionExpr{
									pos: position{line: 260, col: 9, offset: 6239},
									run: (*parser).callonConst5,
									expr: &seqExpr{
										pos: position{line: 260, col: 9, offset: 6239},
										exprs: []any{
											&labeledExpr{
												pos:   position{line: 260, col: 9, offset: 6239},
												label: "constKeyword",
												expr: &ruleRefExpr{
													pos:  position{line: 260, col: 22, offset: 6252},
													name: "CONST",
												},
											},
											&labeledExpr{
												pos:   position{line: 260, col: 28, offset: 6258},
												label: "t",
												expr: &ruleRefExpr{
													pos:  position{line: 260, col: 30, offset: 6260},
													name: "FieldType",
												},
											},
											&labeledExpr{
												pos:   position{line: 260, col: 40, offset: 6270},
												label: "name",
												expr: &ruleRefExpr{
													pos:  position{line: 260, col: 45, offset: 6275},
													name: "DefinitionIdentifier",
												},
											},
											&labeledExpr{
												pos:   position{line: 260, col: 66, offset: 6296},
												label: "v",
												expr: &ruleRefExpr{
													pos:  position{line: 260, col: 68, offset: 6298},
													name: "ConstEqualValue",
												},
											},
											&labeledExpr{
												pos:   position{line: 260, col: 84, offset: 6314},
												label: "sep",
												expr: &zeroOrOneExpr{
													pos: position{line: 260, col: 88, offset: 6318},
													expr: &ruleRefExpr{
														pos:  position{line: 260, col: 88, offset: 6318},
														name: "ListSeparator",
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 263, col: 5, offset: 6577},
									run: (*parser).callonConst18,
									expr: &labeledExpr{
										pos:   position{line: 263, col: 5, offset: 6577},
										label: "x",
										expr: &seqExpr{
											pos: position{line: 263, col: 8, offset: 6580},
											exprs: []any{
												&andExpr{
													pos: position{line: 263, col: 8, offset: 6580},
													expr: &seqExpr{
														pos: position{line: 263, col: 10, offset: 6582},
														exprs: []any{
															&ruleRefExpr{
																pos:  position{line: 263, col: 10, offset: 6582},
																name: "CONST",
															},
															&zeroOrMoreExpr{
																pos: position{line: 263, col: 16, offset: 6588},
																expr: &anyMatcher{
																	line: 263, col: 16, offset: 6588,
																},
															},
														},
													},
												},
												&throwExpr{
													pos:   position{line: 263, col: 20, offset: 6592},
													label: "errConst",
												},
											},
										},
									},
								},
							},
						},
						recoverExpr: &ruleRefExpr{
							pos:  position{line: 265, col: 21, offset: 6653},
							name: "ErrConstIdentifier",
						},
						failureLabel: []string{
							"errIdentifier",
						},
					},
					recoverExpr: &ruleRefExpr{
						pos:  position{line: 265, col: 65, offset: 6697},
						name: "ErrConstMissingValue",
					},
					failureLabel: []string{
						"errConstMissingValue",
					},
				},
				recoverExpr: &ruleRefExpr{
					pos:  position{line: 265, col: 109, offset: 6741},
					name: "ErrConstConstValue",
				},
				failureLabel: []string{
					"errConstConstValue",
				},
			},
		},
		{
			name: "ConstEqualValue",
			pos:  position{line: 267, col: 1, offset: 6761},
			expr: &choiceExpr{
				pos: position{line: 267, col: 19, offset: 6779},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 267, col: 19, offset: 6779},
						run: (*parser).callonConstEqualValue2,
						expr: &labeledExpr{
							pos:   position{line: 267, col: 19, offset: 6779},
							label: "v",
							expr: &seqExpr{
								pos: position{line: 267, col: 22, offset: 6782},
								exprs: []any{
									&ruleRefExpr{
										pos:  position{line: 267, col: 22, offset: 6782},
										name: "EQUAL",
									},
									&ruleRefExpr{
										pos:  position{line: 267, col: 28, offset: 6788},
										name: "ConstValue",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 269, col: 5, offset: 6821},
						run: (*parser).callonConstEqualValue7,
						expr: &labeledExpr{
							pos:   position{line: 269, col: 5, offset: 6821},
							label: "x",
							expr: &seqExpr{
								pos: position{line: 269, col: 8, offset: 6824},
								exprs: []any{
									&notExpr{
										pos: position{line: 269, col: 8, offset: 6824},
										expr: &ruleRefExpr{
											pos:  position{line: 269, col: 9, offset: 6825},
											name: "EQUAL",
										},
									},
									&throwExpr{
										pos:   position{line: 269, col: 15, offset: 6831},
										label: "errConstMissingValue",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 271, col: 5, offset: 6917},
						run: (*parser).callonConstEqualValue13,
						expr: &labeledExpr{
							pos:   position{line: 271, col: 5, offset: 6917},
							label: "x",
							expr: &seqExpr{
								pos: position{line: 271, col: 8, offset: 6920},
								exprs: []any{
									&ruleRefExpr{
										pos:  position{line: 271, col: 8, offset: 6920},
										name: "EQUAL",
									},
									&throwExpr{
										pos:   position{line: 271, col: 14, offset: 6926},
										label: "errConstConstValue",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Typedef",
			pos:  position{line: 275, col: 1, offset: 6969},
			expr: &recoveryExpr{
				pos: position{line: 275, col: 11, offset: 6979},
				expr: &choiceExpr{
					pos: position{line: 275, col: 11, offset: 6979},
					alternatives: []any{
						&actionExpr{
							pos: position{line: 275, col: 11, offset: 6979},
							run: (*parser).callonTypedef3,
							expr: &seqExpr{
								pos: position{line: 275, col: 11, offset: 6979},
								exprs: []any{
									&labeledExpr{
										pos:   position{line: 275, col: 11, offset: 6979},
										label: "typedefKeyword",
										expr: &ruleRefExpr{
											pos:  position{line: 275, col: 26, offset: 6994},
											name: "TYPEDEF",
										},
									},
									&labeledExpr{
										pos:   position{line: 275, col: 34, offset: 7002},
										label: "t",
										expr: &ruleRefExpr{
											pos:  position{line: 275, col: 36, offset: 7004},
											name: "FieldType",
										},
									},
									&labeledExpr{
										pos:   position{line: 275, col: 46, offset: 7014},
										label: "alias",
										expr: &ruleRefExpr{
											pos:  position{line: 275, col: 52, offset: 7020},
											name: "DefinitionIdentifier",
										},
									},
								},
							},
						},
						&actionExpr{
							pos: position{line: 277, col: 5, offset: 7169},
							run: (*parser).callonTypedef11,
							expr: &labeledExpr{
								pos:   position{line: 277, col: 5, offset: 7169},
								label: "x",
								expr: &seqExpr{
									pos: position{line: 277, col: 8, offset: 7172},
									exprs: []any{
										&andExpr{
											pos: position{line: 277, col: 8, offset: 7172},
											expr: &seqExpr{
												pos: position{line: 277, col: 10, offset: 7174},
												exprs: []any{
													&ruleRefExpr{
														pos:  position{line: 277, col: 10, offset: 7174},
														name: "TYPEDEF",
													},
													&zeroOrMoreExpr{
														pos: position{line: 277, col: 18, offset: 7182},
														expr: &anyMatcher{
															line: 277, col: 18, offset: 7182,
														},
													},
												},
											},
										},
										&throwExpr{
											pos:   position{line: 277, col: 22, offset: 7186},
											label: "errTypedef",
										},
									},
								},
							},
						},
					},
				},
				recoverExpr: &ruleRefExpr{
					pos:  position{line: 279, col: 21, offset: 7249},
					name: "ErrTypedefIdentifier",
				},
				failureLabel: []string{
					"errIdentifier",
				},
			},
		},
		{
			name: "Enum",
			pos:  position{line: 281, col: 1, offset: 7271},
			expr: &recoveryExpr{
				pos: position{line: 281, col: 8, offset: 7278},
				expr: &recoveryExpr{
					pos: position{line: 281, col: 8, offset: 7278},
					expr: &recoveryExpr{
						pos: position{line: 281, col: 8, offset: 7278},
						expr: &choiceExpr{
							pos: position{line: 281, col: 8, offset: 7278},
							alternatives: []any{
								&actionExpr{
									pos: position{line: 281, col: 8, offset: 7278},
									run: (*parser).callonEnum5,
									expr: &seqExpr{
										pos: position{line: 281, col: 8, offset: 7278},
										exprs: []any{
											&labeledExpr{
												pos:   position{line: 281, col: 8, offset: 7278},
												label: "enum",
												expr: &ruleRefExpr{
													pos:  position{line: 281, col: 13, offset: 7283},
													name: "ENUM",
												},
											},
											&labeledExpr{
												pos:   position{line: 281, col: 18, offset: 7288},
												label: "name",
												expr: &ruleRefExpr{
													pos:  position{line: 281, col: 23, offset: 7293},
													name: "DefinitionIdentifier",
												},
											},
											&labeledExpr{
												pos:   position{line: 281, col: 44, offset: 7314},
												label: "lcur",
												expr: &ruleRefExpr{
													pos:  position{line: 281, col: 49, offset: 7319},
													name: "LCUR",
												},
											},
											&labeledExpr{
												pos:   position{line: 281, col: 54, offset: 7324},
												label: "v",
												expr: &zeroOrMoreExpr{
													pos: position{line: 281, col: 56, offset: 7326},
													expr: &ruleRefExpr{
														pos:  position{line: 281, col: 56, offset: 7326},
														name: "EnumValueLine",
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 281, col: 71, offset: 7341},
												label: "rcur",
												expr: &ruleRefExpr{
													pos:  position{line: 281, col: 76, offset: 7346},
													name: "RCUR",
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 284, col: 5, offset: 7527},
									run: (*parser).callonEnum18,
									expr: &labeledExpr{
										pos:   position{line: 284, col: 5, offset: 7527},
										label: "x",
										expr: &seqExpr{
											pos: position{line: 284, col: 8, offset: 7530},
											exprs: []any{
												&andExpr{
													pos: position{line: 284, col: 8, offset: 7530},
													expr: &seqExpr{
														pos: position{line: 284, col: 10, offset: 7532},
														exprs: []any{
															&ruleRefExpr{
																pos:  position{line: 284, col: 10, offset: 7532},
																name: "ENUM",
															},
															&zeroOrMoreExpr{
																pos: position{line: 284, col: 15, offset: 7537},
																expr: &anyMatcher{
																	line: 284, col: 15, offset: 7537,
																},
															},
														},
													},
												},
												&throwExpr{
													pos:   position{line: 284, col: 19, offset: 7541},
													label: "errEnum",
												},
											},
										},
									},
								},
							},
						},
						recoverExpr: &ruleRefExpr{
							pos:  position{line: 286, col: 21, offset: 7601},
							name: "ErrEnumIdentifier",
						},
						failureLabel: []string{
							"errIdentifier",
						},
					},
					recoverExpr: &ruleRefExpr{
						pos:  position{line: 286, col: 51, offset: 7631},
						name: "ErrEnumRCUR",
					},
					failureLabel: []string{
						"errRCUR",
					},
				},
				recoverExpr: &ruleRefExpr{
					pos:  position{line: 286, col: 80, offset: 7660},
					name: "ErrEnumValue",
				},
				failureLabel: []string{
					"errEnumValue",
				},
			},
		},
		{
			name: "EnumValueLine",
			pos:  position{line: 288, col: 1, offset: 7674},
			expr: &actionExpr{
				pos: position{line: 288, col: 17, offset: 7690},
				run: (*parser).callonEnumValueLine1,
				expr: &seqExpr{
					pos: position{line: 288, col: 17, offset: 7690},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 288, col: 17, offset: 7690},
							label: "comments",
							expr: &ruleRefExpr{
								pos:  position{line: 288, col: 26, offset: 7699},
								name: "ReservedComments",
							},
						},
						&labeledExpr{
							pos:   position{line: 288, col: 43, offset: 7716},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 288, col: 45, offset: 7718},
								name: "EnumValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 288, col: 55, offset: 7728},
							label: "endLineComments",
							expr: &ruleRefExpr{
								pos:  position{line: 288, col: 71, offset: 7744},
								name: "ReservedEndLineComments",
							},
						},
					},
				},
			},
		},
		{
			name: "EnumValue",
			pos:  position{line: 293, col: 1, offset: 7876},
			expr: &recoveryExpr{
				pos: position{line: 293, col: 14, offset: 7889},
				expr: &actionExpr{
					pos: position{line: 293, col: 14, offset: 7889},
					run: (*parser).callonEnumValue2,
					expr: &seqExpr{
						pos: position{line: 293, col: 14, offset: 7889},
						exprs: []any{
							&labeledExpr{
								pos:   position{line: 293, col: 14, offset: 7889},
								label: "name",
								expr: &ruleRefExpr{
									pos:  position{line: 293, col: 19, offset: 7894},
									name: "Identifier",
								},
							},
							&labeledExpr{
								pos:   position{line: 293, col: 30, offset: 7905},
								label: "value",
								expr: &zeroOrOneExpr{
									pos: position{line: 293, col: 36, offset: 7911},
									expr: &ruleRefExpr{
										pos:  position{line: 293, col: 37, offset: 7912},
										name: "EnumValueIntConstant",
									},
								},
							},
							&labeledExpr{
								pos:   position{line: 293, col: 60, offset: 7935},
								label: "annos",
								expr: &zeroOrOneExpr{
									pos: position{line: 293, col: 66, offset: 7941},
									expr: &ruleRefExpr{
										pos:  position{line: 293, col: 66, offset: 7941},
										name: "Annotations",
									},
								},
							},
							&labeledExpr{
								pos:   position{line: 293, col: 79, offset: 7954},
								label: "sep",
								expr: &zeroOrOneExpr{
									pos: position{line: 293, col: 83, offset: 7958},
									expr: &ruleRefExpr{
										pos:  position{line: 293, col: 83, offset: 7958},
										name: "ListSeparator",
									},
								},
							},
						},
					},
				},
				recoverExpr: &ruleRefExpr{
					pos:  position{line: 305, col: 22, offset: 8415},
					name: "ErrEnumValueIntConstant",
				},
				failureLabel: []string{
					"errIntConstant",
				},
			},
		},
		{
			name: "Service",
			pos:  position{line: 307, col: 1, offset: 8440},
			expr: &recoveryExpr{
				pos: position{line: 307, col: 11, offset: 8450},
				expr: &recoveryExpr{
					pos: position{line: 307, col: 11, offset: 8450},
					expr: &recoveryExpr{
						pos: position{line: 307, col: 11, offset: 8450},
						expr: &choiceExpr{
							pos: position{line: 307, col: 11, offset: 8450},
							alternatives: []any{
								&actionExpr{
									pos: position{line: 307, col: 11, offset: 8450},
									run: (*parser).callonService5,
									expr: &seqExpr{
										pos: position{line: 307, col: 11, offset: 8450},
										exprs: []any{
											&labeledExpr{
												pos:   position{line: 307, col: 11, offset: 8450},
												label: "svc",
												expr: &ruleRefExpr{
													pos:  position{line: 307, col: 15, offset: 8454},
													name: "SERVICE",
												},
											},
											&labeledExpr{
												pos:   position{line: 307, col: 23, offset: 8462},
												label: "name",
												expr: &ruleRefExpr{
													pos:  position{line: 307, col: 28, offset: 8467},
													name: "DefinitionIdentifier",
												},
											},
											&labeledExpr{
												pos:   position{line: 307, col: 49, offset: 8488},
												label: "extends",
												expr: &zeroOrOneExpr{
													pos: position{line: 307, col: 57, offset: 8496},
													expr: &seqExpr{
														pos: position{line: 307, col: 59, offset: 8498},
														exprs: []any{
															&ruleRefExpr{
																pos:  position{line: 307, col: 59, offset: 8498},
																name: "EXTENDS",
															},
															&ruleRefExpr{
																pos:  position{line: 307, col: 67, offset: 8506},
																name: "Identifier",
															},
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 307, col: 81, offset: 8520},
												label: "lcur",
												expr: &ruleRefExpr{
													pos:  position{line: 307, col: 86, offset: 8525},
													name: "LCUR",
												},
											},
											&labeledExpr{
												pos:   position{line: 307, col: 91, offset: 8530},
												label: "fns",
												expr: &zeroOrMoreExpr{
													pos: position{line: 307, col: 95, offset: 8534},
													expr: &ruleRefExpr{
														pos:  position{line: 307, col: 95, offset: 8534},
														name: "Function",
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 307, col: 105, offset: 8544},
												label: "rcur",
												expr: &ruleRefExpr{
													pos:  position{line: 307, col: 110, offset: 8549},
													name: "RCUR",
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 316, col: 5, offset: 8956},
									run: (*parser).callonService23,
									expr: &labeledExpr{
										pos:   position{line: 316, col: 5, offset: 8956},
										label: "x",
										expr: &seqExpr{
											pos: position{line: 316, col: 8, offset: 8959},
											exprs: []any{
												&andExpr{
													pos: position{line: 316, col: 8, offset: 8959},
													expr: &seqExpr{
														pos: position{line: 316, col: 10, offset: 8961},
														exprs: []any{
															&ruleRefExpr{
																pos:  position{line: 316, col: 10, offset: 8961},
																name: "SERVICE",
															},
															&zeroOrMoreExpr{
																pos: position{line: 316, col: 18, offset: 8969},
																expr: &anyMatcher{
																	line: 316, col: 18, offset: 8969,
																},
															},
														},
													},
												},
												&throwExpr{
													pos:   position{line: 316, col: 22, offset: 8973},
													label: "errService",
												},
											},
										},
									},
								},
							},
						},
						recoverExpr: &ruleRefExpr{
							pos:  position{line: 318, col: 21, offset: 9036},
							name: "ErrServiceIdentifier",
						},
						failureLabel: []string{
							"errIdentifier",
						},
					},
					recoverExpr: &ruleRefExpr{
						pos:  position{line: 318, col: 54, offset: 9069},
						name: "ErrServiceRCUR",
					},
					failureLabel: []string{
						"errRCUR",
					},
				},
				recoverExpr: &ruleRefExpr{
					pos:  position{line: 318, col: 85, offset: 9100},
					name: "ErrServiceFunction",
				},
				failureLabel: []string{
					"errFunction",
				},
			},
		},
		{
			name: "Struct",
			pos:  position{line: 320, col: 1, offset: 9121},
			expr: &recoveryExpr{
				pos: position{line: 320, col: 10, offset: 9130},
				expr: &recoveryExpr{
					pos: position{line: 320, col: 10, offset: 9130},
					expr: &recoveryExpr{
						pos: position{line: 320, col: 10, offset: 9130},
						expr: &choiceExpr{
							pos: position{line: 320, col: 10, offset: 9130},
							alternatives: []any{
								&actionExpr{
									pos: position{line: 320, col: 10, offset: 9130},
									run: (*parser).callonStruct5,
									expr: &seqExpr{
										pos: position{line: 320, col: 10, offset: 9130},
										exprs: []any{
											&labeledExpr{
												pos:   position{line: 320, col: 10, offset: 9130},
												label: "st",
												expr: &ruleRefExpr{
													pos:  position{line: 320, col: 13, offset: 9133},
													name: "STRUCT",
												},
											},
											&labeledExpr{
												pos:   position{line: 320, col: 20, offset: 9140},
												label: "id",
												expr: &ruleRefExpr{
													pos:  position{line: 320, col: 23, offset: 9143},
													name: "DefinitionIdentifier",
												},
											},
											&labeledExpr{
												pos:   position{line: 320, col: 44, offset: 9164},
												label: "lcur",
												expr: &ruleRefExpr{
													pos:  position{line: 320, col: 49, offset: 9169},
													name: "LCUR",
												},
											},
											&labeledExpr{
												pos:   position{line: 320, col: 54, offset: 9174},
												label: "fields",
												expr: &zeroOrMoreExpr{
													pos: position{line: 320, col: 61, offset: 9181},
													expr: &ruleRefExpr{
														pos:  position{line: 320, col: 61, offset: 9181},
														name: "FieldWithThrow",
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 320, col: 77, offset: 9197},
												label: "rcur",
												expr: &ruleRefExpr{
													pos:  position{line: 320, col: 82, offset: 9202},
													name: "RCUR",
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 322, col: 5, offset: 9366},
									run: (*parser).callonStruct18,
									expr: &labeledExpr{
										pos:   position{line: 322, col: 5, offset: 9366},
										label: "x",
										expr: &seqExpr{
											pos: position{line: 322, col: 8, offset: 9369},
											exprs: []any{
												&andExpr{
													pos: position{line: 322, col: 8, offset: 9369},
													expr: &seqExpr{
														pos: position{line: 322, col: 10, offset: 9371},
														exprs: []any{
															&ruleRefExpr{
																pos:  position{line: 322, col: 10, offset: 9371},
																name: "STRUCT",
															},
															&zeroOrMoreExpr{
																pos: position{line: 322, col: 17, offset: 9378},
																expr: &anyMatcher{
																	line: 322, col: 17, offset: 9378,
																},
															},
														},
													},
												},
												&throwExpr{
													pos:   position{line: 322, col: 21, offset: 9382},
													label: "errStruct",
												},
											},
										},
									},
								},
							},
						},
						recoverExpr: &ruleRefExpr{
							pos:  position{line: 324, col: 21, offset: 9444},
							name: "ErrStructIdentifier",
						},
						failureLabel: []string{
							"errIdentifier",
						},
					},
					recoverExpr: &ruleRefExpr{
						pos:  position{line: 324, col: 53, offset: 9476},
						name: "ErrStructRCUR",
					},
					failureLabel: []string{
						"errRCUR",
					},
				},
				recoverExpr: &ruleRefExpr{
					pos:  position{line: 324, col: 81, offset: 9504},
					name: "ErrStructField",
				},
				failureLabel: []string{
					"errField",
				},
			},
		},
		{
			name: "Union",
			pos:  position{line: 326, col: 1, offset: 9520},
			expr: &recoveryExpr{
				pos: position{line: 326, col: 9, offset: 9528},
				expr: &recoveryExpr{
					pos: position{line: 326, col: 9, offset: 9528},
					expr: &recoveryExpr{
						pos: position{line: 326, col: 9, offset: 9528},
						expr: &choiceExpr{
							pos: position{line: 326, col: 9, offset: 9528},
							alternatives: []any{
								&actionExpr{
									pos: position{line: 326, col: 9, offset: 9528},
									run: (*parser).callonUnion5,
									expr: &seqExpr{
										pos: position{line: 326, col: 9, offset: 9528},
										exprs: []any{
											&labeledExpr{
												pos:   position{line: 326, col: 9, offset: 9528},
												label: "union",
												expr: &ruleRefExpr{
													pos:  position{line: 326, col: 15, offset: 9534},
													name: "UNION",
												},
											},
											&labeledExpr{
												pos:   position{line: 326, col: 21, offset: 9540},
												label: "name",
												expr: &ruleRefExpr{
													pos:  position{line: 326, col: 26, offset: 9545},
													name: "DefinitionIdentifier",
												},
											},
											&labeledExpr{
												pos:   position{line: 326, col: 47, offset: 9566},
												label: "lcur",
												expr: &ruleRefExpr{
													pos:  position{line: 326, col: 52, offset: 9571},
													name: "LCUR",
												},
											},
											&labeledExpr{
												pos:   position{line: 326, col: 57, offset: 9576},
												label: "fields",
												expr: &zeroOrMoreExpr{
													pos: position{line: 326, col: 64, offset: 9583},
													expr: &ruleRefExpr{
														pos:  position{line: 326, col: 64, offset: 9583},
														name: "FieldWithThrow",
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 326, col: 80, offset: 9599},
												label: "rcur",
												expr: &ruleRefExpr{
													pos:  position{line: 326, col: 85, offset: 9604},
													name: "RCUR",
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 328, col: 5, offset: 9771},
									run: (*parser).callonUnion18,
									expr: &labeledExpr{
										pos:   position{line: 328, col: 5, offset: 9771},
										label: "x",
										expr: &seqExpr{
											pos: position{line: 328, col: 8, offset: 9774},
											exprs: []any{
												&andExpr{
													pos: position{line: 328, col: 8, offset: 9774},
													expr: &seqExpr{
														pos: position{line: 328, col: 10, offset: 9776},
														exprs: []any{
															&ruleRefExpr{
																pos:  position{line: 328, col: 10, offset: 9776},
																name: "UNION",
															},
															&zeroOrMoreExpr{
																pos: position{line: 328, col: 16, offset: 9782},
																expr: &anyMatcher{
																	line: 328, col: 16, offset: 9782,
																},
															},
														},
													},
												},
												&throwExpr{
													pos:   position{line: 328, col: 20, offset: 9786},
													label: "errUnion",
												},
											},
										},
									},
								},
							},
						},
						recoverExpr: &ruleRefExpr{
							pos:  position{line: 330, col: 21, offset: 9847},
							name: "ErrUnionIdentifier",
						},
						failureLabel: []string{
							"errIdentifier",
						},
					},
					recoverExpr: &ruleRefExpr{
						pos:  position{line: 330, col: 52, offset: 9878},
						name: "ErrUnionRCUR",
					},
					failureLabel: []string{
						"errRCUR",
					},
				},
				recoverExpr: &ruleRefExpr{
					pos:  position{line: 330, col: 78, offset: 9904},
					name: "ErrUnionField",
				},
				failureLabel: []string{
					"errField",
				},
			},
		},
		{
			name: "Exception",
			pos:  position{line: 333, col: 1, offset: 9920},
			expr: &recoveryExpr{
				pos: position{line: 333, col: 14, offset: 9933},
				expr: &recoveryExpr{
					pos: position{line: 333, col: 14, offset: 9933},
					expr: &recoveryExpr{
						pos: position{line: 333, col: 14, offset: 9933},
						expr: &choiceExpr{
							pos: position{line: 333, col: 14, offset: 9933},
							alternatives: []any{
								&actionExpr{
									pos: position{line: 333, col: 14, offset: 9933},
									run: (*parser).callonException5,
									expr: &seqExpr{
										pos: position{line: 333, col: 14, offset: 9933},
										exprs: []any{
											&labeledExpr{
												pos:   position{line: 333, col: 14, offset: 9933},
												label: "excep",
												expr: &ruleRefExpr{
													pos:  position{line: 333, col: 20, offset: 9939},
													name: "EXCEPTION",
												},
											},
											&labeledExpr{
												pos:   position{line: 333, col: 30, offset: 9949},
												label: "name",
												expr: &ruleRefExpr{
													pos:  position{line: 333, col: 35, offset: 9954},
													name: "DefinitionIdentifier",
												},
											},
											&labeledExpr{
												pos:   position{line: 333, col: 56, offset: 9975},
												label: "lcur",
												expr: &ruleRefExpr{
													pos:  position{line: 333, col: 61, offset: 9980},
													name: "LCUR",
												},
											},
											&labeledExpr{
												pos:   position{line: 333, col: 66, offset: 9985},
												label: "fields",
												expr: &zeroOrMoreExpr{
													pos: position{line: 333, col: 73, offset: 9992},
													expr: &ruleRefExpr{
														pos:  position{line: 333, col: 73, offset: 9992},
														name: "FieldWithThrow",
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 333, col: 89, offset: 10008},
												label: "rcur",
												expr: &ruleRefExpr{
													pos:  position{line: 333, col: 94, offset: 10013},
													name: "RCUR",
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 335, col: 5, offset: 10188},
									run: (*parser).callonException18,
									expr: &labeledExpr{
										pos:   position{line: 335, col: 5, offset: 10188},
										label: "x",
										expr: &seqExpr{
											pos: position{line: 335, col: 8, offset: 10191},
											exprs: []any{
												&andExpr{
													pos: position{line: 335, col: 8, offset: 10191},
													expr: &seqExpr{
														pos: position{line: 335, col: 10, offset: 10193},
														exprs: []any{
															&ruleRefExpr{
																pos:  position{line: 335, col: 10, offset: 10193},
																name: "EXCEPTION",
															},
															&zeroOrMoreExpr{
																pos: position{line: 335, col: 20, offset: 10203},
																expr: &anyMatcher{
																	line: 335, col: 20, offset: 10203,
																},
															},
														},
													},
												},
												&throwExpr{
													pos:   position{line: 335, col: 24, offset: 10207},
													label: "errException",
												},
											},
										},
									},
								},
							},
						},
						recoverExpr: &ruleRefExpr{
							pos:  position{line: 337, col: 21, offset: 10272},
							name: "ErrExceptionIdentifier",
						},
						failureLabel: []string{
							"errIdentifier",
						},
					},
					recoverExpr: &ruleRefExpr{
						pos:  position{line: 337, col: 56, offset: 10307},
						name: "ErrExceptionRCUR",
					},
					failureLabel: []string{
						"errRCUR",
					},
				},
				recoverExpr: &ruleRefExpr{
					pos:  position{line: 337, col: 86, offset: 10337},
					name: "ErrExceptionField",
				},
				failureLabel: []string{
					"errField",
				},
			},
		},
		{
			name: "FieldWithThrow",
			pos:  position{line: 340, col: 1, offset: 10357},
			expr: &choiceExpr{
				pos: position{line: 340, col: 18, offset: 10374},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 340, col: 18, offset: 10374},
						name: "Field",
					},
					&actionExpr{
						pos: position{line: 340, col: 26, offset: 10382},
						run: (*parser).callonFieldWithThrow3,
						expr: &labeledExpr{
							pos:   position{line: 340, col: 26, offset: 10382},
							label: "x",
							expr: &seqExpr{
								pos: position{line: 340, col: 30, offset: 10386},
								exprs: []any{
									&ruleRefExpr{
										pos:  position{line: 340, col: 30, offset: 10386},
										name: "ReservedComments",
									},
									&notExpr{
										pos: position{line: 340, col: 47, offset: 10403},
										expr: &choiceExpr{
											pos: position{line: 340, col: 49, offset: 10405},
											alternatives: []any{
												&seqExpr{
													pos: position{line: 340, col: 51, offset: 10407},
													exprs: []any{
														&litMatcher{
															pos:        position{line: 340, col: 51, offset: 10407},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
														&zeroOrMoreExpr{
															pos: position{line: 340, col: 55, offset: 10411},
															expr: &ruleRefExpr{
																pos:  position{line: 340, col: 55, offset: 10411},
																name: "Indent",
															},
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 340, col: 66, offset: 10422},
													name: "DefinitionStart",
												},
											},
										},
									},
									&throwExpr{
										pos:   position{line: 340, col: 84, offset: 10440},
										label: "errField",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Field",
			pos:  position{line: 344, col: 1, offset: 10485},
			expr: &actionExpr{
				pos: position{line: 344, col: 9, offset: 10493},
				run: (*parser).callonField1,
				expr: &seqExpr{
					pos: position{line: 344, col: 9, offset: 10493},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 344, col: 9, offset: 10493},
							label: "comments",
							expr: &ruleRefExpr{
								pos:  position{line: 344, col: 18, offset: 10502},
								name: "ReservedComments",
							},
						},
						&labeledExpr{
							pos:   position{line: 344, col: 35, offset: 10519},
							label: "index",
							expr: &ruleRefExpr{
								pos:  position{line: 344, col: 41, offset: 10525},
								name: "FieldId",
							},
						},
						&labeledExpr{
							pos:   position{line: 344, col: 49, offset: 10533},
							label: "required",
							expr: &zeroOrOneExpr{
								pos: position{line: 344, col: 58, offset: 10542},
								expr: &ruleRefExpr{
									pos:  position{line: 344, col: 58, offset: 10542},
									name: "FieldReq",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 344, col: 68, offset: 10552},
							label: "fieldType",
							expr: &ruleRefExpr{
								pos:  position{line: 344, col: 78, offset: 10562},
								name: "FieldType",
							},
						},
						&labeledExpr{
							pos:   position{line: 344, col: 88, offset: 10572},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 344, col: 91, offset: 10575},
								name: "Identifier",
							},
						},
						&labeledExpr{
							pos:   position{line: 344, col: 102, offset: 10586},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 344, col: 108, offset: 10592},
								expr: &seqExpr{
									pos: position{line: 344, col: 109, offset: 10593},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 344, col: 109, offset: 10593},
											name: "EQUAL",
										},
										&ruleRefExpr{
											pos:  position{line: 344, col: 115, offset: 10599},
											name: "ConstValue",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 344, col: 128, offset: 10612},
							label: "annos",
							expr: &zeroOrOneExpr{
								pos: position{line: 344, col: 134, offset: 10618},
								expr: &ruleRefExpr{
									pos:  position{line: 344, col: 134, offset: 10618},
									name: "Annotations",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 344, col: 147, offset: 10631},
							label: "sep",
							expr: &zeroOrOneExpr{
								pos: position{line: 344, col: 151, offset: 10635},
								expr: &ruleRefExpr{
									pos:  position{line: 344, col: 151, offset: 10635},
									name: "ListSeparator",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 344, col: 166, offset: 10650},
							label: "lineComments",
							expr: &ruleRefExpr{
								pos:  position{line: 344, col: 179, offset: 10663},
								name: "ReservedEndLineComments",
							},
						},
					},
				},
			},
		},
		{
			name: "FieldId",
			pos:  position{line: 360, col: 1, offset: 11228},
			expr: &recoveryExpr{
				pos: position{line: 360, col: 11, offset: 11238},
				expr: &actionExpr{
					pos: position{line: 360, col: 11, offset: 11238},
					run: (*parser).callonFieldId2,
					expr: &seqExpr{
						pos: position{line: 360, col: 11, offset: 11238},
						exprs: []any{
							&labeledExpr{
								pos:   position{line: 360, col: 11, offset: 11238},
								label: "comments",
								expr: &ruleRefExpr{
									pos:  position{line: 360, col: 20, offset: 11247},
									name: "ReservedComments",
								},
							},
							&labeledExpr{
								pos:   position{line: 360, col: 37, offset: 11264},
								label: "i",
								expr: &ruleRefExpr{
									pos:  position{line: 360, col: 39, offset: 11266},
									name: "FieldIndex",
								},
							},
							&labeledExpr{
								pos:   position{line: 360, col: 50, offset: 11277},
								label: "colon",
								expr: &ruleRefExpr{
									pos:  position{line: 360, col: 56, offset: 11283},
									name: "COLON",
								},
							},
							&zeroOrMoreExpr{
								pos: position{line: 360, col: 62, offset: 11289},
								expr: &ruleRefExpr{
									pos:  position{line: 360, col: 62, offset: 11289},
									name: "Indent",
								},
							},
						},
					},
				},
				recoverExpr: &ruleRefExpr{
					pos:  position{line: 365, col: 21, offset: 11465},
					name: "ErrFieldIndex",
				},
				failureLabel: []string{
					"errFieldIndex",
				},
			},
		},
		{
			name: "FieldReq",
			pos:  position{line: 367, col: 1, offset: 11480},
			expr: &actionExpr{
				pos: position{line: 367, col: 12, offset: 11491},
				run: (*parser).callonFieldReq1,
				expr: &seqExpr{
					pos: position{line: 367, col: 12, offset: 11491},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 367, col: 12, offset: 11491},
							label: "comments",
							expr: &ruleRefExpr{
								pos:  position{line: 367, col: 21, offset: 11500},
								name: "ReservedComments",
							},
						},
						&labeledExpr{
							pos:   position{line: 367, col: 38, offset: 11517},
							label: "r",
							expr: &ruleRefExpr{
								pos:  position{line: 367, col: 40, offset: 11519},
								name: "IsRequired",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 367, col: 51, offset: 11530},
							expr: &ruleRefExpr{
								pos:  position{line: 367, col: 51, offset: 11530},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "IsRequired",
			pos:  position{line: 372, col: 1, offset: 11675},
			expr: &actionExpr{
				pos: position{line: 372, col: 14, offset: 11688},
				run: (*parser).callonIsRequired1,
				expr: &labeledExpr{
					pos:   position{line: 372, col: 14, offset: 11688},
					label: "v",
					expr: &choiceExpr{
						pos: position{line: 372, col: 17, offset: 11691},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 372, col: 17, offset: 11691},
								name: "RequiredToken",
							},
							&ruleRefExpr{
								pos:  position{line: 372, col: 33, offset: 11707},
								name: "OptionalToken",
							},
						},
					},
				},
			},
		},
		{
			name: "RequiredToken",
			pos:  position{line: 376, col: 1, offset: 11742},
			expr: &actionExpr{
				pos: position{line: 376, col: 17, offset: 11758},
				run: (*parser).callonRequiredToken1,
				expr: &litMatcher{
					pos:        position{line: 376, col: 17, offset: 11758},
					val:        "required",
					ignoreCase: false,
					want:       "\"required\"",
				},
			},
		},
		{
			name: "OptionalToken",
			pos:  position{line: 380, col: 1, offset: 11808},
			expr: &actionExpr{
				pos: position{line: 380, col: 17, offset: 11824},
				run: (*parser).callonOptionalToken1,
				expr: &litMatcher{
					pos:        position{line: 380, col: 17, offset: 11824},
					val:        "optional",
					ignoreCase: false,
					want:       "\"optional\"",
				},
			},
		},
		{
			name: "Function",
			pos:  position{line: 384, col: 1, offset: 11874},
			expr: &recoveryExpr{
				pos: position{line: 384, col: 12, offset: 11885},
				expr: &recoveryExpr{
					pos: position{line: 384, col: 12, offset: 11885},
					expr: &choiceExpr{
						pos: position{line: 384, col: 12, offset: 11885},
						alternatives: []any{
							&actionExpr{
								pos: position{line: 384, col: 12, offset: 11885},
								run: (*parser).callonFunction4,
								expr: &seqExpr{
									pos: position{line: 384, col: 12, offset: 11885},
									exprs: []any{
										&labeledExpr{
											pos:   position{line: 384, col: 12, offset: 11885},
											label: "comments",
											expr: &ruleRefExpr{
												pos:  position{line: 384, col: 21, offset: 11894},
												name: "ReservedComments",
											},
										},
										&labeledExpr{
											pos:   position{line: 384, col: 38, offset: 11911},
											label: "oneway",
											expr: &zeroOrOneExpr{
												pos: position{line: 384, col: 45, offset: 11918},
												expr: &ruleRefExpr{
													pos:  position{line: 384, col: 45, offset: 11918},
													name: "ONEWAY",
												},
											},
										},
										&labeledExpr{
											pos:   position{line: 384, col: 53, offset: 11926},
											label: "ft",
											expr: &ruleRefExpr{
												pos:  position{line: 384, col: 56, offset: 11929},
												name: "FunctionType",
											},
										},
										&labeledExpr{
											pos:   position{line: 384, col: 69, offset: 11942},
											label: "name",
											expr: &ruleRefExpr{
												pos:  position{line: 384, col: 74, offset: 11947},
												name: "DefinitionIdentifier",
											},
										},
										&labeledExpr{
											pos:   position{line: 384, col: 95, offset: 11968},
											label: "lpar",
											expr: &ruleRefExpr{
												pos:  position{line: 384, col: 100, offset: 11973},
												name: "LPAR",
											},
										},
										&labeledExpr{
											pos:   position{line: 384, col: 105, offset: 11978},
											label: "args",
											expr: &zeroOrMoreExpr{
												pos: position{line: 384, col: 110, offset: 11983},
												expr: &ruleRefExpr{
													pos:  position{line: 384, col: 110, offset: 11983},
													name: "FunctionFieldWithThrow",
												},
											},
										},
										&labeledExpr{
											pos:   position{line: 384, col: 134, offset: 12007},
											label: "rpar",
											expr: &ruleRefExpr{
												pos:  position{line: 384, col: 139, offset: 12012},
												name: "RPAR",
											},
										},
										&labeledExpr{
											pos:   position{line: 384, col: 144, offset: 12017},
											label: "throws",
											expr: &zeroOrOneExpr{
												pos: position{line: 384, col: 151, offset: 12024},
												expr: &ruleRefExpr{
													pos:  position{line: 384, col: 151, offset: 12024},
													name: "Throws",
												},
											},
										},
										&labeledExpr{
											pos:   position{line: 384, col: 159, offset: 12032},
											label: "annos",
											expr: &zeroOrOneExpr{
												pos: position{line: 384, col: 165, offset: 12038},
												expr: &ruleRefExpr{
													pos:  position{line: 384, col: 165, offset: 12038},
													name: "Annotations",
												},
											},
										},
										&labeledExpr{
											pos:   position{line: 384, col: 178, offset: 12051},
											label: "sep",
											expr: &zeroOrOneExpr{
												pos: position{line: 384, col: 182, offset: 12055},
												expr: &ruleRefExpr{
													pos:  position{line: 384, col: 182, offset: 12055},
													name: "ListSeparator",
												},
											},
										},
										&labeledExpr{
											pos:   position{line: 384, col: 197, offset: 12070},
											label: "endLineComments",
											expr: &ruleRefExpr{
												pos:  position{line: 384, col: 213, offset: 12086},
												name: "ReservedEndLineComments",
											},
										},
									},
								},
							},
							&actionExpr{
								pos: position{line: 404, col: 5, offset: 12736},
								run: (*parser).callonFunction33,
								expr: &labeledExpr{
									pos:   position{line: 404, col: 5, offset: 12736},
									label: "x",
									expr: &seqExpr{
										pos: position{line: 404, col: 8, offset: 12739},
										exprs: []any{
											&ruleRefExpr{
												pos:  position{line: 404, col: 8, offset: 12739},
												name: "ReservedComments",
											},
											&andExpr{
												pos: position{line: 404, col: 25, offset: 12756},
												expr: &seqExpr{
													pos: position{line: 404, col: 27, offset: 12758},
													exprs: []any{
														&labeledExpr{
															pos:   position{line: 404, col: 27, offset: 12758},
															label: "oneway",
															expr: &zeroOrOneExpr{
																pos: position{line: 404, col: 34, offset: 12765},
																expr: &ruleRefExpr{
																	pos:  position{line: 404, col: 34, offset: 12765},
																	name: "ONEWAY",
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 404, col: 42, offset: 12773},
															label: "ft",
															expr: &ruleRefExpr{
																pos:  position{line: 404, col: 45, offset: 12776},
																name: "FunctionType",
															},
														},
													},
												},
											},
											&throwExpr{
												pos:   position{line: 404, col: 59, offset: 12790},
												label: "errFunction",
											},
										},
									},
								},
							},
						},
					},
					recoverExpr: &ruleRefExpr{
						pos:  position{line: 406, col: 21, offset: 12854},
						name: "ErrFunctionIdentifier",
					},
					failureLabel: []string{
						"errIdentifier",
					},
				},
				recoverExpr: &ruleRefExpr{
					pos:  position{line: 406, col: 56, offset: 12889},
					name: "ErrFunctionArgument",
				},
				failureLabel: []string{
					"errField",
				},
			},
		},
		{
			name: "FunctionFieldWithThrow",
			pos:  position{line: 408, col: 1, offset: 12910},
			expr: &choiceExpr{
				pos: position{line: 408, col: 26, offset: 12935},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 408, col: 26, offset: 12935},
						run: (*parser).callonFunctionFieldWithThrow2,
						expr: &labeledExpr{
							pos:   position{line: 408, col: 26, offset: 12935},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 408, col: 28, offset: 12937},
								name: "Field",
							},
						},
					},
					&actionExpr{
						pos: position{line: 410, col: 6, offset: 12965},
						run: (*parser).callonFunctionFieldWithThrow5,
						expr: &labeledExpr{
							pos:   position{line: 410, col: 6, offset: 12965},
							label: "x",
							expr: &seqExpr{
								pos: position{line: 410, col: 9, offset: 12968},
								exprs: []any{
									&labeledExpr{
										pos:   position{line: 410, col: 9, offset: 12968},
										label: "comments",
										expr: &ruleRefExpr{
											pos:  position{line: 410, col: 18, offset: 12977},
											name: "ReservedComments",
										},
									},
									&andExpr{
										pos: position{line: 410, col: 35, offset: 12994},
										expr: &seqExpr{
											pos: position{line: 410, col: 37, offset: 12996},
											exprs: []any{
												&labeledExpr{
													pos:   position{line: 410, col: 37, offset: 12996},
													label: "index",
													expr: &ruleRefExpr{
														pos:  position{line: 410, col: 43, offset: 13002},
														name: "FieldId",
													},
												},
												&labeledExpr{
													pos:   position{line: 410, col: 51, offset: 13010},
													label: "required",
													expr: &zeroOrOneExpr{
														pos: position{line: 410, col: 60, offset: 13019},
														expr: &ruleRefExpr{
															pos:  position{line: 410, col: 60, offset: 13019},
															name: "FieldReq",
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 410, col: 70, offset: 13029},
													label: "fieldType",
													expr: &ruleRefExpr{
														pos:  position{line: 410, col: 80, offset: 13039},
														name: "FieldType",
													},
												},
											},
										},
									},
									&throwExpr{
										pos:   position{line: 410, col: 91, offset: 13050},
										label: "errField",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FunctionType",
			pos:  position{line: 415, col: 1, offset: 13096},
			expr: &choiceExpr{
				pos: position{line: 415, col: 18, offset: 13113},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 415, col: 18, offset: 13113},
						name: "VOID",
					},
					&ruleRefExpr{
						pos:  position{line: 415, col: 25, offset: 13120},
						name: "FieldType",
					},
				},
			},
		},
		{
			name: "Throws",
			pos:  position{line: 417, col: 1, offset: 13131},
			expr: &actionExpr{
				pos: position{line: 417, col: 11, offset: 13141},
				run: (*parser).callonThrows1,
				expr: &seqExpr{
					pos: position{line: 417, col: 11, offset: 13141},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 417, col: 11, offset: 13141},
							label: "throws",
							expr: &ruleRefExpr{
								pos:  position{line: 417, col: 18, offset: 13148},
								name: "THROWS",
							},
						},
						&labeledExpr{
							pos:   position{line: 417, col: 25, offset: 13155},
							label: "lpar",
							expr: &ruleRefExpr{
								pos:  position{line: 417, col: 30, offset: 13160},
								name: "LPAR",
							},
						},
						&labeledExpr{
							pos:   position{line: 417, col: 35, offset: 13165},
							label: "fields",
							expr: &zeroOrMoreExpr{
								pos: position{line: 417, col: 42, offset: 13172},
								expr: &ruleRefExpr{
									pos:  position{line: 417, col: 42, offset: 13172},
									name: "Field",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 417, col: 49, offset: 13179},
							label: "rpar",
							expr: &ruleRefExpr{
								pos:  position{line: 417, col: 54, offset: 13184},
								name: "RPAR",
							},
						},
					},
				},
			},
		},
		{
			name: "FieldType",
			pos:  position{line: 421, col: 1, offset: 13333},
			expr: &actionExpr{
				pos: position{line: 421, col: 13, offset: 13345},
				run: (*parser).callonFieldType1,
				expr: &seqExpr{
					pos: position{line: 421, col: 13, offset: 13345},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 421, col: 13, offset: 13345},
							label: "v",
							expr: &choiceExpr{
								pos: position{line: 421, col: 16, offset: 13348},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 421, col: 16, offset: 13348},
										name: "ContainerType",
									},
									&ruleRefExpr{
										pos:  position{line: 421, col: 32, offset: 13364},
										name: "BaseType",
									},
									&ruleRefExpr{
										pos:  position{line: 421, col: 43, offset: 13375},
										name: "IdentifierType",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 421, col: 59, offset: 13391},
							label: "annos",
							expr: &zeroOrOneExpr{
								pos: position{line: 421, col: 65, offset: 13397},
								expr: &ruleRefExpr{
									pos:  position{line: 421, col: 65, offset: 13397},
									name: "Annotations",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "IdentifierType",
			pos:  position{line: 428, col: 1, offset: 13493},
			expr: &actionExpr{
				pos: position{line: 428, col: 18, offset: 13510},
				run: (*parser).callonIdentifierType1,
				expr: &labeledExpr{
					pos:   position{line: 428, col: 18, offset: 13510},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 428, col: 20, offset: 13512},
						name: "Identifier",
					},
				},
			},
		},
		{
			name: "BaseType",
			pos:  position{line: 432, col: 1, offset: 13571},
			expr: &actionExpr{
				pos: position{line: 432, col: 12, offset: 13582},
				run: (*parser).callonBaseType1,
				expr: &labeledExpr{
					pos:   position{line: 432, col: 12, offset: 13582},
					label: "v",
					expr: &choiceExpr{
						pos: position{line: 432, col: 15, offset: 13585},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 432, col: 15, offset: 13585},
								name: "BOOL",
							},
							&ruleRefExpr{
								pos:  position{line: 432, col: 22, offset: 13592},
								name: "BYTE",
							},
							&ruleRefExpr{
								pos:  position{line: 432, col: 29, offset: 13599},
								name: "I8",
							},
							&ruleRefExpr{
								pos:  position{line: 432, col: 34, offset: 13604},
								name: "I16",
							},
							&ruleRefExpr{
								pos:  position{line: 432, col: 40, offset: 13610},
								name: "I32",
							},
							&ruleRefExpr{
								pos:  position{line: 432, col: 46, offset: 13616},
								name: "I64",
							},
							&ruleRefExpr{
								pos:  position{line: 432, col: 52, offset: 13622},
								name: "DOUBLE",
							},
							&ruleRefExpr{
								pos:  position{line: 432, col: 61, offset: 13631},
								name: "STRING",
							},
							&ruleRefExpr{
								pos:  position{line: 432, col: 70, offset: 13640},
								name: "BINARY",
							},
						},
					},
				},
			},
		},
		{
			name: "ContainerType",
			pos:  position{line: 436, col: 1, offset: 13751},
			expr: &actionExpr{
				pos: position{line: 436, col: 17, offset: 13767},
				run: (*parser).callonContainerType1,
				expr: &labeledExpr{
					pos:   position{line: 436, col: 17, offset: 13767},
					label: "v",
					expr: &choiceExpr{
						pos: position{line: 436, col: 20, offset: 13770},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 436, col: 20, offset: 13770},
								name: "MapType",
							},
							&ruleRefExpr{
								pos:  position{line: 436, col: 30, offset: 13780},
								name: "SetType",
							},
							&ruleRefExpr{
								pos:  position{line: 436, col: 40, offset: 13790},
								name: "ListType",
							},
						},
					},
				},
			},
		},
		{
			name: "MapType",
			pos:  position{line: 440, col: 1, offset: 13833},
			expr: &actionExpr{
				pos: position{line: 440, col: 12, offset: 13844},
				run: (*parser).callonMapType1,
				expr: &seqExpr{
					pos: position{line: 440, col: 12, offset: 13844},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 440, col: 12, offset: 13844},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 440, col: 14, offset: 13846},
								name: "MAP",
							},
						},
						&labeledExpr{
							pos:   position{line: 440, col: 18, offset: 13850},
							label: "cpp",
							expr: &zeroOrOneExpr{
								pos: position{line: 440, col: 22, offset: 13854},
								expr: &ruleRefExpr{
									pos:  position{line: 440, col: 22, offset: 13854},
									name: "CppType",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 440, col: 31, offset: 13863},
							label: "lp",
							expr: &ruleRefExpr{
								pos:  position{line: 440, col: 34, offset: 13866},
								name: "LPOINT",
							},
						},
						&labeledExpr{
							pos:   position{line: 440, col: 41, offset: 13873},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 440, col: 45, offset: 13877},
								name: "FieldType",
							},
						},
						&labeledExpr{
							pos:   position{line: 440, col: 55, offset: 13887},
							label: "comma",
							expr: &ruleRefExpr{
								pos:  position{line: 440, col: 61, offset: 13893},
								name: "COMMA",
							},
						},
						&labeledExpr{
							pos:   position{line: 440, col: 67, offset: 13899},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 440, col: 73, offset: 13905},
								name: "FieldType",
							},
						},
						&labeledExpr{
							pos:   position{line: 440, col: 83, offset: 13915},
							label: "rp",
							expr: &ruleRefExpr{
								pos:  position{line: 440, col: 86, offset: 13918},
								name: "RPOINT",
							},
						},
					},
				},
			},
		},
		{
			name: "SetType",
			pos:  position{line: 450, col: 1, offset: 14182},
			expr: &actionExpr{
				pos: position{line: 450, col: 11, offset: 14192},
				run: (*parser).callonSetType1,
				expr: &seqExpr{
					pos: position{line: 450, col: 11, offset: 14192},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 450, col: 11, offset: 14192},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 450, col: 13, offset: 14194},
								name: "SET",
							},
						},
						&labeledExpr{
							pos:   position{line: 450, col: 17, offset: 14198},
							label: "cpp",
							expr: &zeroOrOneExpr{
								pos: position{line: 450, col: 21, offset: 14202},
								expr: &ruleRefExpr{
									pos:  position{line: 450, col: 21, offset: 14202},
									name: "CppType",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 450, col: 30, offset: 14211},
							label: "lp",
							expr: &ruleRefExpr{
								pos:  position{line: 450, col: 33, offset: 14214},
								name: "LPOINT",
							},
						},
						&labeledExpr{
							pos:   position{line: 450, col: 40, offset: 14221},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 450, col: 44, offset: 14225},
								name: "FieldType",
							},
						},
						&labeledExpr{
							pos:   position{line: 450, col: 54, offset: 14235},
							label: "rp",
							expr: &ruleRefExpr{
								pos:  position{line: 450, col: 57, offset: 14238},
								name: "RPOINT",
							},
						},
					},
				},
			},
		},
		{
			name: "ListType",
			pos:  position{line: 459, col: 1, offset: 14467},
			expr: &actionExpr{
				pos: position{line: 459, col: 12, offset: 14478},
				run: (*parser).callonListType1,
				expr: &seqExpr{
					pos: position{line: 459, col: 12, offset: 14478},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 459, col: 12, offset: 14478},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 459, col: 14, offset: 14480},
								name: "LIST",
							},
						},
						&labeledExpr{
							pos:   position{line: 459, col: 19, offset: 14485},
							label: "lp",
							expr: &ruleRefExpr{
								pos:  position{line: 459, col: 22, offset: 14488},
								name: "LPOINT",
							},
						},
						&labeledExpr{
							pos:   position{line: 459, col: 29, offset: 14495},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 459, col: 33, offset: 14499},
								name: "FieldType",
							},
						},
						&labeledExpr{
							pos:   position{line: 459, col: 43, offset: 14509},
							label: "rp",
							expr: &ruleRefExpr{
								pos:  position{line: 459, col: 46, offset: 14512},
								name: "RPOINT",
							},
						},
						&labeledExpr{
							pos:   position{line: 459, col: 53, offset: 14519},
							label: "cpp",
							expr: &zeroOrOneExpr{
								pos: position{line: 459, col: 57, offset: 14523},
								expr: &ruleRefExpr{
									pos:  position{line: 459, col: 57, offset: 14523},
									name: "CppType",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CppType",
			pos:  position{line: 468, col: 1, offset: 14754},
			expr: &actionExpr{
				pos: position{line: 468, col: 11, offset: 14764},
				run: (*parser).callonCppType1,
				expr: &seqExpr{
					pos: position{line: 468, col: 11, offset: 14764},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 468, col: 11, offset: 14764},
							label: "cpp",
							expr: &ruleRefExpr{
								pos:  position{line: 468, col: 15, offset: 14768},
								name: "CPPTYPE",
							},
						},
						&labeledExpr{
							pos:   position{line: 468, col: 23, offset: 14776},
							label: "l",
							expr: &ruleRefExpr{
								pos:  position{line: 468, col: 25, offset: 14778},
								name: "Literal",
							},
						},
					},
				},
			},
		},
		{
			name: "ConstValue",
			pos:  position{line: 472, col: 1, offset: 14879},
			expr: &actionExpr{
				pos: position{line: 472, col: 14, offset: 14892},
				run: (*parser).callonConstValue1,
				expr: &labeledExpr{
					pos:   position{line: 472, col: 14, offset: 14892},
					label: "v",
					expr: &choiceExpr{
						pos: position{line: 472, col: 17, offset: 14895},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 472, col: 17, offset: 14895},
								name: "DoubleConstant",
							},
							&ruleRefExpr{
								pos:  position{line: 472, col: 34, offset: 14912},
								name: "IntConstant",
							},
							&ruleRefExpr{
								pos:  position{line: 472, col: 48, offset: 14926},
								name: "Literal",
							},
							&ruleRefExpr{
								pos:  position{line: 472, col: 58, offset: 14936},
								name: "IdentifierConst",
							},
							&ruleRefExpr{
								pos:  position{line: 472, col: 76, offset: 14954},
								name: "ConstMap",
							},
							&ruleRefExpr{
								pos:  position{line: 472, col: 87, offset: 14965},
								name: "ConstList",
							},
						},
					},
				},
			},
		},
		{
			name: "IdentifierConst",
			pos:  position{line: 479, col: 1, offset: 15124},
			expr: &actionExpr{
				pos: position{line: 479, col: 19, offset: 15142},
				run: (*parser).callonIdentifierConst1,
				expr: &labeledExpr{
					pos:   position{line: 479, col: 19, offset: 15142},
					label: "id",
					expr: &ruleRefExpr{
						pos:  position{line: 479, col: 22, offset: 15145},
						name: "Identifier",
					},
				},
			},
		},
		{
			name: "EnumValueIntConstant",
			pos:  position{line: 483, col: 1, offset: 15252},
			expr: &choiceExpr{
				pos: position{line: 483, col: 24, offset: 15275},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 483, col: 24, offset: 15275},
						run: (*parser).callonEnumValueIntConstant2,
						expr: &labeledExpr{
							pos:   position{line: 483, col: 24, offset: 15275},
							label: "v",
							expr: &seqExpr{
								pos: position{line: 483, col: 27, offset: 15278},
								exprs: []any{
									&ruleRefExpr{
										pos:  position{line: 483, col: 27, offset: 15278},
										name: "EQUAL",
									},
									&ruleRefExpr{
										pos:  position{line: 483, col: 33, offset: 15284},
										name: "IntConstant",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 485, col: 5, offset: 15318},
						run: (*parser).callonEnumValueIntConstant7,
						expr: &labeledExpr{
							pos:   position{line: 485, col: 5, offset: 15318},
							label: "x",
							expr: &seqExpr{
								pos: position{line: 485, col: 8, offset: 15321},
								exprs: []any{
									&ruleRefExpr{
										pos:  position{line: 485, col: 8, offset: 15321},
										name: "EQUAL",
									},
									&ruleRefExpr{
										pos:  position{line: 485, col: 14, offset: 15327},
										name: "ReservedComments",
									},
									&throwExpr{
										pos:   position{line: 485, col: 31, offset: 15344},
										label: "errIntConstant",
									},
									&zeroOrMoreExpr{
										pos: position{line: 485, col: 49, offset: 15362},
										expr: &ruleRefExpr{
											pos:  position{line: 485, col: 49, offset: 15362},
											name: "Indent",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "IntConstant",
			pos:  position{line: 489, col: 1, offset: 15423},
			expr: &choiceExpr{
				pos: position{line: 489, col: 15, offset: 15437},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 489, col: 15, offset: 15437},
						run: (*parser).callonIntConstant2,
						expr: &seqExpr{
							pos: position{line: 489, col: 15, offset: 15437},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 489, col: 15, offset: 15437},
									label: "comments",
									expr: &ruleRefExpr{
										pos:  position{line: 489, col: 24, offset: 15446},
										name: "ReservedComments",
									},
								},
								&labeledExpr{
									pos:   position{line: 489, col: 42, offset: 15464},
									label: "v",
									expr: &choiceExpr{
										pos: position{line: 489, col: 45, offset: 15467},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 489, col: 45, offset: 15467},
												name: "HexIntConstant",
											},
											&ruleRefExpr{
												pos:  position{line: 489, col: 62, offset: 15484},
												name: "OctIntConstant",
											},
											&ruleRefExpr{
												pos:  position{line: 489, col: 79, offset: 15501},
												name: "NormalIntConstant",
											},
										},
									},
								},
								&notExpr{
									pos: position{line: 489, col: 98, offset: 15520},
									expr: &charClassMatcher{
										pos:        position{line: 489, col: 99, offset: 15521},
										val:        "[a-zA-Z]",
										ranges:     []rune{'a', 'z', 'A', 'Z'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 489, col: 109, offset: 15531},
									expr: &ruleRefExpr{
										pos:  position{line: 489, col: 109, offset: 15531},
										name: "Indent",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 494, col: 5, offset: 15624},
						run: (*parser).callonIntConstant15,
						expr: &labeledExpr{
							pos:   position{line: 494, col: 5, offset: 15624},
							label: "x",
							expr: &seqExpr{
								pos: position{line: 494, col: 8, offset: 15627},
								exprs: []any{
									&ruleRefExpr{
										pos:  position{line: 494, col: 8, offset: 15627},
										name: "ReservedComments",
									},
									&andExpr{
										pos: position{line: 494, col: 25, offset: 15644},
										expr: &choiceExpr{
											pos: position{line: 494, col: 27, offset: 15646},
											alternatives: []any{
												&litMatcher{
													pos:        position{line: 494, col: 27, offset: 15646},
													val:        "0x",
													ignoreCase: false,
													want:       "\"0x\"",
												},
												&litMatcher{
													pos:        position{line: 494, col: 34, offset: 15653},
													val:        "0o",
													ignoreCase: false,
													want:       "\"0o\"",
												},
												&seqExpr{
													pos: position{line: 494, col: 42, offset: 15661},
													exprs: []any{
														&zeroOrOneExpr{
															pos: position{line: 494, col: 42, offset: 15661},
															expr: &choiceExpr{
																pos: position{line: 494, col: 43, offset: 15662},
																alternatives: []any{
																	&litMatcher{
																		pos:        position{line: 494, col: 43, offset: 15662},
																		val:        "+",
																		ignoreCase: false,
																		want:       "\"+\"",
																	},
																	&litMatcher{
																		pos:        position{line: 494, col: 49, offset: 15668},
																		val:        "-",
																		ignoreCase: false,
																		want:       "\"-\"",
																	},
																},
															},
														},
														&ruleRefExpr{
															pos:  position{line: 494, col: 55, offset: 15674},
															name: "Digit",
														},
													},
												},
											},
										},
									},
									&throwExpr{
										pos:   position{line: 494, col: 63, offset: 15682},
										label: "errIntConstant",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "HexIntConstant",
			pos:  position{line: 498, col: 1, offset: 15732},
			expr: &actionExpr{
				pos: position{line: 498, col: 18, offset: 15749},
				run: (*parser).callonHexIntConstant1,
				expr: &seqExpr{
					pos: position{line: 498, col: 18, offset: 15749},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 498, col: 18, offset: 15749},
							val:        "0x",
							ignoreCase: false,
							want:       "\"0x\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 498, col: 23, offset: 15754},
							expr: &choiceExpr{
								pos: position{line: 498, col: 24, offset: 15755},
								alternatives: []any{
									&charClassMatcher{
										pos:        position{line: 498, col: 24, offset: 15755},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
									&charClassMatcher{
										pos:        position{line: 498, col: 32, offset: 15763},
										val:        "[A-Z]",
										ranges:     []rune{'A', 'Z'},
										ignoreCase: false,
										inverted:   false,
									},
									&charClassMatcher{
										pos:        position{line: 498, col: 40, offset: 15771},
										val:        "[a-z]",
										ranges:     []rune{'a', 'z'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OctIntConstant",
			pos:  position{line: 510, col: 1, offset: 16014},
			expr: &actionExpr{
				pos: position{line: 510, col: 18, offset: 16031},
				run: (*parser).callonOctIntConstant1,
				expr: &seqExpr{
					pos: position{line: 510, col: 18, offset: 16031},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 510, col: 18, offset: 16031},
							val:        "0o",
							ignoreCase: false,
							want:       "\"0o\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 510, col: 23, offset: 16036},
							expr: &ruleRefExpr{
								pos:  position{line: 510, col: 23, offset: 16036},
								name: "Digit",
							},
						},
					},
				},
			},
		},
		{
			name: "NormalIntConstant",
			pos:  position{line: 521, col: 1, offset: 16269},
			expr: &actionExpr{
				pos: position{line: 521, col: 21, offset: 16289},
				run: (*parser).callonNormalIntConstant1,
				expr: &seqExpr{
					pos: position{line: 521, col: 21, offset: 16289},
					exprs: []any{
						&zeroOrOneExpr{
							pos: position{line: 521, col: 21, offset: 16289},
							expr: &choiceExpr{
								pos: position{line: 521, col: 22, offset: 16290},
								alternatives: []any{
									&litMatcher{
										pos:        position{line: 521, col: 22, offset: 16290},
										val:        "+",
										ignoreCase: false,
										want:       "\"+\"",
									},
									&litMatcher{
										pos:        position{line: 521, col: 28, offset: 16296},
										val:        "-",
										ignoreCase: false,
										want:       "\"-\"",
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 521, col: 34, offset: 16302},
							expr: &ruleRefExpr{
								pos:  position{line: 521, col: 34, offset: 16302},
								name: "Digit",
							},
						},
					},
				},
			},
		},
		{
			name: "FieldIndex",
			pos:  position{line: 532, col: 1, offset: 16512},
			expr: &choiceExpr{
				pos: position{line: 532, col: 14, offset: 16525},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 532, col: 14, offset: 16525},
						run: (*parser).callonFieldIndex2,
						expr: &oneOrMoreExpr{
							pos: position{line: 532, col: 14, offset: 16525},
							expr: &ruleRefExpr{
								pos:  position{line: 532, col: 14, offset: 16525},
								name: "Digit",
							},
						},
					},
					&actionExpr{
						pos: position{line: 538, col: 5, offset: 16700},
						run: (*parser).callonFieldIndex5,
						expr: &labeledExpr{
							pos:   position{line: 538, col: 5, offset: 16700},
							label: "x",
							expr: &seqExpr{
								pos: position{line: 538, col: 8, offset: 16703},
								exprs: []any{
									&ruleRefExpr{
										pos:  position{line: 538, col: 8, offset: 16703},
										name: "ReservedComments",
									},
									&andExpr{
										pos: position{line: 538, col: 25, offset: 16720},
										expr: &seqExpr{
											pos: position{line: 538, col: 27, offset: 16722},
											exprs: []any{
												&oneOrMoreExpr{
													pos: position{line: 538, col: 27, offset: 16722},
													expr: &charClassMatcher{
														pos:        position{line: 538, col: 27, offset: 16722},
														val:        "[a-zA-Z]",
														ranges:     []rune{'a', 'z', 'A', 'Z'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&ruleRefExpr{
													pos:  position{line: 538, col: 37, offset: 16732},
													name: "COLON",
												},
											},
										},
									},
									&throwExpr{
										pos:   position{line: 538, col: 44, offset: 16739},
										label: "errFieldIndex",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleConstant",
			pos:  position{line: 542, col: 1, offset: 16788},
			expr: &actionExpr{
				pos: position{line: 542, col: 19, offset: 16806},
				run: (*parser).callonDoubleConstant1,
				expr: &seqExpr{
					pos: position{line: 542, col: 19, offset: 16806},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 542, col: 19, offset: 16806},
							label: "comments",
							expr: &ruleRefExpr{
								pos:  position{line: 542, col: 28, offset: 16815},
								name: "ReservedComments",
							},
						},
						&labeledExpr{
							pos:   position{line: 542, col: 45, offset: 16832},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 542, col: 47, offset: 16834},
								name: "DoubleConstantValue",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 542, col: 67, offset: 16854},
							expr: &ruleRefExpr{
								pos:  position{line: 542, col: 67, offset: 16854},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleConstantValue",
			pos:  position{line: 549, col: 1, offset: 16946},
			expr: &actionExpr{
				pos: position{line: 549, col: 23, offset: 16968},
				run: (*parser).callonDoubleConstantValue1,
				expr: &seqExpr{
					pos: position{line: 549, col: 23, offset: 16968},
					exprs: []any{
						&zeroOrOneExpr{
							pos: position{line: 549, col: 23, offset: 16968},
							expr: &choiceExpr{
								pos: position{line: 549, col: 24, offset: 16969},
								alternatives: []any{
									&litMatcher{
										pos:        position{line: 549, col: 24, offset: 16969},
										val:        "+",
										ignoreCase: false,
										want:       "\"+\"",
									},
									&litMatcher{
										pos:        position{line: 549, col: 30, offset: 16975},
										val:        "-",
										ignoreCase: false,
										want:       "\"-\"",
									},
								},
							},
						},
						&choiceExpr{
							pos: position{line: 549, col: 37, offset: 16982},
							alternatives: []any{
								&seqExpr{
									pos: position{line: 549, col: 37, offset: 16982},
									exprs: []any{
										&zeroOrMoreExpr{
											pos: position{line: 549, col: 37, offset: 16982},
											expr: &ruleRefExpr{
												pos:  position{line: 549, col: 37, offset: 16982},
												name: "Digit",
											},
										},
										&litMatcher{
											pos:        position{line: 549, col: 44, offset: 16989},
											val:        ".",
											ignoreCase: false,
											want:       "\".\"",
										},
										&oneOrMoreExpr{
											pos: position{line: 549, col: 48, offset: 16993},
											expr: &ruleRefExpr{
												pos:  position{line: 549, col: 48, offset: 16993},
												name: "Digit",
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 549, col: 56, offset: 17001},
											expr: &ruleRefExpr{
												pos:  position{line: 549, col: 56, offset: 17001},
												name: "Exponent",
											},
										},
									},
								},
								&seqExpr{
									pos: position{line: 549, col: 68, offset: 17013},
									exprs: []any{
										&oneOrMoreExpr{
											pos: position{line: 549, col: 68, offset: 17013},
											expr: &ruleRefExpr{
												pos:  position{line: 549, col: 68, offset: 17013},
												name: "Digit",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 549, col: 75, offset: 17020},
											name: "Exponent",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Exponent",
			pos:  position{line: 560, col: 1, offset: 17242},
			expr: &seqExpr{
				pos: position{line: 560, col: 12, offset: 17253},
				exprs: []any{
					&choiceExpr{
						pos: position{line: 560, col: 13, offset: 17254},
						alternatives: []any{
							&litMatcher{
								pos:        position{line: 560, col: 13, offset: 17254},
								val:        "e",
								ignoreCase: false,
								want:       "\"e\"",
							},
							&litMatcher{
								pos:        position{line: 560, col: 19, offset: 17260},
								val:        "E",
								ignoreCase: false,
								want:       "\"E\"",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 560, col: 24, offset: 17265},
						name: "IntConstant",
					},
				},
			},
		},
		{
			name: "Annotations",
			pos:  position{line: 562, col: 1, offset: 17278},
			expr: &actionExpr{
				pos: position{line: 562, col: 16, offset: 17293},
				run: (*parser).callonAnnotations1,
				expr: &seqExpr{
					pos: position{line: 562, col: 16, offset: 17293},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 562, col: 16, offset: 17293},
							label: "lpar",
							expr: &ruleRefExpr{
								pos:  position{line: 562, col: 21, offset: 17298},
								name: "LPAR",
							},
						},
						&labeledExpr{
							pos:   position{line: 562, col: 26, offset: 17303},
							label: "annos",
							expr: &oneOrMoreExpr{
								pos: position{line: 562, col: 32, offset: 17309},
								expr: &ruleRefExpr{
									pos:  position{line: 562, col: 32, offset: 17309},
									name: "Annotation",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 562, col: 44, offset: 17321},
							label: "rpar",
							expr: &ruleRefExpr{
								pos:  position{line: 562, col: 49, offset: 17326},
								name: "RPAR",
							},
						},
					},
				},
			},
		},
		{
			name: "Annotation",
			pos:  position{line: 566, col: 1, offset: 17459},
			expr: &actionExpr{
				pos: position{line: 566, col: 15, offset: 17473},
				run: (*parser).callonAnnotation1,
				expr: &seqExpr{
					pos: position{line: 566, col: 15, offset: 17473},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 566, col: 15, offset: 17473},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 566, col: 18, offset: 17476},
								name: "Identifier",
							},
						},
						&labeledExpr{
							pos:   position{line: 566, col: 29, offset: 17487},
							label: "eq",
							expr: &ruleRefExpr{
								pos:  position{line: 566, col: 32, offset: 17490},
								name: "EQUAL",
							},
						},
						&labeledExpr{
							pos:   position{line: 566, col: 38, offset: 17496},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 566, col: 44, offset: 17502},
								name: "Literal",
							},
						},
						&labeledExpr{
							pos:   position{line: 566, col: 52, offset: 17510},
							label: "sep",
							expr: &zeroOrOneExpr{
								pos: position{line: 566, col: 56, offset: 17514},
								expr: &ruleRefExpr{
									pos:  position{line: 566, col: 56, offset: 17514},
									name: "ListSeparator",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ConstList",
			pos:  position{line: 570, col: 1, offset: 17673},
			expr: &actionExpr{
				pos: position{line: 570, col: 14, offset: 17686},
				run: (*parser).callonConstList1,
				expr: &seqExpr{
					pos: position{line: 570, col: 14, offset: 17686},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 570, col: 14, offset: 17686},
							label: "lbrk",
							expr: &ruleRefExpr{
								pos:  position{line: 570, col: 19, offset: 17691},
								name: "LBRK",
							},
						},
						&labeledExpr{
							pos:   position{line: 570, col: 24, offset: 17696},
							label: "v",
							expr: &zeroOrMoreExpr{
								pos: position{line: 570, col: 26, offset: 17698},
								expr: &ruleRefExpr{
									pos:  position{line: 570, col: 26, offset: 17698},
									name: "ConstListItem",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 570, col: 41, offset: 17713},
							label: "rbrk",
							expr: &ruleRefExpr{
								pos:  position{line: 570, col: 46, offset: 17718},
								name: "RBRK",
							},
						},
					},
				},
			},
		},
		{
			name: "ConstListItem",
			pos:  position{line: 579, col: 1, offset: 17900},
			expr: &actionExpr{
				pos: position{line: 579, col: 17, offset: 17916},
				run: (*parser).callonConstListItem1,
				expr: &seqExpr{
					pos: position{line: 579, col: 17, offset: 17916},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 579, col: 17, offset: 17916},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 579, col: 19, offset: 17918},
								name: "ConstValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 579, col: 30, offset: 17929},
							label: "sep",
							expr: &zeroOrOneExpr{
								pos: position{line: 579, col: 34, offset: 17933},
								expr: &ruleRefExpr{
									pos:  position{line: 579, col: 34, offset: 17933},
									name: "ListSeparator",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ConstMap",
			pos:  position{line: 589, col: 1, offset: 18070},
			expr: &actionExpr{
				pos: position{line: 589, col: 13, offset: 18082},
				run: (*parser).callonConstMap1,
				expr: &seqExpr{
					pos: position{line: 589, col: 13, offset: 18082},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 589, col: 13, offset: 18082},
							label: "lcur",
							expr: &ruleRefExpr{
								pos:  position{line: 589, col: 18, offset: 18087},
								name: "LCUR",
							},
						},
						&labeledExpr{
							pos:   position{line: 589, col: 23, offset: 18092},
							label: "v",
							expr: &zeroOrMoreExpr{
								pos: position{line: 589, col: 25, offset: 18094},
								expr: &ruleRefExpr{
									pos:  position{line: 589, col: 25, offset: 18094},
									name: "ConstMapItem",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 589, col: 39, offset: 18108},
							label: "rcur",
							expr: &ruleRefExpr{
								pos:  position{line: 589, col: 44, offset: 18113},
								name: "RCUR",
							},
						},
					},
				},
			},
		},
		{
			name: "ConstMapItem",
			pos:  position{line: 598, col: 1, offset: 18294},
			expr: &actionExpr{
				pos: position{line: 598, col: 16, offset: 18309},
				run: (*parser).callonConstMapItem1,
				expr: &seqExpr{
					pos: position{line: 598, col: 16, offset: 18309},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 598, col: 16, offset: 18309},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 598, col: 20, offset: 18313},
								name: "ConstValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 598, col: 31, offset: 18324},
							label: "colon",
							expr: &ruleRefExpr{
								pos:  position{line: 598, col: 37, offset: 18330},
								name: "COLON",
							},
						},
						&labeledExpr{
							pos:   position{line: 598, col: 43, offset: 18336},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 598, col: 49, offset: 18342},
								name: "ConstValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 598, col: 60, offset: 18353},
							label: "sep",
							expr: &zeroOrOneExpr{
								pos: position{line: 598, col: 64, offset: 18357},
								expr: &ruleRefExpr{
									pos:  position{line: 598, col: 64, offset: 18357},
									name: "ListSeparator",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapeLiteralChar",
			pos:  position{line: 609, col: 1, offset: 18603},
			expr: &actionExpr{
				pos: position{line: 609, col: 21, offset: 18623},
				run: (*parser).callonEscapeLiteralChar1,
				expr: &seqExpr{
					pos: position{line: 609, col: 21, offset: 18623},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 609, col: 21, offset: 18623},
							val:        "\\",
							ignoreCase: false,
							want:       "\"\\\\\"",
						},
						&charClassMatcher{
							pos:        position{line: 609, col: 26, offset: 18628},
							val:        "[\"']",
							chars:      []rune{'"', '\''},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "Literal",
			pos:  position{line: 613, col: 1, offset: 18666},
			expr: &recoveryExpr{
				pos: position{line: 613, col: 11, offset: 18676},
				expr: &recoveryExpr{
					pos: position{line: 613, col: 11, offset: 18676},
					expr: &recoveryExpr{
						pos: position{line: 613, col: 11, offset: 18676},
						expr: &recoveryExpr{
							pos: position{line: 613, col: 11, offset: 18676},
							expr: &actionExpr{
								pos: position{line: 613, col: 11, offset: 18676},
								run: (*parser).callonLiteral5,
								expr: &labeledExpr{
									pos:   position{line: 613, col: 11, offset: 18676},
									label: "l",
									expr: &choiceExpr{
										pos: position{line: 613, col: 14, offset: 18679},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 613, col: 14, offset: 18679},
												name: "Literal1",
											},
											&ruleRefExpr{
												pos:  position{line: 613, col: 25, offset: 18690},
												name: "Literal2",
											},
										},
									},
								},
							},
							recoverExpr: &ruleRefExpr{
								pos:  position{line: 615, col: 31, offset: 18747},
								name: "ErrLiteral1MissingRight",
							},
							failureLabel: []string{
								"errLiteral1MissingRight",
							},
						},
						recoverExpr: &ruleRefExpr{
							pos:  position{line: 615, col: 71, offset: 18787},
							name: "ErrLiteral1",
						},
						failureLabel: []string{
							"errLiteral1",
						},
					},
					recoverExpr: &ruleRefExpr{
						pos:  position{line: 615, col: 111, offset: 18827},
						name: "ErrLiteral2MissingRight",
					},
					failureLabel: []string{
						"errLiteral2MissingRight",
					},
				},
				recoverExpr: &ruleRefExpr{
					pos:  position{line: 615, col: 151, offset: 18867},
					name: "ErrLiteral2",
				},
				failureLabel: []string{
					"errLiteral2",
				},
			},
		},
		{
			name: "Literal1",
			pos:  position{line: 617, col: 1, offset: 18880},
			expr: &choiceExpr{
				pos: position{line: 617, col: 12, offset: 18891},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 617, col: 12, offset: 18891},
						run: (*parser).callonLiteral12,
						expr: &seqExpr{
							pos: position{line: 617, col: 12, offset: 18891},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 617, col: 12, offset: 18891},
									label: "comments",
									expr: &ruleRefExpr{
										pos:  position{line: 617, col: 21, offset: 18900},
										name: "ReservedComments",
									},
								},
								&litMatcher{
									pos:        position{line: 617, col: 38, offset: 18917},
									val:        "\"",
									ignoreCase: false,
									want:       "\"\\\"\"",
								},
								&labeledExpr{
									pos:   position{line: 617, col: 42, offset: 18921},
									label: "t",
									expr: &zeroOrMoreExpr{
										pos: position{line: 617, col: 44, offset: 18923},
										expr: &choiceExpr{
											pos: position{line: 617, col: 45, offset: 18924},
											alternatives: []any{
												&ruleRefExpr{
													pos:  position{line: 617, col: 45, offset: 18924},
													name: "EscapeLiteralChar",
												},
												&seqExpr{
													pos: position{line: 617, col: 65, offset: 18944},
													exprs: []any{
														&notExpr{
															pos: position{line: 617, col: 65, offset: 18944},
															expr: &charClassMatcher{
																pos:        position{line: 617, col: 66, offset: 18945},
																val:        "[\"\\r\\n]",
																chars:      []rune{'"', '\r', '\n'},
																ignoreCase: false,
																inverted:   false,
															},
														},
														&anyMatcher{
															line: 617, col: 74, offset: 18953,
														},
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 617, col: 78, offset: 18957},
									val:        "\"",
									ignoreCase: false,
									want:       "\"\\\"\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 617, col: 82, offset: 18961},
									expr: &ruleRefExpr{
										pos:  position{line: 617, col: 82, offset: 18961},
										name: "Indent",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 620, col: 5, offset: 19105},
						run: (*parser).callonLiteral118,
						expr: &labeledExpr{
							pos:   position{line: 620, col: 5, offset: 19105},
							label: "x",
							expr: &seqExpr{
								pos: position{line: 620, col: 8, offset: 19108},
								exprs: []any{
									&andExpr{
										pos: position{line: 620, col: 8, offset: 19108},
										expr: &seqExpr{
											pos: position{line: 620, col: 10, offset: 19110},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 620, col: 10, offset: 19110},
													name: "ReservedComments",
												},
												&litMatcher{
													pos:        position{line: 620, col: 27, offset: 19127},
													val:        "\"",
													ignoreCase: false,
													want:       "\"\\\"\"",
												},
												&labeledExpr{
													pos:   position{line: 620, col: 31, offset: 19131},
													label: "t",
													expr: &zeroOrMoreExpr{
														pos: position{line: 620, col: 33, offset: 19133},
														expr: &choiceExpr{
															pos: position{line: 620, col: 34, offset: 19134},
															alternatives: []any{
																&ruleRefExpr{
																	pos:  position{line: 620, col: 34, offset: 19134},
																	name: "EscapeLiteralChar",
																},
																&seqExpr{
																	pos: position{line: 620, col: 54, offset: 19154},
																	exprs: []any{
																		&notExpr{
																			pos: position{line: 620, col: 54, offset: 19154},
																			expr: &litMatcher{
																				pos:        position{line: 620, col: 55, offset: 19155},
																				val:        "\"",
																				ignoreCase: false,
																				want:       "\"\\\"\"",
																			},
																		},
																		&anyMatcher{
																			line: 620, col: 59, offset: 19159,
																		},
																	},
																},
															},
														},
													},
												},
												&zeroOrMoreExpr{
													pos: position{line: 620, col: 63, offset: 19163},
													expr: &ruleRefExpr{
														pos:  position{line: 620, col: 63, offset: 19163},
														name: "Indent",
													},
												},
											},
										},
									},
									&throwExpr{
										pos:   position{line: 620, col: 72, offset: 19172},
										label: "errLiteral1MissingRight",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Literal2",
			pos:  position{line: 624, col: 1, offset: 19233},
			expr: &choiceExpr{
				pos: position{line: 624, col: 12, offset: 19244},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 624, col: 12, offset: 19244},
						run: (*parser).callonLiteral22,
						expr: &seqExpr{
							pos: position{line: 624, col: 12, offset: 19244},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 624, col: 12, offset: 19244},
									label: "comments",
									expr: &ruleRefExpr{
										pos:  position{line: 624, col: 21, offset: 19253},
										name: "ReservedComments",
									},
								},
								&litMatcher{
									pos:        position{line: 624, col: 38, offset: 19270},
									val:        "'",
									ignoreCase: false,
									want:       "\"'\"",
								},
								&labeledExpr{
									pos:   position{line: 624, col: 42, offset: 19274},
									label: "t",
									expr: &zeroOrMoreExpr{
										pos: position{line: 624, col: 44, offset: 19276},
										expr: &choiceExpr{
											pos: position{line: 624, col: 45, offset: 19277},
											alternatives: []any{
												&ruleRefExpr{
													pos:  position{line: 624, col: 45, offset: 19277},
													name: "EscapeLiteralChar",
												},
												&seqExpr{
													pos: position{line: 624, col: 65, offset: 19297},
													exprs: []any{
														&notExpr{
															pos: position{line: 624, col: 65, offset: 19297},
															expr: &charClassMatcher{
																pos:        position{line: 624, col: 66, offset: 19298},
																val:        "['\\r\\n]",
																chars:      []rune{'\'', '\r', '\n'},
																ignoreCase: false,
																inverted:   false,
															},
														},
														&anyMatcher{
															line: 624, col: 74, offset: 19306,
														},
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 624, col: 78, offset: 19310},
									val:        "'",
									ignoreCase: false,
									want:       "\"'\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 624, col: 82, offset: 19314},
									expr: &ruleRefExpr{
										pos:  position{line: 624, col: 82, offset: 19314},
										name: "Indent",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 627, col: 5, offset: 19457},
						run: (*parser).callonLiteral218,
						expr: &labeledExpr{
							pos:   position{line: 627, col: 5, offset: 19457},
							label: "x",
							expr: &seqExpr{
								pos: position{line: 627, col: 8, offset: 19460},
								exprs: []any{
									&andExpr{
										pos: position{line: 627, col: 8, offset: 19460},
										expr: &seqExpr{
											pos: position{line: 627, col: 10, offset: 19462},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 627, col: 10, offset: 19462},
													name: "ReservedComments",
												},
												&litMatcher{
													pos:        position{line: 627, col: 27, offset: 19479},
													val:        "'",
													ignoreCase: false,
													want:       "\"'\"",
												},
												&labeledExpr{
													pos:   position{line: 627, col: 31, offset: 19483},
													label: "t",
													expr: &zeroOrMoreExpr{
														pos: position{line: 627, col: 33, offset: 19485},
														expr: &choiceExpr{
															pos: position{line: 627, col: 34, offset: 19486},
															alternatives: []any{
																&ruleRefExpr{
																	pos:  position{line: 627, col: 34, offset: 19486},
																	name: "EscapeLiteralChar",
																},
																&seqExpr{
																	pos: position{line: 627, col: 54, offset: 19506},
																	exprs: []any{
																		&notExpr{
																			pos: position{line: 627, col: 54, offset: 19506},
																			expr: &litMatcher{
																				pos:        position{line: 627, col: 55, offset: 19507},
																				val:        "'",
																				ignoreCase: false,
																				want:       "\"'\"",
																			},
																		},
																		&anyMatcher{
																			line: 627, col: 59, offset: 19511,
																		},
																	},
																},
															},
														},
													},
												},
												&zeroOrMoreExpr{
													pos: position{line: 627, col: 63, offset: 19515},
													expr: &ruleRefExpr{
														pos:  position{line: 627, col: 63, offset: 19515},
														name: "Indent",
													},
												},
											},
										},
									},
									&throwExpr{
										pos:   position{line: 627, col: 72, offset: 19524},
										label: "errLiteral2MissingRight",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DefinitionIdentifier",
			pos:  position{line: 631, col: 1, offset: 19585},
			expr: &choiceExpr{
				pos: position{line: 631, col: 24, offset: 19608},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 631, col: 24, offset: 19608},
						run: (*parser).callonDefinitionIdentifier2,
						expr: &labeledExpr{
							pos:   position{line: 631, col: 24, offset: 19608},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 631, col: 27, offset: 19611},
								name: "Identifier",
							},
						},
					},
					&throwExpr{
						pos:   position{line: 633, col: 5, offset: 19658},
						label: "errIdentifier",
					},
				},
			},
		},
		{
			name: "Identifier",
			pos:  position{line: 635, col: 1, offset: 19676},
			expr: &actionExpr{
				pos: position{line: 635, col: 14, offset: 19689},
				run: (*parser).callonIdentifier1,
				expr: &seqExpr{
					pos: position{line: 635, col: 14, offset: 19689},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 635, col: 14, offset: 19689},
							label: "comments",
							expr: &ruleRefExpr{
								pos:  position{line: 635, col: 23, offset: 19698},
								name: "ReservedComments",
							},
						},
						&labeledExpr{
							pos:   position{line: 635, col: 40, offset: 19715},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 635, col: 43, offset: 19718},
								name: "IdentifierToken",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 635, col: 59, offset: 19734},
							expr: &ruleRefExpr{
								pos:  position{line: 635, col: 59, offset: 19734},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "IdentifierToken",
			pos:  position{line: 642, col: 1, offset: 19828},
			expr: &actionExpr{
				pos: position{line: 642, col: 19, offset: 19846},
				run: (*parser).callonIdentifierToken1,
				expr: &seqExpr{
					pos: position{line: 642, col: 19, offset: 19846},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 642, col: 19, offset: 19846},
							name: "Letter",
						},
						&zeroOrMoreExpr{
							pos: position{line: 642, col: 26, offset: 19853},
							expr: &choiceExpr{
								pos: position{line: 642, col: 28, offset: 19855},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 642, col: 28, offset: 19855},
										name: "Letter",
									},
									&ruleRefExpr{
										pos:  position{line: 642, col: 37, offset: 19864},
										name: "Digit",
									},
									&litMatcher{
										pos:        position{line: 642, col: 45, offset: 19872},
										val:        ".",
										ignoreCase: false,
										want:       "\".\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListSeparator",
			pos:  position{line: 646, col: 1, offset: 19960},
			expr: &actionExpr{
				pos: position{line: 646, col: 17, offset: 19976},
				run: (*parser).callonListSeparator1,
				expr: &seqExpr{
					pos: position{line: 646, col: 17, offset: 19976},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 646, col: 17, offset: 19976},
							label: "comments",
							expr: &ruleRefExpr{
								pos:  position{line: 646, col: 26, offset: 19985},
								name: "ReservedComments",
							},
						},
						&labeledExpr{
							pos:   position{line: 646, col: 43, offset: 20002},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 646, col: 45, offset: 20004},
								name: "ListSeparatorToken",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 646, col: 64, offset: 20023},
							expr: &ruleRefExpr{
								pos:  position{line: 646, col: 64, offset: 20023},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "ListSeparatorToken",
			pos:  position{line: 652, col: 1, offset: 20174},
			expr: &actionExpr{
				pos: position{line: 652, col: 22, offset: 20195},
				run: (*parser).callonListSeparatorToken1,
				expr: &choiceExpr{
					pos: position{line: 652, col: 23, offset: 20196},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 652, col: 23, offset: 20196},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&litMatcher{
							pos:        position{line: 652, col: 29, offset: 20202},
							val:        ";",
							ignoreCase: false,
							want:       "\";\"",
						},
					},
				},
			},
		},
		{
			name: "Letter",
			pos:  position{line: 656, col: 1, offset: 20246},
			expr: &choiceExpr{
				pos: position{line: 656, col: 10, offset: 20255},
				alternatives: []any{
					&charClassMatcher{
						pos:        position{line: 656, col: 10, offset: 20255},
						val:        "[A-Z]",
						ranges:     []rune{'A', 'Z'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 656, col: 18, offset: 20263},
						val:        "[a-z]",
						ranges:     []rune{'a', 'z'},
						ignoreCase: false,
						inverted:   false,
					},
					&actionExpr{
						pos: position{line: 656, col: 26, offset: 20271},
						run: (*parser).callonLetter4,
						expr: &litMatcher{
							pos:        position{line: 656, col: 26, offset: 20271},
							val:        "_",
							ignoreCase: false,
							want:       "\"_\"",
						},
					},
				},
			},
		},
		{
			name: "LetterOrDigit",
			pos:  position{line: 659, col: 1, offset: 20307},
			expr: &choiceExpr{
				pos: position{line: 659, col: 17, offset: 20323},
				alternatives: []any{
					&charClassMatcher{
						pos:        position{line: 659, col: 17, offset: 20323},
						val:        "[a-z]",
						ranges:     []rune{'a', 'z'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 659, col: 25, offset: 20331},
						val:        "[A-Z]",
						ranges:     []rune{'A', 'Z'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 659, col: 33, offset: 20339},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&actionExpr{
						pos: position{line: 659, col: 41, offset: 20347},
						run: (*parser).callonLetterOrDigit5,
						expr: &charClassMatcher{
							pos:        position{line: 659, col: 41, offset: 20347},
							val:        "[_$]",
							chars:      []rune{'_', '$'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "Digit",
			pos:  position{line: 663, col: 1, offset: 20385},
			expr: &actionExpr{
				pos: position{line: 663, col: 9, offset: 20393},
				run: (*parser).callonDigit1,
				expr: &charClassMatcher{
					pos:        position{line: 663, col: 9, offset: 20393},
					val:        "[0-9]",
					ranges:     []rune{'0', '9'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "ReservedComments",
			pos:  position{line: 667, col: 1, offset: 20432},
			expr: &actionExpr{
				pos: position{line: 667, col: 20, offset: 20451},
				run: (*parser).callonReservedComments1,
				expr: &labeledExpr{
					pos:   position{line: 667, col: 20, offset: 20451},
					label: "comments",
					expr: &zeroOrMoreExpr{
						pos: position{line: 667, col: 29, offset: 20460},
						expr: &choiceExpr{
							pos: position{line: 667, col: 30, offset: 20461},
							alternatives: []any{
								&ruleRefExpr{
									pos:  position{line: 667, col: 30, offset: 20461},
									name: "Space",
								},
								&ruleRefExpr{
									pos:  position{line: 667, col: 38, offset: 20469},
									name: "Comment",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ReservedEndLineComments",
			pos:  position{line: 670, col: 1, offset: 20521},
			expr: &actionExpr{
				pos: position{line: 670, col: 27, offset: 20547},
				run: (*parser).callonReservedEndLineComments1,
				expr: &labeledExpr{
					pos:   position{line: 670, col: 27, offset: 20547},
					label: "comments",
					expr: &zeroOrMoreExpr{
						pos: position{line: 670, col: 36, offset: 20556},
						expr: &choiceExpr{
							pos: position{line: 670, col: 37, offset: 20557},
							alternatives: []any{
								&ruleRefExpr{
									pos:  position{line: 670, col: 37, offset: 20557},
									name: "Indent",
								},
								&ruleRefExpr{
									pos:  position{line: 670, col: 46, offset: 20566},
									name: "Comment",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Space",
			pos:  position{line: 674, col: 1, offset: 20619},
			expr: &actionExpr{
				pos: position{line: 674, col: 9, offset: 20627},
				run: (*parser).callonSpace1,
				expr: &oneOrMoreExpr{
					pos: position{line: 674, col: 9, offset: 20627},
					expr: &choiceExpr{
						pos: position{line: 674, col: 10, offset: 20628},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 674, col: 10, offset: 20628},
								name: "Indent",
							},
							&ruleRefExpr{
								pos:  position{line: 674, col: 19, offset: 20637},
								name: "CarriageReturnLineFeed",
							},
						},
					},
				},
			},
		},
		{
			name: "Indent",
			pos:  position{line: 677, col: 1, offset: 20682},
			expr: &actionExpr{
				pos: position{line: 677, col: 10, offset: 20691},
				run: (*parser).callonIndent1,
				expr: &charClassMatcher{
					pos:        position{line: 677, col: 10, offset: 20691},
					val:        "[ \\t\\v]",
					chars:      []rune{' ', '\t', '\v'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "CarriageReturnLineFeed",
			pos:  position{line: 680, col: 1, offset: 20719},
			expr: &charClassMatcher{
				pos:        position{line: 680, col: 26, offset: 20744},
				val:        "[\\r\\n]",
				chars:      []rune{'\r', '\n'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "Comment",
			pos:  position{line: 682, col: 1, offset: 20752},
			expr: &actionExpr{
				pos: position{line: 682, col: 11, offset: 20762},
				run: (*parser).callonComment1,
				expr: &labeledExpr{
					pos:   position{line: 682, col: 11, offset: 20762},
					label: "v",
					expr: &choiceExpr{
						pos: position{line: 682, col: 14, offset: 20765},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 682, col: 14, offset: 20765},
								name: "LongComment",
							},
							&ruleRefExpr{
								pos:  position{line: 682, col: 28, offset: 20779},
								name: "LineComment",
							},
							&ruleRefExpr{
								pos:  position{line: 682, col: 42, offset: 20793},
								name: "UnixComment",
							},
						},
					},
				},
			},
		},
		{
			name: "LongComment",
			pos:  position{line: 685, col: 1, offset: 20836},
			expr: &actionExpr{
				pos: position{line: 685, col: 15, offset: 20850},
				run: (*parser).callonLongComment1,
				expr: &seqExpr{
					pos: position{line: 685, col: 15, offset: 20850},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 685, col: 15, offset: 20850},
							val:        "/*",
							ignoreCase: false,
							want:       "\"/*\"",
						},
						&ruleRefExpr{
							pos:  position{line: 685, col: 20, offset: 20855},
							name: "LongCommentMatch",
						},
						&litMatcher{
							pos:        position{line: 685, col: 37, offset: 20872},
							val:        "*/",
							ignoreCase: false,
							want:       "\"*/\"",
						},
					},
				},
			},
		},
		{
			name: "LongCommentMatch",
			pos:  position{line: 688, col: 1, offset: 20971},
			expr: &actionExpr{
				pos: position{line: 688, col: 20, offset: 20990},
				run: (*parser).callonLongCommentMatch1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 688, col: 20, offset: 20990},
					expr: &seqExpr{
						pos: position{line: 688, col: 21, offset: 20991},
						exprs: []any{
							&notExpr{
								pos: position{line: 688, col: 21, offset: 20991},
								expr: &litMatcher{
									pos:        position{line: 688, col: 22, offset: 20992},
									val:        "*/",
									ignoreCase: false,
									want:       "\"*/\"",
								},
							},
							&anyMatcher{
								line: 688, col: 27, offset: 20997,
							},
						},
					},
				},
			},
		},
		{
			name: "LineComment",
			pos:  position{line: 692, col: 1, offset: 21034},
			expr: &actionExpr{
				pos: position{line: 692, col: 15, offset: 21048},
				run: (*parser).callonLineComment1,
				expr: &seqExpr{
					pos: position{line: 692, col: 15, offset: 21048},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 692, col: 15, offset: 21048},
							val:        "//",
							ignoreCase: false,
							want:       "\"//\"",
						},
						&ruleRefExpr{
							pos:  position{line: 692, col: 20, offset: 21053},
							name: "LineCommentMatch",
						},
					},
				},
			},
		},
		{
			name: "LineCommentMatch",
			pos:  position{line: 695, col: 1, offset: 21165},
			expr: &actionExpr{
				pos: position{line: 695, col: 20, offset: 21184},
				run: (*parser).callonLineCommentMatch1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 695, col: 20, offset: 21184},
					expr: &seqExpr{
						pos: position{line: 695, col: 21, offset: 21185},
						exprs: []any{
							&notExpr{
								pos: position{line: 695, col: 21, offset: 21185},
								expr: &charClassMatcher{
									pos:        position{line: 695, col: 22, offset: 21186},
									val:        "[\\r\\n]",
									chars:      []rune{'\r', '\n'},
									ignoreCase: false,
									inverted:   false,
								},
							},
							&anyMatcher{
								line: 695, col: 29, offset: 21193,
							},
						},
					},
				},
			},
		},
		{
			name: "UnixComment",
			pos:  position{line: 699, col: 1, offset: 21230},
			expr: &actionExpr{
				pos: position{line: 699, col: 15, offset: 21244},
				run: (*parser).callonUnixComment1,
				expr: &seqExpr{
					pos: position{line: 699, col: 15, offset: 21244},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 699, col: 15, offset: 21244},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
						&ruleRefExpr{
							pos:  position{line: 699, col: 19, offset: 21248},
							name: "UnixCommentMatch",
						},
					},
				},
			},
		},
		{
			name: "UnixCommentMatch",
			pos:  position{line: 702, col: 1, offset: 21355},
			expr: &actionExpr{
				pos: position{line: 702, col: 20, offset: 21374},
				run: (*parser).callonUnixCommentMatch1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 702, col: 20, offset: 21374},
					expr: &seqExpr{
						pos: position{line: 702, col: 21, offset: 21375},
						exprs: []any{
							&notExpr{
								pos: position{line: 702, col: 21, offset: 21375},
								expr: &charClassMatcher{
									pos:        position{line: 702, col: 22, offset: 21376},
									val:        "[\\r\\n]",
									chars:      []rune{'\r', '\n'},
									ignoreCase: false,
									inverted:   false,
								},
							},
							&anyMatcher{
								line: 702, col: 29, offset: 21383,
							},
						},
					},
				},
			},
		},
		{
			name: "BOOL",
			pos:  position{line: 706, col: 1, offset: 21421},
			expr: &actionExpr{
				pos: position{line: 706, col: 8, offset: 21428},
				run: (*parser).callonBOOL1,
				expr: &seqExpr{
					pos: position{line: 706, col: 8, offset: 21428},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 706, col: 8, offset: 21428},
							label: "comments",
							expr: &ruleRefExpr{
								pos:  position{line: 706, col: 17, offset: 21437},
								name: "ReservedComments",
							},
						},
						&labeledExpr{
							pos:   position{line: 706, col: 34, offset: 21454},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 706, col: 36, offset: 21456},
								name: "BOOLToken",
							},
						},
						&notExpr{
							pos: position{line: 706, col: 53, offset: 21473},
							expr: &ruleRefExpr{
								pos:  position{line: 706, col: 54, offset: 21474},
								name: "LetterOrDigit",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 706, col: 69, offset: 21489},
							expr: &ruleRefExpr{
								pos:  position{line: 706, col: 69, offset: 21489},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "BOOLToken",
			pos:  position{line: 712, col: 1, offset: 21576},
			expr: &actionExpr{
				pos: position{line: 712, col: 14, offset: 21589},
				run: (*parser).callonBOOLToken1,
				expr: &litMatcher{
					pos:        position{line: 712, col: 14, offset: 21589},
					val:        "bool",
					ignoreCase: false,
					want:       "\"bool\"",
				},
			},
		},
		{
			name: "BYTE",
			pos:  position{line: 716, col: 1, offset: 21649},
			expr: &actionExpr{
				pos: position{line: 716, col: 8, offset: 21656},
				run: (*parser).callonBYTE1,
				expr: &seqExpr{
					pos: position{line: 716, col: 8, offset: 21656},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 716, col: 8, offset: 21656},
							label: "comments",
							expr: &ruleRefExpr{
								pos:  position{line: 716, col: 17, offset: 21665},
								name: "ReservedComments",
							},
						},
						&labeledExpr{
							pos:   position{line: 716, col: 34, offset: 21682},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 716, col: 36, offset: 21684},
								name: "BYTEToken",
							},
						},
						&notExpr{
							pos: position{line: 716, col: 53, offset: 21701},
							expr: &ruleRefExpr{
								pos:  position{line: 716, col: 54, offset: 21702},
								name: "LetterOrDigit",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 716, col: 69, offset: 21717},
							expr: &ruleRefExpr{
								pos:  position{line: 716, col: 69, offset: 21717},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "BYTEToken",
			pos:  position{line: 722, col: 1, offset: 21804},
			expr: &actionExpr{
				pos: position{line: 722, col: 13, offset: 21816},
				run: (*parser).callonBYTEToken1,
				expr: &litMatcher{
					pos:        position{line: 722, col: 13, offset: 21816},
					val:        "byte",
					ignoreCase: false,
					want:       "\"byte\"",
				},
			},
		},
		{
			name: "I8",
			pos:  position{line: 726, col: 1, offset: 21876},
			expr: &actionExpr{
				pos: position{line: 726, col: 6, offset: 21881},
				run: (*parser).callonI81,
				expr: &seqExpr{
					pos: position{line: 726, col: 6, offset: 21881},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 726, col: 6, offset: 21881},
							label: "comments",
							expr: &ruleRefExpr{
								pos:  position{line: 726, col: 15, offset: 21890},
								name: "ReservedComments",
							},
						},
						&labeledExpr{
							pos:   position{line: 726, col: 32, offset: 21907},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 726, col: 34, offset: 21909},
								name: "I8Token",
							},
						},
						&notExpr{
							pos: position{line: 726, col: 51, offset: 21926},
							expr: &ruleRefExpr{
								pos:  position{line: 726, col: 52, offset: 21927},
								name: "LetterOrDigit",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 726, col: 67, offset: 21942},
							expr: &ruleRefExpr{
								pos:  position{line: 726, col: 67, offset: 21942},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "I8Token",
			pos:  position{line: 732, col: 1, offset: 22029},
			expr: &actionExpr{
				pos: position{line: 732, col: 11, offset: 22039},
				run: (*parser).callonI8Token1,
				expr: &litMatcher{
					pos:        position{line: 732, col: 11, offset: 22039},
					val:        "i8",
					ignoreCase: false,
					want:       "\"i8\"",
				},
			},
		},
		{
			name: "I16",
			pos:  position{line: 737, col: 1, offset: 22098},
			expr: &actionExpr{
				pos: position{line: 737, col: 7, offset: 22104},
				run: (*parser).callonI161,
				expr: &seqExpr{
					pos: position{line: 737, col: 7, offset: 22104},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 737, col: 7, offset: 22104},
							label: "comments",
							expr: &ruleRefExpr{
								pos:  position{line: 737, col: 16, offset: 22113},
								name: "ReservedComments",
							},
						},
						&labeledExpr{
							pos:   position{line: 737, col: 33, offset: 22130},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 737, col: 35, offset: 22132},
								name: "I16Token",
							},
						},
						&notExpr{
							pos: position{line: 737, col: 52, offset: 22149},
							expr: &ruleRefExpr{
								pos:  position{line: 737, col: 53, offset: 22150},
								name: "LetterOrDigit",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 737, col: 68, offset: 22165},
							expr: &ruleRefExpr{
								pos:  position{line: 737, col: 68, offset: 22165},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "I16Token",
			pos:  position{line: 743, col: 1, offset: 22252},
			expr: &actionExpr{
				pos: position{line: 743, col: 12, offset: 22263},
				run: (*parser).callonI16Token1,
				expr: &litMatcher{
					pos:        position{line: 743, col: 12, offset: 22263},
					val:        "i16",
					ignoreCase: false,
					want:       "\"i16\"",
				},
			},
		},
		{
			name: "I32",
			pos:  position{line: 747, col: 1, offset: 22322},
			expr: &actionExpr{
				pos: position{line: 747, col: 7, offset: 22328},
				run: (*parser).callonI321,
				expr: &seqExpr{
					pos: position{line: 747, col: 7, offset: 22328},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 747, col: 7, offset: 22328},
							label: "comments",
							expr: &ruleRefExpr{
								pos:  position{line: 747, col: 16, offset: 22337},
								name: "ReservedComments",
							},
						},
						&labeledExpr{
							pos:   position{line: 747, col: 33, offset: 22354},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 747, col: 35, offset: 22356},
								name: "I32Token",
							},
						},
						&notExpr{
							pos: position{line: 747, col: 52, offset: 22373},
							expr: &ruleRefExpr{
								pos:  position{line: 747, col: 53, offset: 22374},
								name: "LetterOrDigit",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 747, col: 68, offset: 22389},
							expr: &ruleRefExpr{
								pos:  position{line: 747, col: 68, offset: 22389},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "I32Token",
			pos:  position{line: 753, col: 1, offset: 22476},
			expr: &actionExpr{
				pos: position{line: 753, col: 12, offset: 22487},
				run: (*parser).callonI32Token1,
				expr: &litMatcher{
					pos:        position{line: 753, col: 12, offset: 22487},
					val:        "i32",
					ignoreCase: false,
					want:       "\"i32\"",
				},
			},
		},
		{
			name: "I64",
			pos:  position{line: 757, col: 1, offset: 22546},
			expr: &actionExpr{
				pos: position{line: 757, col: 7, offset: 22552},
				run: (*parser).callonI641,
				expr: &seqExpr{
					pos: position{line: 757, col: 7, offset: 22552},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 757, col: 7, offset: 22552},
							label: "comments",
							expr: &ruleRefExpr{
								pos:  position{line: 757, col: 16, offset: 22561},
								name: "ReservedComments",
							},
						},
						&labeledExpr{
							pos:   position{line: 757, col: 33, offset: 22578},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 757, col: 35, offset: 22580},
								name: "I64Token",
							},
						},
						&notExpr{
							pos: position{line: 757, col: 52, offset: 22597},
							expr: &ruleRefExpr{
								pos:  position{line: 757, col: 53, offset: 22598},
								name: "LetterOrDigit",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 757, col: 68, offset: 22613},
							expr: &ruleRefExpr{
								pos:  position{line: 757, col: 68, offset: 22613},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "I64Token",
			pos:  position{line: 763, col: 1, offset: 22700},
			expr: &actionExpr{
				pos: position{line: 763, col: 12, offset: 22711},
				run: (*parser).callonI64Token1,
				expr: &litMatcher{
					pos:        position{line: 763, col: 12, offset: 22711},
					val:        "i64",
					ignoreCase: false,
					want:       "\"i64\"",
				},
			},
		},
		{
			name: "DOUBLE",
			pos:  position{line: 767, col: 1, offset: 22770},
			expr: &actionExpr{
				pos: position{line: 767, col: 10, offset: 22779},
				run: (*parser).callonDOUBLE1,
				expr: &seqExpr{
					pos: position{line: 767, col: 10, offset: 22779},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 767, col: 10, offset: 22779},
							label: "comments",
							expr: &ruleRefExpr{
								pos:  position{line: 767, col: 19, offset: 22788},
								name: "ReservedComments",
							},
						},
						&labeledExpr{
							pos:   position{line: 767, col: 36, offset: 22805},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 767, col: 38, offset: 22807},
								name: "DOUBLEToken",
							},
						},
						&notExpr{
							pos: position{line: 767, col: 55, offset: 22824},
							expr: &ruleRefExpr{
								pos:  position{line: 767, col: 56, offset: 22825},
								name: "LetterOrDigit",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 767, col: 71, offset: 22840},
							expr: &ruleRefExpr{
								pos:  position{line: 767, col: 71, offset: 22840},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "DOUBLEToken",
			pos:  position{line: 773, col: 1, offset: 22927},
			expr: &actionExpr{
				pos: position{line: 773, col: 15, offset: 22941},
				run: (*parser).callonDOUBLEToken1,
				expr: &litMatcher{
					pos:        position{line: 773, col: 15, offset: 22941},
					val:        "double",
					ignoreCase: false,
					want:       "\"double\"",
				},
			},
		},
		{
			name: "STRING",
			pos:  position{line: 777, col: 1, offset: 23003},
			expr: &actionExpr{
				pos: position{line: 777, col: 10, offset: 23012},
				run: (*parser).callonSTRING1,
				expr: &seqExpr{
					pos: position{line: 777, col: 10, offset: 23012},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 777, col: 10, offset: 23012},
							label: "comments",
							expr: &ruleRefExpr{
								pos:  position{line: 777, col: 19, offset: 23021},
								name: "ReservedComments",
							},
						},
						&labeledExpr{
							pos:   position{line: 777, col: 36, offset: 23038},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 777, col: 38, offset: 23040},
								name: "STRINGToken",
							},
						},
						&notExpr{
							pos: position{line: 777, col: 55, offset: 23057},
							expr: &ruleRefExpr{
								pos:  position{line: 777, col: 56, offset: 23058},
								name: "LetterOrDigit",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 777, col: 71, offset: 23073},
							expr: &ruleRefExpr{
								pos:  position{line: 777, col: 71, offset: 23073},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "STRINGToken",
			pos:  position{line: 783, col: 1, offset: 23160},
			expr: &actionExpr{
				pos: position{line: 783, col: 15, offset: 23174},
				run: (*parser).callonSTRINGToken1,
				expr: &litMatcher{
					pos:        position{line: 783, col: 15, offset: 23174},
					val:        "string",
					ignoreCase: false,
					want:       "\"string\"",
				},
			},
		},
		{
			name: "BINARY",
			pos:  position{line: 787, col: 1, offset: 23236},
			expr: &actionExpr{
				pos: position{line: 787, col: 10, offset: 23245},
				run: (*parser).callonBINARY1,
				expr: &seqExpr{
					pos: position{line: 787, col: 10, offset: 23245},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 787, col: 10, offset: 23245},
							label: "comments",
							expr: &ruleRefExpr{
								pos:  position{line: 787, col: 19, offset: 23254},
								name: "ReservedComments",
							},
						},
						&labeledExpr{
							pos:   position{line: 787, col: 36, offset: 23271},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 787, col: 38, offset: 23273},
								name: "BINARYToken",
							},
						},
						&notExpr{
							pos: position{line: 787, col: 55, offset: 23290},
							expr: &ruleRefExpr{
								pos:  position{line: 787, col: 56, offset: 23291},
								name: "LetterOrDigit",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 787, col: 71, offset: 23306},
							expr: &ruleRefExpr{
								pos:  position{line: 787, col: 71, offset: 23306},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "BINARYToken",
			pos:  position{line: 793, col: 1, offset: 23393},
			expr: &actionExpr{
				pos: position{line: 793, col: 15, offset: 23407},
				run: (*parser).callonBINARYToken1,
				expr: &litMatcher{
					pos:        position{line: 793, col: 15, offset: 23407},
					val:        "binary",
					ignoreCase: false,
					want:       "\"binary\"",
				},
			},
		},
		{
			name: "MAP",
			pos:  position{line: 797, col: 1, offset: 23469},
			expr: &actionExpr{
				pos: position{line: 797, col: 7, offset: 23475},
				run: (*parser).callonMAP1,
				expr: &seqExpr{
					pos: position{line: 797, col: 7, offset: 23475},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 797, col: 7, offset: 23475},
							label: "comments",
							expr: &ruleRefExpr{
								pos:  position{line: 797, col: 16, offset: 23484},
								name: "ReservedComments",
							},
						},
						&labeledExpr{
							pos:   position{line: 797, col: 33, offset: 23501},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 797, col: 35, offset: 23503},
								name: "MAPToken",
							},
						},
						&notExpr{
							pos: position{line: 797, col: 54, offset: 23522},
							expr: &ruleRefExpr{
								pos:  position{line: 797, col: 55, offset: 23523},
								name: "LetterOrDigit",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 797, col: 70, offset: 23538},
							expr: &ruleRefExpr{
								pos:  position{line: 797, col: 70, offset: 23538},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "MAPToken",
			pos:  position{line: 803, col: 1, offset: 23625},
			expr: &actionExpr{
				pos: position{line: 803, col: 12, offset: 23636},
				run: (*parser).callonMAPToken1,
				expr: &litMatcher{
					pos:        position{line: 803, col: 12, offset: 23636},
					val:        "map",
					ignoreCase: false,
					want:       "\"map\"",
				},
			},
		},
		{
			name: "SET",
			pos:  position{line: 807, col: 1, offset: 23695},
			expr: &actionExpr{
				pos: position{line: 807, col: 7, offset: 23701},
				run: (*parser).callonSET1,
				expr: &seqExpr{
					pos: position{line: 807, col: 7, offset: 23701},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 807, col: 7, offset: 23701},
							label: "comments",
							expr: &ruleRefExpr{
								pos:  position{line: 807, col: 16, offset: 23710},
								name: "ReservedComments",
							},
						},
						&labeledExpr{
							pos:   position{line: 807, col: 33, offset: 23727},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 807, col: 35, offset: 23729},
								name: "SETToken",
							},
						},
						&notExpr{
							pos: position{line: 807, col: 54, offset: 23748},
							expr: &ruleRefExpr{
								pos:  position{line: 807, col: 55, offset: 23749},
								name: "LetterOrDigit",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 807, col: 70, offset: 23764},
							expr: &ruleRefExpr{
								pos:  position{line: 807, col: 70, offset: 23764},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "SETToken",
			pos:  position{line: 813, col: 1, offset: 23851},
			expr: &actionExpr{
				pos: position{line: 813, col: 12, offset: 23862},
				run: (*parser).callonSETToken1,
				expr: &litMatcher{
					pos:        position{line: 813, col: 12, offset: 23862},
					val:        "set",
					ignoreCase: false,
					want:       "\"set\"",
				},
			},
		},
		{
			name: "LIST",
			pos:  position{line: 817, col: 1, offset: 23921},
			expr: &actionExpr{
				pos: position{line: 817, col: 8, offset: 23928},
				run: (*parser).callonLIST1,
				expr: &seqExpr{
					pos: position{line: 817, col: 8, offset: 23928},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 817, col: 8, offset: 23928},
							label: "comments",
							expr: &ruleRefExpr{
								pos:  position{line: 817, col: 17, offset: 23937},
								name: "ReservedComments",
							},
						},
						&labeledExpr{
							pos:   position{line: 817, col: 34, offset: 23954},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 817, col: 36, offset: 23956},
								name: "ListToken",
							},
						},
						&notExpr{
							pos: position{line: 817, col: 55, offset: 23975},
							expr: &ruleRefExpr{
								pos:  position{line: 817, col: 56, offset: 23976},
								name: "LetterOrDigit",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 817, col: 71, offset: 23991},
							expr: &ruleRefExpr{
								pos:  position{line: 817, col: 71, offset: 23991},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "ListToken",
			pos:  position{line: 823, col: 1, offset: 24078},
			expr: &actionExpr{
				pos: position{line: 823, col: 13, offset: 24090},
				run: (*parser).callonListToken1,
				expr: &litMatcher{
					pos:        position{line: 823, col: 13, offset: 24090},
					val:        "list",
					ignoreCase: false,
					want:       "\"list\"",
				},
			},
		},
		{
			name: "CONST",
			pos:  position{line: 827, col: 1, offset: 24150},
			expr: &actionExpr{
				pos: position{line: 827, col: 9, offset: 24158},
				run: (*parser).callonCONST1,
				expr: &seqExpr{
					pos: position{line: 827, col: 9, offset: 24158},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 827, col: 9, offset: 24158},
							label: "comments",
							expr: &ruleRefExpr{
								pos:  position{line: 827, col: 18, offset: 24167},
								name: "ReservedComments",
							},
						},
						&labeledExpr{
							pos:   position{line: 827, col: 35, offset: 24184},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 827, col: 37, offset: 24186},
								name: "CONSTToken",
							},
						},
						&notExpr{
							pos: position{line: 827, col: 56, offset: 24205},
							expr: &ruleRefExpr{
								pos:  position{line: 827, col: 57, offset: 24206},
								name: "LetterOrDigit",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 827, col: 72, offset: 24221},
							expr: &ruleRefExpr{
								pos:  position{line: 827, col: 72, offset: 24221},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "CONSTToken",
			pos:  position{line: 833, col: 1, offset: 24364},
			expr: &actionExpr{
				pos: position{line: 833, col: 14, offset: 24377},
				run: (*parser).callonCONSTToken1,
				expr: &litMatcher{
					pos:        position{line: 833, col: 14, offset: 24377},
					val:        "const",
					ignoreCase: false,
					want:       "\"const\"",
				},
			},
		},
		{
			name: "ONEWAY",
			pos:  position{line: 837, col: 1, offset: 24424},
			expr: &actionExpr{
				pos: position{line: 837, col: 10, offset: 24433},
				run: (*parser).callonONEWAY1,
				expr: &seqExpr{
					pos: position{line: 837, col: 10, offset: 24433},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 837, col: 10, offset: 24433},
							label: "comments",
							expr: &ruleRefExpr{
								pos:  position{line: 837, col: 19, offset: 24442},
								name: "ReservedComments",
							},
						},
						&labeledExpr{
							pos:   position{line: 837, col: 36, offset: 24459},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 837, col: 38, offset: 24461},
								name: "ONEWAYToken",
							},
						},
						&notExpr{
							pos: position{line: 837, col: 57, offset: 24480},
							expr: &ruleRefExpr{
								pos:  position{line: 837, col: 58, offset: 24481},
								name: "LetterOrDigit",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 837, col: 73, offset: 24496},
							expr: &ruleRefExpr{
								pos:  position{line: 837, col: 73, offset: 24496},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "ONEWAYToken",
			pos:  position{line: 843, col: 1, offset: 24640},
			expr: &actionExpr{
				pos: position{line: 843, col: 15, offset: 24654},
				run: (*parser).callonONEWAYToken1,
				expr: &litMatcher{
					pos:        position{line: 843, col: 15, offset: 24654},
					val:        "oneway",
					ignoreCase: false,
					want:       "\"oneway\"",
				},
			},
		},
		{
			name: "TYPEDEF",
			pos:  position{line: 847, col: 1, offset: 24702},
			expr: &actionExpr{
				pos: position{line: 847, col: 11, offset: 24712},
				run: (*parser).callonTYPEDEF1,
				expr: &seqExpr{
					pos: position{line: 847, col: 11, offset: 24712},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 847, col: 11, offset: 24712},
							label: "comments",
							expr: &ruleRefExpr{
								pos:  position{line: 847, col: 20, offset: 24721},
								name: "ReservedComments",
							},
						},
						&labeledExpr{
							pos:   position{line: 847, col: 37, offset: 24738},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 847, col: 39, offset: 24740},
								name: "TYPEDEFToken",
							},
						},
						&notExpr{
							pos: position{line: 847, col: 56, offset: 24757},
							expr: &ruleRefExpr{
								pos:  position{line: 847, col: 57, offset: 24758},
								name: "LetterOrDigit",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 847, col: 72, offset: 24773},
							expr: &ruleRefExpr{
								pos:  position{line: 847, col: 72, offset: 24773},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "TYPEDEFToken",
			pos:  position{line: 853, col: 1, offset: 24918},
			expr: &actionExpr{
				pos: position{line: 853, col: 16, offset: 24933},
				run: (*parser).callonTYPEDEFToken1,
				expr: &litMatcher{
					pos:        position{line: 853, col: 16, offset: 24933},
					val:        "typedef",
					ignoreCase: false,
					want:       "\"typedef\"",
				},
			},
		},
		{
			name: "VOID",
			pos:  position{line: 858, col: 1, offset: 24983},
			expr: &actionExpr{
				pos: position{line: 858, col: 15, offset: 24997},
				run: (*parser).callonVOID1,
				expr: &seqExpr{
					pos: position{line: 858, col: 15, offset: 24997},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 858, col: 15, offset: 24997},
							label: "comments",
							expr: &ruleRefExpr{
								pos:  position{line: 858, col: 24, offset: 25006},
								name: "ReservedComments",
							},
						},
						&labeledExpr{
							pos:   position{line: 858, col: 41, offset: 25023},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 858, col: 43, offset: 25025},
								name: "VOIDToken",
							},
						},
						&notExpr{
							pos: position{line: 858, col: 61, offset: 25043},
							expr: &ruleRefExpr{
								pos:  position{line: 858, col: 62, offset: 25044},
								name: "LetterOrDigit",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 858, col: 77, offset: 25059},
							expr: &ruleRefExpr{
								pos:  position{line: 858, col: 77, offset: 25059},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "VOIDToken",
			pos:  position{line: 863, col: 1, offset: 25200},
			expr: &actionExpr{
				pos: position{line: 863, col: 13, offset: 25212},
				run: (*parser).callonVOIDToken1,
				expr: &litMatcher{
					pos:        position{line: 863, col: 13, offset: 25212},
					val:        "void",
					ignoreCase: false,
					want:       "\"void\"",
				},
			},
		},
		{
			name: "THROWS",
			pos:  position{line: 867, col: 1, offset: 25258},
			expr: &actionExpr{
				pos: position{line: 867, col: 15, offset: 25272},
				run: (*parser).callonTHROWS1,
				expr: &seqExpr{
					pos: position{line: 867, col: 15, offset: 25272},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 867, col: 15, offset: 25272},
							label: "comments",
							expr: &ruleRefExpr{
								pos:  position{line: 867, col: 24, offset: 25281},
								name: "ReservedComments",
							},
						},
						&labeledExpr{
							pos:   position{line: 867, col: 41, offset: 25298},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 867, col: 43, offset: 25300},
								name: "THROWSToken",
							},
						},
						&notExpr{
							pos: position{line: 867, col: 62, offset: 25319},
							expr: &ruleRefExpr{
								pos:  position{line: 867, col: 63, offset: 25320},
								name: "LetterOrDigit",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 867, col: 78, offset: 25335},
							expr: &ruleRefExpr{
								pos:  position{line: 867, col: 78, offset: 25335},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "THROWSToken",
			pos:  position{line: 872, col: 1, offset: 25478},
			expr: &actionExpr{
				pos: position{line: 872, col: 15, offset: 25492},
				run: (*parser).callonTHROWSToken1,
				expr: &litMatcher{
					pos:        position{line: 872, col: 15, offset: 25492},
					val:        "throws",
					ignoreCase: false,
					want:       "\"throws\"",
				},
			},
		},
		{
			name: "EXCEPTION",
			pos:  position{line: 876, col: 1, offset: 25540},
			expr: &actionExpr{
				pos: position{line: 876, col: 15, offset: 25554},
				run: (*parser).callonEXCEPTION1,
				expr: &seqExpr{
					pos: position{line: 876, col: 15, offset: 25554},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 876, col: 15, offset: 25554},
							label: "comments",
							expr: &ruleRefExpr{
								pos:  position{line: 876, col: 24, offset: 25563},
								name: "ReservedComments",
							},
						},
						&labeledExpr{
							pos:   position{line: 876, col: 41, offset: 25580},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 876, col: 43, offset: 25582},
								name: "EXCEPTIONToken",
							},
						},
						&notExpr{
							pos: position{line: 876, col: 62, offset: 25601},
							expr: &ruleRefExpr{
								pos:  position{line: 876, col: 63, offset: 25602},
								name: "LetterOrDigit",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 876, col: 78, offset: 25617},
							expr: &ruleRefExpr{
								pos:  position{line: 876, col: 78, offset: 25617},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "EXCEPTIONToken",
			pos:  position{line: 881, col: 1, offset: 25763},
			expr: &actionExpr{
				pos: position{line: 881, col: 18, offset: 25780},
				run: (*parser).callonEXCEPTIONToken1,
				expr: &litMatcher{
					pos:        position{line: 881, col: 18, offset: 25780},
					val:        "exception",
					ignoreCase: false,
					want:       "\"exception\"",
				},
			},
		},
		{
			name: "EXTENDS",
			pos:  position{line: 886, col: 1, offset: 25832},
			expr: &actionExpr{
				pos: position{line: 886, col: 15, offset: 25846},
				run: (*parser).callonEXTENDS1,
				expr: &seqExpr{
					pos: position{line: 886, col: 15, offset: 25846},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 886, col: 15, offset: 25846},
							label: "comments",
							expr: &ruleRefExpr{
								pos:  position{line: 886, col: 24, offset: 25855},
								name: "ReservedComments",
							},
						},
						&labeledExpr{
							pos:   position{line: 886, col: 41, offset: 25872},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 886, col: 43, offset: 25874},
								name: "EXTENDSToken",
							},
						},
						&notExpr{
							pos: position{line: 886, col: 62, offset: 25893},
							expr: &ruleRefExpr{
								pos:  position{line: 886, col: 63, offset: 25894},
								name: "LetterOrDigit",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 886, col: 78, offset: 25909},
							expr: &ruleRefExpr{
								pos:  position{line: 886, col: 78, offset: 25909},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "EXTENDSToken",
			pos:  position{line: 891, col: 1, offset: 26053},
			expr: &actionExpr{
				pos: position{line: 891, col: 16, offset: 26068},
				run: (*parser).callonEXTENDSToken1,
				expr: &litMatcher{
					pos:        position{line: 891, col: 16, offset: 26068},
					val:        "extends",
					ignoreCase: false,
					want:       "\"extends\"",
				},
			},
		},
		{
			name: "SERVICE",
			pos:  position{line: 895, col: 1, offset: 26117},
			expr: &actionExpr{
				pos: position{line: 895, col: 15, offset: 26131},
				run: (*parser).callonSERVICE1,
				expr: &seqExpr{
					pos: position{line: 895, col: 15, offset: 26131},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 895, col: 15, offset: 26131},
							label: "comments",
							expr: &ruleRefExpr{
								pos:  position{line: 895, col: 24, offset: 26140},
								name: "ReservedComments",
							},
						},
						&labeledExpr{
							pos:   position{line: 895, col: 41, offset: 26157},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 895, col: 43, offset: 26159},
								name: "SERVICEToken",
							},
						},
						&notExpr{
							pos: position{line: 895, col: 62, offset: 26178},
							expr: &ruleRefExpr{
								pos:  position{line: 895, col: 63, offset: 26179},
								name: "LetterOrDigit",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 895, col: 78, offset: 26194},
							expr: &ruleRefExpr{
								pos:  position{line: 895, col: 78, offset: 26194},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "SERVICEToken",
			pos:  position{line: 900, col: 1, offset: 26338},
			expr: &actionExpr{
				pos: position{line: 900, col: 16, offset: 26353},
				run: (*parser).callonSERVICEToken1,
				expr: &litMatcher{
					pos:        position{line: 900, col: 16, offset: 26353},
					val:        "service",
					ignoreCase: false,
					want:       "\"service\"",
				},
			},
		},
		{
			name: "STRUCT",
			pos:  position{line: 904, col: 1, offset: 26402},
			expr: &actionExpr{
				pos: position{line: 904, col: 15, offset: 26416},
				run: (*parser).callonSTRUCT1,
				expr: &seqExpr{
					pos: position{line: 904, col: 15, offset: 26416},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 904, col: 15, offset: 26416},
							label: "comments",
							expr: &ruleRefExpr{
								pos:  position{line: 904, col: 24, offset: 26425},
								name: "ReservedComments",
							},
						},
						&labeledExpr{
							pos:   position{line: 904, col: 41, offset: 26442},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 904, col: 43, offset: 26444},
								name: "STRUCTToken",
							},
						},
						&notExpr{
							pos: position{line: 904, col: 62, offset: 26463},
							expr: &ruleRefExpr{
								pos:  position{line: 904, col: 63, offset: 26464},
								name: "LetterOrDigit",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 904, col: 78, offset: 26479},
							expr: &ruleRefExpr{
								pos:  position{line: 904, col: 78, offset: 26479},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "STRUCTToken",
			pos:  position{line: 909, col: 1, offset: 26622},
			expr: &actionExpr{
				pos: position{line: 909, col: 15, offset: 26636},
				run: (*parser).callonSTRUCTToken1,
				expr: &litMatcher{
					pos:        position{line: 909, col: 15, offset: 26636},
					val:        "struct",
					ignoreCase: false,
					want:       "\"struct\"",
				},
			},
		},
		{
			name: "UNION",
			pos:  position{line: 913, col: 1, offset: 26684},
			expr: &actionExpr{
				pos: position{line: 913, col: 15, offset: 26698},
				run: (*parser).callonUNION1,
				expr: &seqExpr{
					pos: position{line: 913, col: 15, offset: 26698},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 913, col: 15, offset: 26698},
							label: "comments",
							expr: &ruleRefExpr{
								pos:  position{line: 913, col: 24, offset: 26707},
								name: "ReservedComments",
							},
						},
						&labeledExpr{
							pos:   position{line: 913, col: 41, offset: 26724},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 913, col: 43, offset: 26726},
								name: "UNIONToken",
							},
						},
						&notExpr{
							pos: position{line: 913, col: 61, offset: 26744},
							expr: &ruleRefExpr{
								pos:  position{line: 913, col: 62, offset: 26745},
								name: "LetterOrDigit",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 913, col: 77, offset: 26760},
							expr: &ruleRefExpr{
								pos:  position{line: 913, col: 77, offset: 26760},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "UNIONToken",
			pos:  position{line: 918, col: 1, offset: 26902},
			expr: &actionExpr{
				pos: position{line: 918, col: 14, offset: 26915},
				run: (*parser).callonUNIONToken1,
				expr: &litMatcher{
					pos:        position{line: 918, col: 14, offset: 26915},
					val:        "union",
					ignoreCase: false,
					want:       "\"union\"",
				},
			},
		},
		{
			name: "ENUM",
			pos:  position{line: 922, col: 1, offset: 26962},
			expr: &actionExpr{
				pos: position{line: 922, col: 15, offset: 26976},
				run: (*parser).callonENUM1,
				expr: &seqExpr{
					pos: position{line: 922, col: 15, offset: 26976},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 922, col: 15, offset: 26976},
							label: "comments",
							expr: &ruleRefExpr{
								pos:  position{line: 922, col: 24, offset: 26985},
								name: "ReservedComments",
							},
						},
						&labeledExpr{
							pos:   position{line: 922, col: 41, offset: 27002},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 922, col: 43, offset: 27004},
								name: "ENUMToken",
							},
						},
						&notExpr{
							pos: position{line: 922, col: 62, offset: 27023},
							expr: &ruleRefExpr{
								pos:  position{line: 922, col: 63, offset: 27024},
								name: "LetterOrDigit",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 922, col: 78, offset: 27039},
							expr: &ruleRefExpr{
								pos:  position{line: 922, col: 78, offset: 27039},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "ENUMToken",
			pos:  position{line: 927, col: 1, offset: 27180},
			expr: &actionExpr{
				pos: position{line: 927, col: 13, offset: 27192},
				run: (*parser).callonENUMToken1,
				expr: &litMatcher{
					pos:        position{line: 927, col: 13, offset: 27192},
					val:        "enum",
					ignoreCase: false,
					want:       "\"enum\"",
				},
			},
		},
		{
			name: "INCLUDE",
			pos:  position{line: 931, col: 1, offset: 27238},
			expr: &actionExpr{
				pos: position{line: 931, col: 15, offset: 27252},
				run: (*parser).callonINCLUDE1,
				expr: &seqExpr{
					pos: position{line: 931, col: 15, offset: 27252},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 931, col: 15, offset: 27252},
							label: "comments",
							expr: &ruleRefExpr{
								pos:  position{line: 931, col: 24, offset: 27261},
								name: "ReservedComments",
							},
						},
						&labeledExpr{
							pos:   position{line: 931, col: 41, offset: 27278},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 931, col: 43, offset: 27280},
								name: "INCLUDEToken",
							},
						},
						&notExpr{
							pos: position{line: 931, col: 62, offset: 27299},
							expr: &ruleRefExpr{
								pos:  position{line: 931, col: 63, offset: 27300},
								name: "LetterOrDigit",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 931, col: 78, offset: 27315},
							expr: &ruleRefExpr{
								pos:  position{line: 931, col: 78, offset: 27315},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "INCLUDEToken",
			pos:  position{line: 936, col: 1, offset: 27459},
			expr: &actionExpr{
				pos: position{line: 936, col: 16, offset: 27474},
				run: (*parser).callonINCLUDEToken1,
				expr: &litMatcher{
					pos:        position{line: 936, col: 16, offset: 27474},
					val:        "include",
					ignoreCase: false,
					want:       "\"include\"",
				},
			},
		},
		{
			name: "CPPINCLUDE",
			pos:  position{line: 940, col: 1, offset: 27523},
			expr: &actionExpr{
				pos: position{line: 940, col: 15, offset: 27537},
				run: (*parser).callonCPPINCLUDE1,
				expr: &seqExpr{
					pos: position{line: 940, col: 15, offset: 27537},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 940, col: 15, offset: 27537},
							label: "comments",
							expr: &ruleRefExpr{
								pos:  position{line: 940, col: 24, offset: 27546},
								name: "ReservedComments",
							},
						},
						&labeledExpr{
							pos:   position{line: 940, col: 41, offset: 27563},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 940, col: 43, offset: 27565},
								name: "CPPINCLUDEToken",
							},
						},
						&notExpr{
							pos: position{line: 940, col: 61, offset: 27583},
							expr: &ruleRefExpr{
								pos:  position{line: 940, col: 62, offset: 27584},
								name: "LetterOrDigit",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 940, col: 77, offset: 27599},
							expr: &ruleRefExpr{
								pos:  position{line: 940, col: 77, offset: 27599},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "CPPINCLUDEToken",
			pos:  position{line: 945, col: 1, offset: 27746},
			expr: &actionExpr{
				pos: position{line: 945, col: 19, offset: 27764},
				run: (*parser).callonCPPINCLUDEToken1,
				expr: &litMatcher{
					pos:        position{line: 945, col: 19, offset: 27764},
					val:        "cpp_include",
					ignoreCase: false,
					want:       "\"cpp_include\"",
				},
			},
		},
		{
			name: "NAMESPACE",
			pos:  position{line: 949, col: 1, offset: 27817},
			expr: &actionExpr{
				pos: position{line: 949, col: 15, offset: 27831},
				run: (*parser).callonNAMESPACE1,
				expr: &seqExpr{
					pos: position{line: 949, col: 15, offset: 27831},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 949, col: 15, offset: 27831},
							label: "comments",
							expr: &ruleRefExpr{
								pos:  position{line: 949, col: 24, offset: 27840},
								name: "ReservedComments",
							},
						},
						&labeledExpr{
							pos:   position{line: 949, col: 41, offset: 27857},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 949, col: 43, offset: 27859},
								name: "NAMESPACEToken",
							},
						},
						&notExpr{
							pos: position{line: 949, col: 62, offset: 27878},
							expr: &ruleRefExpr{
								pos:  position{line: 949, col: 63, offset: 27879},
								name: "LetterOrDigit",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 949, col: 78, offset: 27894},
							expr: &ruleRefExpr{
								pos:  position{line: 949, col: 78, offset: 27894},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "NAMESPACEToken",
			pos:  position{line: 954, col: 1, offset: 28040},
			expr: &actionExpr{
				pos: position{line: 954, col: 18, offset: 28057},
				run: (*parser).callonNAMESPACEToken1,
				expr: &litMatcher{
					pos:        position{line: 954, col: 18, offset: 28057},
					val:        "namespace",
					ignoreCase: false,
					want:       "\"namespace\"",
				},
			},
		},
		{
			name: "CPPTYPE",
			pos:  position{line: 959, col: 1, offset: 28109},
			expr: &actionExpr{
				pos: position{line: 959, col: 15, offset: 28123},
				run: (*parser).callonCPPTYPE1,
				expr: &seqExpr{
					pos: position{line: 959, col: 15, offset: 28123},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 959, col: 15, offset: 28123},
							label: "comments",
							expr: &ruleRefExpr{
								pos:  position{line: 959, col: 24, offset: 28132},
								name: "ReservedComments",
							},
						},
						&labeledExpr{
							pos:   position{line: 959, col: 41, offset: 28149},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 959, col: 43, offset: 28151},
								name: "CPPTYPEToken",
							},
						},
						&notExpr{
							pos: position{line: 959, col: 61, offset: 28169},
							expr: &ruleRefExpr{
								pos:  position{line: 959, col: 62, offset: 28170},
								name: "LetterOrDigit",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 959, col: 77, offset: 28185},
							expr: &ruleRefExpr{
								pos:  position{line: 959, col: 77, offset: 28185},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "CPPTYPEToken",
			pos:  position{line: 964, col: 1, offset: 28329},
			expr: &actionExpr{
				pos: position{line: 964, col: 16, offset: 28344},
				run: (*parser).callonCPPTYPEToken1,
				expr: &litMatcher{
					pos:        position{line: 964, col: 16, offset: 28344},
					val:        "cpp_type",
					ignoreCase: false,
					want:       "\"cpp_type\"",
				},
			},
		},
		{
			name: "LBRK",
			pos:  position{line: 969, col: 1, offset: 28395},
			expr: &actionExpr{
				pos: position{line: 969, col: 15, offset: 28409},
				run: (*parser).callonLBRK1,
				expr: &seqExpr{
					pos: position{line: 969, col: 15, offset: 28409},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 969, col: 15, offset: 28409},
							label: "comments",
							expr: &ruleRefExpr{
								pos:  position{line: 969, col: 24, offset: 28418},
								name: "ReservedComments",
							},
						},
						&labeledExpr{
							pos:   position{line: 969, col: 41, offset: 28435},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 969, col: 43, offset: 28437},
								name: "LBRKToken",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 969, col: 57, offset: 28451},
							expr: &ruleRefExpr{
								pos:  position{line: 969, col: 57, offset: 28451},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "LBRKToken",
			pos:  position{line: 974, col: 1, offset: 28592},
			expr: &actionExpr{
				pos: position{line: 974, col: 13, offset: 28604},
				run: (*parser).callonLBRKToken1,
				expr: &litMatcher{
					pos:        position{line: 974, col: 13, offset: 28604},
					val:        "[",
					ignoreCase: false,
					want:       "\"[\"",
				},
			},
		},
		{
			name: "RBRK",
			pos:  position{line: 978, col: 1, offset: 28647},
			expr: &actionExpr{
				pos: position{line: 978, col: 15, offset: 28661},
				run: (*parser).callonRBRK1,
				expr: &seqExpr{
					pos: position{line: 978, col: 15, offset: 28661},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 978, col: 15, offset: 28661},
							label: "comments",
							expr: &ruleRefExpr{
								pos:  position{line: 978, col: 24, offset: 28670},
								name: "ReservedComments",
							},
						},
						&labeledExpr{
							pos:   position{line: 978, col: 41, offset: 28687},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 978, col: 43, offset: 28689},
								name: "RBRKToken",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 978, col: 57, offset: 28703},
							expr: &ruleRefExpr{
								pos:  position{line: 978, col: 57, offset: 28703},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "RBRKToken",
			pos:  position{line: 983, col: 1, offset: 28844},
			expr: &actionExpr{
				pos: position{line: 983, col: 13, offset: 28856},
				run: (*parser).callonRBRKToken1,
				expr: &litMatcher{
					pos:        position{line: 983, col: 13, offset: 28856},
					val:        "]",
					ignoreCase: false,
					want:       "\"]\"",
				},
			},
		},
		{
			name: "LCUR",
			pos:  position{line: 987, col: 1, offset: 28899},
			expr: &actionExpr{
				pos: position{line: 987, col: 14, offset: 28912},
				run: (*parser).callonLCUR1,
				expr: &seqExpr{
					pos: position{line: 987, col: 14, offset: 28912},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 987, col: 14, offset: 28912},
							label: "comments",
							expr: &ruleRefExpr{
								pos:  position{line: 987, col: 23, offset: 28921},
								name: "ReservedComments",
							},
						},
						&labeledExpr{
							pos:   position{line: 987, col: 40, offset: 28938},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 987, col: 42, offset: 28940},
								name: "LCURToken",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 987, col: 56, offset: 28954},
							expr: &ruleRefExpr{
								pos:  position{line: 987, col: 56, offset: 28954},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "RCUR",
			pos:  position{line: 992, col: 1, offset: 29095},
			expr: &actionExpr{
				pos: position{line: 992, col: 8, offset: 29102},
				run: (*parser).callonRCUR1,
				expr: &seqExpr{
					pos: position{line: 992, col: 8, offset: 29102},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 992, col: 8, offset: 29102},
							label: "comments",
							expr: &ruleRefExpr{
								pos:  position{line: 992, col: 17, offset: 29111},
								name: "ReservedComments",
							},
						},
						&labeledExpr{
							pos:   position{line: 992, col: 34, offset: 29128},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 992, col: 36, offset: 29130},
								name: "RCURToken",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 992, col: 50, offset: 29144},
							expr: &ruleRefExpr{
								pos:  position{line: 992, col: 50, offset: 29144},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "LCURToken",
			pos:  position{line: 997, col: 1, offset: 29285},
			expr: &actionExpr{
				pos: position{line: 997, col: 13, offset: 29297},
				run: (*parser).callonLCURToken1,
				expr: &litMatcher{
					pos:        position{line: 997, col: 13, offset: 29297},
					val:        "{",
					ignoreCase: false,
					want:       "\"{\"",
				},
			},
		},
		{
			name: "RCURToken",
			pos:  position{line: 1000, col: 1, offset: 29339},
			expr: &choiceExpr{
				pos: position{line: 1000, col: 13, offset: 29351},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1000, col: 13, offset: 29351},
						run: (*parser).callonRCURToken2,
						expr: &litMatcher{
							pos:        position{line: 1000, col: 13, offset: 29351},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
					&throwExpr{
						pos:   position{line: 1002, col: 5, offset: 29395},
						label: "errRCUR",
					},
				},
			},
		},
		{
			name: "EQUAL",
			pos:  position{line: 1005, col: 1, offset: 29408},
			expr: &actionExpr{
				pos: position{line: 1005, col: 9, offset: 29416},
				run: (*parser).callonEQUAL1,
				expr: &seqExpr{
					pos: position{line: 1005, col: 9, offset: 29416},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1005, col: 9, offset: 29416},
							label: "comments",
							expr: &ruleRefExpr{
								pos:  position{line: 1005, col: 18, offset: 29425},
								name: "ReservedComments",
							},
						},
						&labeledExpr{
							pos:   position{line: 1005, col: 35, offset: 29442},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 1005, col: 37, offset: 29444},
								name: "EQUALToken",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1005, col: 52, offset: 29459},
							expr: &ruleRefExpr{
								pos:  position{line: 1005, col: 52, offset: 29459},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "EQUALToken",
			pos:  position{line: 1010, col: 1, offset: 29601},
			expr: &actionExpr{
				pos: position{line: 1010, col: 14, offset: 29614},
				run: (*parser).callonEQUALToken1,
				expr: &litMatcher{
					pos:        position{line: 1010, col: 14, offset: 29614},
					val:        "=",
					ignoreCase: false,
					want:       "\"=\"",
				},
			},
		},
		{
			name: "LPOINT",
			pos:  position{line: 1014, col: 1, offset: 29657},
			expr: &actionExpr{
				pos: position{line: 1014, col: 15, offset: 29671},
				run: (*parser).callonLPOINT1,
				expr: &seqExpr{
					pos: position{line: 1014, col: 15, offset: 29671},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1014, col: 15, offset: 29671},
							label: "comments",
							expr: &ruleRefExpr{
								pos:  position{line: 1014, col: 24, offset: 29680},
								name: "ReservedComments",
							},
						},
						&labeledExpr{
							pos:   position{line: 1014, col: 41, offset: 29697},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 1014, col: 43, offset: 29699},
								name: "LPOINTToken",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1014, col: 59, offset: 29715},
							expr: &ruleRefExpr{
								pos:  position{line: 1014, col: 59, offset: 29715},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "LPOINTToken",
			pos:  position{line: 1019, col: 1, offset: 29858},
			expr: &actionExpr{
				pos: position{line: 1019, col: 15, offset: 29872},
				run: (*parser).callonLPOINTToken1,
				expr: &litMatcher{
					pos:        position{line: 1019, col: 15, offset: 29872},
					val:        "<",
					ignoreCase: false,
					want:       "\"<\"",
				},
			},
		},
		{
			name: "RPOINT",
			pos:  position{line: 1023, col: 1, offset: 29915},
			expr: &actionExpr{
				pos: position{line: 1023, col: 15, offset: 29929},
				run: (*parser).callonRPOINT1,
				expr: &seqExpr{
					pos: position{line: 1023, col: 15, offset: 29929},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1023, col: 15, offset: 29929},
							label: "comments",
							expr: &ruleRefExpr{
								pos:  position{line: 1023, col: 24, offset: 29938},
								name: "ReservedComments",
							},
						},
						&labeledExpr{
							pos:   position{line: 1023, col: 41, offset: 29955},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 1023, col: 43, offset: 29957},
								name: "RPOINTToken",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1023, col: 58, offset: 29972},
							expr: &ruleRefExpr{
								pos:  position{line: 1023, col: 58, offset: 29972},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "RPOINTToken",
			pos:  position{line: 1028, col: 1, offset: 30115},
			expr: &actionExpr{
				pos: position{line: 1028, col: 15, offset: 30129},
				run: (*parser).callonRPOINTToken1,
				expr: &litMatcher{
					pos:        position{line: 1028, col: 15, offset: 30129},
					val:        ">",
					ignoreCase: false,
					want:       "\">\"",
				},
			},
		},
		{
			name: "COMMA",
			pos:  position{line: 1032, col: 1, offset: 30172},
			expr: &actionExpr{
				pos: position{line: 1032, col: 15, offset: 30186},
				run: (*parser).callonCOMMA1,
				expr: &seqExpr{
					pos: position{line: 1032, col: 15, offset: 30186},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1032, col: 15, offset: 30186},
							label: "comments",
							expr: &ruleRefExpr{
								pos:  position{line: 1032, col: 24, offset: 30195},
								name: "ReservedComments",
							},
						},
						&labeledExpr{
							pos:   position{line: 1032, col: 41, offset: 30212},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 1032, col: 43, offset: 30214},
								name: "COMMAToken",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1032, col: 58, offset: 30229},
							expr: &ruleRefExpr{
								pos:  position{line: 1032, col: 58, offset: 30229},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "COMMAToken",
			pos:  position{line: 1037, col: 1, offset: 30371},
			expr: &actionExpr{
				pos: position{line: 1037, col: 14, offset: 30384},
				run: (*parser).callonCOMMAToken1,
				expr: &litMatcher{
					pos:        position{line: 1037, col: 14, offset: 30384},
					val:        ",",
					ignoreCase: false,
					want:       "\",\"",
				},
			},
		},
		{
			name: "LPAR",
			pos:  position{line: 1041, col: 1, offset: 30427},
			expr: &actionExpr{
				pos: position{line: 1041, col: 15, offset: 30441},
				run: (*parser).callonLPAR1,
				expr: &seqExpr{
					pos: position{line: 1041, col: 15, offset: 30441},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1041, col: 15, offset: 30441},
							label: "comments",
							expr: &ruleRefExpr{
								pos:  position{line: 1041, col: 24, offset: 30450},
								name: "ReservedComments",
							},
						},
						&labeledExpr{
							pos:   position{line: 1041, col: 41, offset: 30467},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 1041, col: 43, offset: 30469},
								name: "LPARToken",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1041, col: 57, offset: 30483},
							expr: &ruleRefExpr{
								pos:  position{line: 1041, col: 57, offset: 30483},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "LPARToken",
			pos:  position{line: 1046, col: 1, offset: 30624},
			expr: &actionExpr{
				pos: position{line: 1046, col: 13, offset: 30636},
				run: (*parser).callonLPARToken1,
				expr: &litMatcher{
					pos:        position{line: 1046, col: 13, offset: 30636},
					val:        "(",
					ignoreCase: false,
					want:       "\"(\"",
				},
			},
		},
		{
			name: "RPAR",
			pos:  position{line: 1050, col: 1, offset: 30679},
			expr: &actionExpr{
				pos: position{line: 1050, col: 15, offset: 30693},
				run: (*parser).callonRPAR1,
				expr: &seqExpr{
					pos: position{line: 1050, col: 15, offset: 30693},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1050, col: 15, offset: 30693},
							label: "comments",
							expr: &ruleRefExpr{
								pos:  position{line: 1050, col: 24, offset: 30702},
								name: "ReservedComments",
							},
						},
						&labeledExpr{
							pos:   position{line: 1050, col: 41, offset: 30719},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 1050, col: 43, offset: 30721},
								name: "RPARToken",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1050, col: 57, offset: 30735},
							expr: &ruleRefExpr{
								pos:  position{line: 1050, col: 57, offset: 30735},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "RPARToken",
			pos:  position{line: 1055, col: 1, offset: 30876},
			expr: &actionExpr{
				pos: position{line: 1055, col: 13, offset: 30888},
				run: (*parser).callonRPARToken1,
				expr: &litMatcher{
					pos:        position{line: 1055, col: 13, offset: 30888},
					val:        ")",
					ignoreCase: false,
					want:       "\")\"",
				},
			},
		},
		{
			name: "COLON",
			pos:  position{line: 1059, col: 1, offset: 30931},
			expr: &actionExpr{
				pos: position{line: 1059, col: 15, offset: 30945},
				run: (*parser).callonCOLON1,
				expr: &seqExpr{
					pos: position{line: 1059, col: 15, offset: 30945},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1059, col: 15, offset: 30945},
							label: "comments",
							expr: &ruleRefExpr{
								pos:  position{line: 1059, col: 24, offset: 30954},
								name: "ReservedComments",
							},
						},
						&labeledExpr{
							pos:   position{line: 1059, col: 41, offset: 30971},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 1059, col: 43, offset: 30973},
								name: "COLONToken",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1059, col: 58, offset: 30988},
							expr: &ruleRefExpr{
								pos:  position{line: 1059, col: 58, offset: 30988},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "COLONToken",
			pos:  position{line: 1064, col: 1, offset: 31130},
			expr: &actionExpr{
				pos: position{line: 1064, col: 14, offset: 31143},
				run: (*parser).callonCOLONToken1,
				expr: &litMatcher{
					pos:        position{line: 1064, col: 14, offset: 31143},
					val:        ":",
					ignoreCase: false,
					want:       "\":\"",
				},
			},
		},
		{
			name: "DefinitionStart",
			pos:  position{line: 1068, col: 1, offset: 31186},
			expr: &choiceExpr{
				pos: position{line: 1068, col: 19, offset: 31204},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 1068, col: 19, offset: 31204},
						name: "STRUCT",
					},
					&ruleRefExpr{
						pos:  position{line: 1068, col: 28, offset: 31213},
						name: "UNION",
					},
					&ruleRefExpr{
						pos:  position{line: 1068, col: 36, offset: 31221},
						name: "EXCEPTION",
					},
					&ruleRefExpr{
						pos:  position{line: 1068, col: 48, offset: 31233},
						name: "ENUM",
					},
					&ruleRefExpr{
						pos:  position{line: 1068, col: 55, offset: 31240},
						name: "SERVICE",
					},
					&ruleRefExpr{
						pos:  position{line: 1068, col: 65, offset: 31250},
						name: "CONST",
					},
					&ruleRefExpr{
						pos:  position{line: 1068, col: 73, offset: 31258},
						name: "TYPEDEF",
					},
				},
			},
		},
		{
			name: "ErrFieldIndex",
			pos:  position{line: 1070, col: 1, offset: 31267},
			expr: &actionExpr{
				pos: position{line: 1070, col: 17, offset: 31283},
				run: (*parser).callonErrFieldIndex1,
				expr: &seqExpr{
					pos: position{line: 1070, col: 17, offset: 31283},
					exprs: []any{
						&stateCodeExpr{
							pos: position{line: 1070, col: 17, offset: 31283},
							run: (*parser).callonErrFieldIndex3,
						},
						&zeroOrMoreExpr{
							pos: position{line: 1072, col: 3, offset: 31319},
							expr: &seqExpr{
								pos: position{line: 1072, col: 4, offset: 31320},
								exprs: []any{
									&notExpr{
										pos: position{line: 1072, col: 4, offset: 31320},
										expr: &charClassMatcher{
											pos:        position{line: 1072, col: 6, offset: 31322},
											val:        "[:\\r\\n]",
											chars:      []rune{':', '\r', '\n'},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&anyMatcher{
										line: 1072, col: 15, offset: 31331,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ErrStructField",
			pos:  position{line: 1078, col: 1, offset: 31442},
			expr: &actionExpr{
				pos: position{line: 1078, col: 18, offset: 31459},
				run: (*parser).callonErrStructField1,
				expr: &seqExpr{
					pos: position{line: 1078, col: 18, offset: 31459},
					exprs: []any{
						&stateCodeExpr{
							pos: position{line: 1078, col: 18, offset: 31459},
							run: (*parser).callonErrStructField3,
						},
						&zeroOrMoreExpr{
							pos: position{line: 1080, col: 3, offset: 31496},
							expr: &seqExpr{
								pos: position{line: 1080, col: 5, offset: 31498},
								exprs: []any{
									&notExpr{
										pos: position{line: 1080, col: 5, offset: 31498},
										expr: &choiceExpr{
											pos: position{line: 1080, col: 7, offset: 31500},
											alternatives: []any{
												&ruleRefExpr{
													pos:  position{line: 1080, col: 7, offset: 31500},
													name: "Field",
												},
												&seqExpr{
													pos: position{line: 1080, col: 16, offset: 31509},
													exprs: []any{
														&ruleRefExpr{
															pos:  position{line: 1080, col: 16, offset: 31509},
															name: "ReservedComments",
														},
														&litMatcher{
															pos:        position{line: 1080, col: 33, offset: 31526},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
														&zeroOrMoreExpr{
															pos: position{line: 1080, col: 37, offset: 31530},
															expr: &ruleRefExpr{
																pos:  position{line: 1080, col: 37, offset: 31530},
																name: "Indent",
															},
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 1080, col: 48, offset: 31541},
													name: "DefinitionStart",
												},
											},
										},
									},
									&anyMatcher{
										line: 1080, col: 66, offset: 31559,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ErrStructIdentifier",
			pos:  position{line: 1084, col: 1, offset: 31621},
			expr: &actionExpr{
				pos: position{line: 1084, col: 23, offset: 31643},
				run: (*parser).callonErrStructIdentifier1,
				expr: &seqExpr{
					pos: position{line: 1084, col: 23, offset: 31643},
					exprs: []any{
						&stateCodeExpr{
							pos: position{line: 1084, col: 23, offset: 31643},
							run: (*parser).callonErrStructIdentifier3,
						},
						&zeroOrMoreExpr{
							pos: position{line: 1086, col: 3, offset: 31685},
							expr: &seqExpr{
								pos: position{line: 1086, col: 5, offset: 31687},
								exprs: []any{
									&notExpr{
										pos: position{line: 1086, col: 5, offset: 31687},
										expr: &litMatcher{
											pos:        position{line: 1086, col: 6, offset: 31688},
											val:        "{",
											ignoreCase: false,
											want:       "\"{\"",
										},
									},
									&anyMatcher{
										line: 1086, col: 10, offset: 31692,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ErrStructRCUR",
			pos:  position{line: 1092, col: 1, offset: 31877},
			expr: &actionExpr{
				pos: position{line: 1092, col: 17, offset: 31893},
				run: (*parser).callonErrStructRCUR1,
				expr: &seqExpr{
					pos: position{line: 1092, col: 17, offset: 31893},
					exprs: []any{
						&stateCodeExpr{
							pos: position{line: 1092, col: 17, offset: 31893},
							run: (*parser).callonErrStructRCUR3,
						},
						&zeroOrMoreExpr{
							pos: position{line: 1094, col: 3, offset: 31934},
							expr: &seqExpr{
								pos: position{line: 1094, col: 5, offset: 31936},
								exprs: []any{
									&notExpr{
										pos: position{line: 1094, col: 5, offset: 31936},
										expr: &ruleRefExpr{
											pos:  position{line: 1094, col: 6, offset: 31937},
											name: "DefinitionStart",
										},
									},
									&anyMatcher{
										line: 1094, col: 22, offset: 31953,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ErrStructLCUR",
			pos:  position{line: 1098, col: 1, offset: 32134},
			expr: &actionExpr{
				pos: position{line: 1098, col: 17, offset: 32150},
				run: (*parser).callonErrStructLCUR1,
				expr: &seqExpr{
					pos: position{line: 1098, col: 17, offset: 32150},
					exprs: []any{
						&stateCodeExpr{
							pos: position{line: 1098, col: 17, offset: 32150},
							run: (*parser).callonErrStructLCUR3,
						},
						&zeroOrMoreExpr{
							pos: position{line: 1100, col: 3, offset: 32191},
							expr: &seqExpr{
								pos: position{line: 1100, col: 5, offset: 32193},
								exprs: []any{
									&notExpr{
										pos: position{line: 1100, col: 5, offset: 32193},
										expr: &litMatcher{
											pos:        position{line: 1100, col: 6, offset: 32194},
											val:        "}",
											ignoreCase: false,
											want:       "\"}\"",
										},
									},
									&anyMatcher{
										line: 1100, col: 10, offset: 32198,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ErrUnionIdentifier",
			pos:  position{line: 1106, col: 1, offset: 32327},
			expr: &actionExpr{
				pos: position{line: 1106, col: 22, offset: 32348},
				run: (*parser).callonErrUnionIdentifier1,
				expr: &seqExpr{
					pos: position{line: 1106, col: 22, offset: 32348},
					exprs: []any{
						&stateCodeExpr{
							pos: position{line: 1106, col: 22, offset: 32348},
							run: (*parser).callonErrUnionIdentifier3,
						},
						&zeroOrMoreExpr{
							pos: position{line: 1108, col: 3, offset: 32389},
							expr: &seqExpr{
								pos: position{line: 1108, col: 5, offset: 32391},
								exprs: []any{
									&notExpr{
										pos: position{line: 1108, col: 5, offset: 32391},
										expr: &litMatcher{
											pos:        position{line: 1108, col: 6, offset: 32392},
											val:        "{",
											ignoreCase: false,
											want:       "\"{\"",
										},
									},
									&anyMatcher{
										line: 1108, col: 10, offset: 32396,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ErrUnionRCUR",
			pos:  position{line: 1114, col: 1, offset: 32541},
			expr: &actionExpr{
				pos: position{line: 1114, col: 16, offset: 32556},
				run: (*parser).callonErrUnionRCUR1,
				expr: &seqExpr{
					pos: position{line: 1114, col: 16, offset: 32556},
					exprs: []any{
						&stateCodeExpr{
							pos: position{line: 1114, col: 16, offset: 32556},
							run: (*parser).callonErrUnionRCUR3,
						},
						&zeroOrMoreExpr{
							pos: position{line: 1116, col: 3, offset: 32596},
							expr: &seqExpr{
								pos: position{line: 1116, col: 5, offset: 32598},
								exprs: []any{
									&notExpr{
										pos: position{line: 1116, col: 5, offset: 32598},
										expr: &ruleRefExpr{
											pos:  position{line: 1116, col: 6, offset: 32599},
											name: "DefinitionStart",
										},
									},
									&anyMatcher{
										line: 1116, col: 22, offset: 32615,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ErrUnionLCUR",
			pos:  position{line: 1120, col: 1, offset: 32661},
			expr: &actionExpr{
				pos: position{line: 1120, col: 16, offset: 32676},
				run: (*parser).callonErrUnionLCUR1,
				expr: &seqExpr{
					pos: position{line: 1120, col: 16, offset: 32676},
					exprs: []any{
						&stateCodeExpr{
							pos: position{line: 1120, col: 16, offset: 32676},
							run: (*parser).callonErrUnionLCUR3,
						},
						&zeroOrMoreExpr{
							pos: position{line: 1122, col: 3, offset: 32716},
							expr: &seqExpr{
								pos: position{line: 1122, col: 5, offset: 32718},
								exprs: []any{
									&notExpr{
										pos: position{line: 1122, col: 5, offset: 32718},
										expr: &litMatcher{
											pos:        position{line: 1122, col: 6, offset: 32719},
											val:        "}",
											ignoreCase: false,
											want:       "\"}\"",
										},
									},
									&anyMatcher{
										line: 1122, col: 10, offset: 32723,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ErrUnionField",
			pos:  position{line: 1126, col: 1, offset: 32822},
			expr: &actionExpr{
				pos: position{line: 1126, col: 17, offset: 32838},
				run: (*parser).callonErrUnionField1,
				expr: &seqExpr{
					pos: position{line: 1126, col: 17, offset: 32838},
					exprs: []any{
						&stateCodeExpr{
							pos: position{line: 1126, col: 17, offset: 32838},
							run: (*parser).callonErrUnionField3,
						},
						&zeroOrMoreExpr{
							pos: position{line: 1128, col: 3, offset: 32874},
							expr: &seqExpr{
								pos: position{line: 1128, col: 5, offset: 32876},
								exprs: []any{
									&notExpr{
										pos: position{line: 1128, col: 5, offset: 32876},
										expr: &choiceExpr{
											pos: position{line: 1128, col: 7, offset: 32878},
											alternatives: []any{
												&ruleRefExpr{
													pos:  position{line: 1128, col: 7, offset: 32878},
													name: "Field",
												},
												&seqExpr{
													pos: position{line: 1128, col: 16, offset: 32887},
													exprs: []any{
														&ruleRefExpr{
															pos:  position{line: 1128, col: 16, offset: 32887},
															name: "ReservedComments",
														},
														&litMatcher{
															pos:        position{line: 1128, col: 33, offset: 32904},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
														&zeroOrMoreExpr{
															pos: position{line: 1128, col: 37, offset: 32908},
															expr: &ruleRefExpr{
																pos:  position{line: 1128, col: 37, offset: 32908},
																name: "Indent",
															},
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 1128, col: 48, offset: 32919},
													name: "DefinitionStart",
												},
											},
										},
									},
									&anyMatcher{
										line: 1128, col: 66, offset: 32937,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ErrExceptionIdentifier",
			pos:  position{line: 1134, col: 1, offset: 33013},
			expr: &actionExpr{
				pos: position{line: 1134, col: 26, offset: 33038},
				run: (*parser).callonErrExceptionIdentifier1,
				expr: &seqExpr{
					pos: position{line: 1134, col: 26, offset: 33038},
					exprs: []any{
						&stateCodeExpr{
							pos: position{line: 1134, col: 26, offset: 33038},
							run: (*parser).callonErrExceptionIdentifier3,
						},
						&zeroOrMoreExpr{
							pos: position{line: 1136, col: 3, offset: 33083},
							expr: &seqExpr{
								pos: position{line: 1136, col: 5, offset: 33085},
								exprs: []any{
									&notExpr{
										pos: position{line: 1136, col: 5, offset: 33085},
										expr: &litMatcher{
											pos:        position{line: 1136, col: 6, offset: 33086},
											val:        "{",
											ignoreCase: false,
											want:       "\"{\"",
										},
									},
									&anyMatcher{
										line: 1136, col: 10, offset: 33090,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ErrExceptionRCUR",
			pos:  position{line: 1142, col: 1, offset: 33235},
			expr: &actionExpr{
				pos: position{line: 1142, col: 20, offset: 33254},
				run: (*parser).callonErrExceptionRCUR1,
				expr: &seqExpr{
					pos: position{line: 1142, col: 20, offset: 33254},
					exprs: []any{
						&stateCodeExpr{
							pos: position{line: 1142, col: 20, offset: 33254},
							run: (*parser).callonErrExceptionRCUR3,
						},
						&zeroOrMoreExpr{
							pos: position{line: 1144, col: 3, offset: 33298},
							expr: &seqExpr{
								pos: position{line: 1144, col: 5, offset: 33300},
								exprs: []any{
									&notExpr{
										pos: position{line: 1144, col: 5, offset: 33300},
										expr: &ruleRefExpr{
											pos:  position{line: 1144, col: 6, offset: 33301},
											name: "DefinitionStart",
										},
									},
									&anyMatcher{
										line: 1144, col: 22, offset: 33317,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ErrExceptionLCUR",
			pos:  position{line: 1148, col: 1, offset: 33363},
			expr: &actionExpr{
				pos: position{line: 1148, col: 20, offset: 33382},
				run: (*parser).callonErrExceptionLCUR1,
				expr: &seqExpr{
					pos: position{line: 1148, col: 20, offset: 33382},
					exprs: []any{
						&stateCodeExpr{
							pos: position{line: 1148, col: 20, offset: 33382},
							run: (*parser).callonErrExceptionLCUR3,
						},
						&zeroOrMoreExpr{
							pos: position{line: 1150, col: 3, offset: 33426},
							expr: &seqExpr{
								pos: position{line: 1150, col: 5, offset: 33428},
								exprs: []any{
									&notExpr{
										pos: position{line: 1150, col: 5, offset: 33428},
										expr: &litMatcher{
											pos:        position{line: 1150, col: 6, offset: 33429},
											val:        "}",
											ignoreCase: false,
											want:       "\"}\"",
										},
									},
									&anyMatcher{
										line: 1150, col: 10, offset: 33433,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ErrExceptionField",
			pos:  position{line: 1154, col: 1, offset: 33552},
			expr: &actionExpr{
				pos: position{line: 1154, col: 21, offset: 33572},
				run: (*parser).callonErrExceptionField1,
				expr: &seqExpr{
					pos: position{line: 1154, col: 21, offset: 33572},
					exprs: []any{
						&stateCodeExpr{
							pos: position{line: 1154, col: 21, offset: 33572},
							run: (*parser).callonErrExceptionField3,
						},
						&zeroOrMoreExpr{
							pos: position{line: 1156, col: 3, offset: 33612},
							expr: &seqExpr{
								pos: position{line: 1156, col: 5, offset: 33614},
								exprs: []any{
									&notExpr{
										pos: position{line: 1156, col: 5, offset: 33614},
										expr: &choiceExpr{
											pos: position{line: 1156, col: 7, offset: 33616},
											alternatives: []any{
												&ruleRefExpr{
													pos:  position{line: 1156, col: 7, offset: 33616},
													name: "Field",
												},
												&seqExpr{
													pos: position{line: 1156, col: 16, offset: 33625},
													exprs: []any{
														&ruleRefExpr{
															pos:  position{line: 1156, col: 16, offset: 33625},
															name: "ReservedComments",
														},
														&litMatcher{
															pos:        position{line: 1156, col: 33, offset: 33642},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
														&zeroOrMoreExpr{
															pos: position{line: 1156, col: 37, offset: 33646},
															expr: &ruleRefExpr{
																pos:  position{line: 1156, col: 37, offset: 33646},
																name: "Indent",
															},
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 1156, col: 48, offset: 33657},
													name: "DefinitionStart",
												},
											},
										},
									},
									&anyMatcher{
										line: 1156, col: 66, offset: 33675,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ErrEnumIdentifier",
			pos:  position{line: 1162, col: 1, offset: 33746},
			expr: &actionExpr{
				pos: position{line: 1162, col: 21, offset: 33766},
				run: (*parser).callonErrEnumIdentifier1,
				expr: &seqExpr{
					pos: position{line: 1162, col: 21, offset: 33766},
					exprs: []any{
						&stateCodeExpr{
							pos: position{line: 1162, col: 21, offset: 33766},
							run: (*parser).callonErrEnumIdentifier3,
						},
						&zeroOrMoreExpr{
							pos: position{line: 1164, col: 3, offset: 33806},
							expr: &seqExpr{
								pos: position{line: 1164, col: 5, offset: 33808},
								exprs: []any{
									&notExpr{
										pos: position{line: 1164, col: 5, offset: 33808},
										expr: &litMatcher{
											pos:        position{line: 1164, col: 6, offset: 33809},
											val:        "{",
											ignoreCase: false,
											want:       "\"{\"",
										},
									},
									&anyMatcher{
										line: 1164, col: 10, offset: 33813,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ErrEnumRCUR",
			pos:  position{line: 1170, col: 1, offset: 33963},
			expr: &actionExpr{
				pos: position{line: 1170, col: 15, offset: 33977},
				run: (*parser).callonErrEnumRCUR1,
				expr: &seqExpr{
					pos: position{line: 1170, col: 15, offset: 33977},
					exprs: []any{
						&stateCodeExpr{
							pos: position{line: 1170, col: 15, offset: 33977},
							run: (*parser).callonErrEnumRCUR3,
						},
						&zeroOrMoreExpr{
							pos: position{line: 1172, col: 3, offset: 34016},
							expr: &seqExpr{
								pos: position{line: 1172, col: 5, offset: 34018},
								exprs: []any{
									&notExpr{
										pos: position{line: 1172, col: 5, offset: 34018},
										expr: &ruleRefExpr{
											pos:  position{line: 1172, col: 6, offset: 34019},
											name: "DefinitionStart",
										},
									},
									&anyMatcher{
										line: 1172, col: 22, offset: 34035,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ErrEnumLCUR",
			pos:  position{line: 1176, col: 1, offset: 34081},
			expr: &actionExpr{
				pos: position{line: 1176, col: 15, offset: 34095},
				run: (*parser).callonErrEnumLCUR1,
				expr: &seqExpr{
					pos: position{line: 1176, col: 15, offset: 34095},
					exprs: []any{
						&stateCodeExpr{
							pos: position{line: 1176, col: 15, offset: 34095},
							run: (*parser).callonErrEnumLCUR3,
						},
						&zeroOrMoreExpr{
							pos: position{line: 1178, col: 3, offset: 34134},
							expr: &seqExpr{
								pos: position{line: 1178, col: 5, offset: 34136},
								exprs: []any{
									&notExpr{
										pos: position{line: 1178, col: 5, offset: 34136},
										expr: &litMatcher{
											pos:        position{line: 1178, col: 6, offset: 34137},
											val:        "}",
											ignoreCase: false,
											want:       "\"}\"",
										},
									},
									&anyMatcher{
										line: 1178, col: 10, offset: 34141,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ErrEnumValue",
			pos:  position{line: 1182, col: 1, offset: 34260},
			expr: &actionExpr{
				pos: position{line: 1182, col: 16, offset: 34275},
				run: (*parser).callonErrEnumValue1,
				expr: &seqExpr{
					pos: position{line: 1182, col: 16, offset: 34275},
					exprs: []any{
						&stateCodeExpr{
							pos: position{line: 1182, col: 16, offset: 34275},
							run: (*parser).callonErrEnumValue3,
						},
						&zeroOrMoreExpr{
							pos: position{line: 1184, col: 3, offset: 34310},
							expr: &seqExpr{
								pos: position{line: 1184, col: 5, offset: 34312},
								exprs: []any{
									&notExpr{
										pos: position{line: 1184, col: 5, offset: 34312},
										expr: &choiceExpr{
											pos: position{line: 1184, col: 7, offset: 34314},
											alternatives: []any{
												&ruleRefExpr{
													pos:  position{line: 1184, col: 7, offset: 34314},
													name: "Field",
												},
												&seqExpr{
													pos: position{line: 1184, col: 16, offset: 34323},
													exprs: []any{
														&ruleRefExpr{
															pos:  position{line: 1184, col: 16, offset: 34323},
															name: "ReservedComments",
														},
														&litMatcher{
															pos:        position{line: 1184, col: 33, offset: 34340},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
														&zeroOrMoreExpr{
															pos: position{line: 1184, col: 37, offset: 34344},
															expr: &ruleRefExpr{
																pos:  position{line: 1184, col: 37, offset: 34344},
																name: "Indent",
															},
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 1184, col: 48, offset: 34355},
													name: "DefinitionStart",
												},
											},
										},
									},
									&anyMatcher{
										line: 1184, col: 66, offset: 34373,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ErrEnumValueIntConstant",
			pos:  position{line: 1188, col: 1, offset: 34439},
			expr: &actionExpr{
				pos: position{line: 1188, col: 27, offset: 34465},
				run: (*parser).callonErrEnumValueIntConstant1,
				expr: &seqExpr{
					pos: position{line: 1188, col: 27, offset: 34465},
					exprs: []any{
						&stateCodeExpr{
							pos: position{line: 1188, col: 27, offset: 34465},
							run: (*parser).callonErrEnumValueIntConstant3,
						},
						&zeroOrMoreExpr{
							pos: position{line: 1190, col: 3, offset: 34511},
							expr: &seqExpr{
								pos: position{line: 1190, col: 5, offset: 34513},
								exprs: []any{
									&notExpr{
										pos: position{line: 1190, col: 5, offset: 34513},
										expr: &ruleRefExpr{
											pos:  position{line: 1190, col: 7, offset: 34515},
											name: "CarriageReturnLineFeed",
										},
									},
									&anyMatcher{
										line: 1190, col: 32, offset: 34540,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ErrTypedefIdentifier",
			pos:  position{line: 1196, col: 1, offset: 34623},
			expr: &actionExpr{
				pos: position{line: 1196, col: 24, offset: 34646},
				run: (*parser).callonErrTypedefIdentifier1,
				expr: &seqExpr{
					pos: position{line: 1196, col: 24, offset: 34646},
					exprs: []any{
						&stateCodeExpr{
							pos: position{line: 1196, col: 24, offset: 34646},
							run: (*parser).callonErrTypedefIdentifier3,
						},
						&zeroOrMoreExpr{
							pos: position{line: 1198, col: 3, offset: 34689},
							expr: &seqExpr{
								pos: position{line: 1198, col: 5, offset: 34691},
								exprs: []any{
									&notExpr{
										pos: position{line: 1198, col: 5, offset: 34691},
										expr: &ruleRefExpr{
											pos:  position{line: 1198, col: 7, offset: 34693},
											name: "CarriageReturnLineFeed",
										},
									},
									&anyMatcher{
										line: 1198, col: 31, offset: 34717,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ErrConstIdentifier",
			pos:  position{line: 1205, col: 1, offset: 34801},
			expr: &actionExpr{
				pos: position{line: 1205, col: 22, offset: 34822},
				run: (*parser).callonErrConstIdentifier1,
				expr: &seqExpr{
					pos: position{line: 1205, col: 22, offset: 34822},
					exprs: []any{
						&stateCodeExpr{
							pos: position{line: 1205, col: 22, offset: 34822},
							run: (*parser).callonErrConstIdentifier3,
						},
						&zeroOrMoreExpr{
							pos: position{line: 1207, col: 3, offset: 34863},
							expr: &seqExpr{
								pos: position{line: 1207, col: 4, offset: 34864},
								exprs: []any{
									&notExpr{
										pos: position{line: 1207, col: 4, offset: 34864},
										expr: &ruleRefExpr{
											pos:  position{line: 1207, col: 5, offset: 34865},
											name: "EQUAL",
										},
									},
									&anyMatcher{
										line: 1207, col: 11, offset: 34871,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ErrConstMissingValue",
			pos:  position{line: 1213, col: 1, offset: 34946},
			expr: &actionExpr{
				pos: position{line: 1213, col: 24, offset: 34969},
				run: (*parser).callonErrConstMissingValue1,
				expr: &seqExpr{
					pos: position{line: 1213, col: 24, offset: 34969},
					exprs: []any{
						&stateCodeExpr{
							pos: position{line: 1213, col: 24, offset: 34969},
							run: (*parser).callonErrConstMissingValue3,
						},
						&zeroOrMoreExpr{
							pos: position{line: 1215, col: 3, offset: 35012},
							expr: &seqExpr{
								pos: position{line: 1215, col: 4, offset: 35013},
								exprs: []any{
									&notExpr{
										pos: position{line: 1215, col: 4, offset: 35013},
										expr: &charClassMatcher{
											pos:        position{line: 1215, col: 5, offset: 35014},
											val:        "[\\r\\n]",
											chars:      []rune{'\r', '\n'},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&anyMatcher{
										line: 1215, col: 12, offset: 35021,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ErrConstConstValue",
			pos:  position{line: 1219, col: 1, offset: 35087},
			expr: &actionExpr{
				pos: position{line: 1219, col: 22, offset: 35108},
				run: (*parser).callonErrConstConstValue1,
				expr: &seqExpr{
					pos: position{line: 1219, col: 22, offset: 35108},
					exprs: []any{
						&stateCodeExpr{
							pos: position{line: 1219, col: 22, offset: 35108},
							run: (*parser).callonErrConstConstValue3,
						},
						&zeroOrMoreExpr{
							pos: position{line: 1221, col: 3, offset: 35149},
							expr: &seqExpr{
								pos: position{line: 1221, col: 4, offset: 35150},
								exprs: []any{
									&notExpr{
										pos: position{line: 1221, col: 4, offset: 35150},
										expr: &charClassMatcher{
											pos:        position{line: 1221, col: 5, offset: 35151},
											val:        "[\\r\\n]",
											chars:      []rune{'\r', '\n'},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&anyMatcher{
										line: 1221, col: 12, offset: 35158,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ErrServiceIdentifier",
			pos:  position{line: 1227, col: 1, offset: 35236},
			expr: &actionExpr{
				pos: position{line: 1227, col: 24, offset: 35259},
				run: (*parser).callonErrServiceIdentifier1,
				expr: &seqExpr{
					pos: position{line: 1227, col: 24, offset: 35259},
					exprs: []any{
						&stateCodeExpr{
							pos: position{line: 1227, col: 24, offset: 35259},
							run: (*parser).callonErrServiceIdentifier3,
						},
						&zeroOrMoreExpr{
							pos: position{line: 1229, col: 3, offset: 35302},
							expr: &seqExpr{
								pos: position{line: 1229, col: 5, offset: 35304},
								exprs: []any{
									&notExpr{
										pos: position{line: 1229, col: 5, offset: 35304},
										expr: &litMatcher{
											pos:        position{line: 1229, col: 6, offset: 35305},
											val:        "{",
											ignoreCase: false,
											want:       "\"{\"",
										},
									},
									&anyMatcher{
										line: 1229, col: 10, offset: 35309,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ErrServiceRCUR",
			pos:  position{line: 1235, col: 1, offset: 35454},
			expr: &actionExpr{
				pos: position{line: 1235, col: 18, offset: 35471},
				run: (*parser).callonErrServiceRCUR1,
				expr: &seqExpr{
					pos: position{line: 1235, col: 18, offset: 35471},
					exprs: []any{
						&stateCodeExpr{
							pos: position{line: 1235, col: 18, offset: 35471},
							run: (*parser).callonErrServiceRCUR3,
						},
						&zeroOrMoreExpr{
							pos: position{line: 1237, col: 3, offset: 35513},
							expr: &seqExpr{
								pos: position{line: 1237, col: 5, offset: 35515},
								exprs: []any{
									&notExpr{
										pos: position{line: 1237, col: 5, offset: 35515},
										expr: &ruleRefExpr{
											pos:  position{line: 1237, col: 6, offset: 35516},
											name: "DefinitionStart",
										},
									},
									&anyMatcher{
										line: 1237, col: 22, offset: 35532,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ErrServiceFunction",
			pos:  position{line: 1241, col: 1, offset: 35578},
			expr: &actionExpr{
				pos: position{line: 1241, col: 23, offset: 35600},
				run: (*parser).callonErrServiceFunction1,
				expr: &seqExpr{
					pos: position{line: 1241, col: 23, offset: 35600},
					exprs: []any{
						&stateCodeExpr{
							pos: position{line: 1241, col: 23, offset: 35600},
							run: (*parser).callonErrServiceFunction3,
						},
						&zeroOrMoreExpr{
							pos: position{line: 1243, col: 3, offset: 35641},
							expr: &seqExpr{
								pos: position{line: 1243, col: 5, offset: 35643},
								exprs: []any{
									&notExpr{
										pos: position{line: 1243, col: 5, offset: 35643},
										expr: &charClassMatcher{
											pos:        position{line: 1243, col: 6, offset: 35644},
											val:        "[\\r\\n]",
											chars:      []rune{'\r', '\n'},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&anyMatcher{
										line: 1243, col: 13, offset: 35651,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ErrFunctionIdentifier",
			pos:  position{line: 1248, col: 1, offset: 35727},
			expr: &actionExpr{
				pos: position{line: 1248, col: 25, offset: 35751},
				run: (*parser).callonErrFunctionIdentifier1,
				expr: &seqExpr{
					pos: position{line: 1248, col: 25, offset: 35751},
					exprs: []any{
						&stateCodeExpr{
							pos: position{line: 1248, col: 25, offset: 35751},
							run: (*parser).callonErrFunctionIdentifier3,
						},
						&zeroOrMoreExpr{
							pos: position{line: 1250, col: 3, offset: 35795},
							expr: &seqExpr{
								pos: position{line: 1250, col: 5, offset: 35797},
								exprs: []any{
									&notExpr{
										pos: position{line: 1250, col: 5, offset: 35797},
										expr: &litMatcher{
											pos:        position{line: 1250, col: 6, offset: 35798},
											val:        "(",
											ignoreCase: false,
											want:       "\"(\"",
										},
									},
									&anyMatcher{
										line: 1250, col: 10, offset: 35802,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ErrFunctionArgument",
			pos:  position{line: 1256, col: 1, offset: 35980},
			expr: &actionExpr{
				pos: position{line: 1256, col: 23, offset: 36002},
				run: (*parser).callonErrFunctionArgument1,
				expr: &seqExpr{
					pos: position{line: 1256, col: 23, offset: 36002},
					exprs: []any{
						&stateCodeExpr{
							pos: position{line: 1256, col: 23, offset: 36002},
							run: (*parser).callonErrFunctionArgument3,
						},
						&zeroOrMoreExpr{
							pos: position{line: 1258, col: 3, offset: 36044},
							expr: &seqExpr{
								pos: position{line: 1258, col: 5, offset: 36046},
								exprs: []any{
									&notExpr{
										pos: position{line: 1258, col: 5, offset: 36046},
										expr: &charClassMatcher{
											pos:        position{line: 1258, col: 6, offset: 36047},
											val:        "[,;)\\r\\n]",
											chars:      []rune{',', ';', ')', '\r', '\n'},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&anyMatcher{
										line: 1258, col: 16, offset: 36057,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ErrLiteral1MissingRight",
			pos:  position{line: 1265, col: 1, offset: 36137},
			expr: &actionExpr{
				pos: position{line: 1265, col: 27, offset: 36163},
				run: (*parser).callonErrLiteral1MissingRight1,
				expr: &seqExpr{
					pos: position{line: 1265, col: 27, offset: 36163},
					exprs: []any{
						&stateCodeExpr{
							pos: position{line: 1265, col: 27, offset: 36163},
							run: (*parser).callonErrLiteral1MissingRight3,
						},
						&zeroOrMoreExpr{
							pos: position{line: 1267, col: 3, offset: 36209},
							expr: &seqExpr{
								pos: position{line: 1267, col: 5, offset: 36211},
								exprs: []any{
									&notExpr{
										pos: position{line: 1267, col: 5, offset: 36211},
										expr: &charClassMatcher{
											pos:        position{line: 1267, col: 6, offset: 36212},
											val:        "[\\r\\n]",
											chars:      []rune{'\r', '\n'},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&anyMatcher{
										line: 1267, col: 13, offset: 36219,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ErrLiteral1",
			pos:  position{line: 1271, col: 1, offset: 36338},
			expr: &actionExpr{
				pos: position{line: 1271, col: 15, offset: 36352},
				run: (*parser).callonErrLiteral11,
				expr: &seqExpr{
					pos: position{line: 1271, col: 15, offset: 36352},
					exprs: []any{
						&stateCodeExpr{
							pos: position{line: 1271, col: 15, offset: 36352},
							run: (*parser).callonErrLiteral13,
						},
						&zeroOrMoreExpr{
							pos: position{line: 1273, col: 3, offset: 36386},
							expr: &seqExpr{
								pos: position{line: 1273, col: 5, offset: 36388},
								exprs: []any{
									&notExpr{
										pos: position{line: 1273, col: 5, offset: 36388},
										expr: &charClassMatcher{
											pos:        position{line: 1273, col: 6, offset: 36389},
											val:        "[\\r\\n]",
											chars:      []rune{'\r', '\n'},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&anyMatcher{
										line: 1273, col: 13, offset: 36396,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ErrLiteral2MissingRight",
			pos:  position{line: 1277, col: 1, offset: 36515},
			expr: &actionExpr{
				pos: position{line: 1277, col: 27, offset: 36541},
				run: (*parser).callonErrLiteral2MissingRight1,
				expr: &seqExpr{
					pos: position{line: 1277, col: 27, offset: 36541},
					exprs: []any{
						&stateCodeExpr{
							pos: position{line: 1277, col: 27, offset: 36541},
							run: (*parser).callonErrLiteral2MissingRight3,
						},
						&zeroOrMoreExpr{
							pos: position{line: 1279, col: 3, offset: 36587},
							expr: &seqExpr{
								pos: position{line: 1279, col: 5, offset: 36589},
								exprs: []any{
									&notExpr{
										pos: position{line: 1279, col: 5, offset: 36589},
										expr: &charClassMatcher{
											pos:        position{line: 1279, col: 6, offset: 36590},
											val:        "[\\r\\n]",
											chars:      []rune{'\r', '\n'},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&anyMatcher{
										line: 1279, col: 13, offset: 36597,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ErrLiteral2",
			pos:  position{line: 1283, col: 1, offset: 36716},
			expr: &actionExpr{
				pos: position{line: 1283, col: 15, offset: 36730},
				run: (*parser).callonErrLiteral21,
				expr: &seqExpr{
					pos: position{line: 1283, col: 15, offset: 36730},
					exprs: []any{
						&stateCodeExpr{
							pos: position{line: 1283, col: 15, offset: 36730},
							run: (*parser).callonErrLiteral23,
						},
						&zeroOrMoreExpr{
							pos: position{line: 1285, col: 3, offset: 36764},
							expr: &seqExpr{
								pos: position{line: 1285, col: 5, offset: 36766},
								exprs: []any{
									&notExpr{
										pos: position{line: 1285, col: 5, offset: 36766},
										expr: &charClassMatcher{
											pos:        position{line: 1285, col: 6, offset: 36767},
											val:        "[\\r\\n]",
											chars:      []rune{'\r', '\n'},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&anyMatcher{
										line: 1285, col: 13, offset: 36774,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ErrConst",
			pos:  position{line: 1289, col: 1, offset: 36893},
			expr: &actionExpr{
				pos: position{line: 1289, col: 12, offset: 36904},
				run: (*parser).callonErrConst1,
				expr: &seqExpr{
					pos: position{line: 1289, col: 12, offset: 36904},
					exprs: []any{
						&stateCodeExpr{
							pos: position{line: 1289, col: 12, offset: 36904},
							run: (*parser).callonErrConst3,
						},
						&zeroOrMoreExpr{
							pos: position{line: 1291, col: 3, offset: 36935},
							expr: &seqExpr{
								pos: position{line: 1291, col: 4, offset: 36936},
								exprs: []any{
									&notExpr{
										pos: position{line: 1291, col: 4, offset: 36936},
										expr: &charClassMatcher{
											pos:        position{line: 1291, col: 5, offset: 36937},
											val:        "[\\r\\n]",
											chars:      []rune{'\r', '\n'},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&anyMatcher{
										line: 1291, col: 12, offset: 36944,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ErrTypedef",
			pos:  position{line: 1295, col: 1, offset: 37045},
			expr: &actionExpr{
				pos: position{line: 1295, col: 14, offset: 37058},
				run: (*parser).callonErrTypedef1,
				expr: &seqExpr{
					pos: position{line: 1295, col: 14, offset: 37058},
					exprs: []any{
						&stateCodeExpr{
							pos: position{line: 1295, col: 14, offset: 37058},
							run: (*parser).callonErrTypedef3,
						},
						&zeroOrMoreExpr{
							pos: position{line: 1297, col: 3, offset: 37091},
							expr: &seqExpr{
								pos: position{line: 1297, col: 4, offset: 37092},
								exprs: []any{
									&notExpr{
										pos: position{line: 1297, col: 4, offset: 37092},
										expr: &charClassMatcher{
											pos:        position{line: 1297, col: 5, offset: 37093},
											val:        "[\\r\\n]",
											chars:      []rune{'\r', '\n'},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&anyMatcher{
										line: 1297, col: 12, offset: 37100,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ErrEnum",
			pos:  position{line: 1302, col: 1, offset: 37243},
			expr: &actionExpr{
				pos: position{line: 1302, col: 11, offset: 37253},
				run: (*parser).callonErrEnum1,
				expr: &seqExpr{
					pos: position{line: 1302, col: 11, offset: 37253},
					exprs: []any{
						&stateCodeExpr{
							pos: position{line: 1302, col: 11, offset: 37253},
							run: (*parser).callonErrEnum3,
						},
						&zeroOrMoreExpr{
							pos: position{line: 1304, col: 3, offset: 37283},
							expr: &seqExpr{
								pos: position{line: 1304, col: 4, offset: 37284},
								exprs: []any{
									&notExpr{
										pos: position{line: 1304, col: 4, offset: 37284},
										expr: &charClassMatcher{
											pos:        position{line: 1304, col: 5, offset: 37285},
											val:        "[\\r\\n]",
											chars:      []rune{'\r', '\n'},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&anyMatcher{
										line: 1304, col: 12, offset: 37292,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ErrService",
			pos:  position{line: 1308, col: 1, offset: 37393},
			expr: &actionExpr{
				pos: position{line: 1308, col: 14, offset: 37406},
				run: (*parser).callonErrService1,
				expr: &seqExpr{
					pos: position{line: 1308, col: 14, offset: 37406},
					exprs: []any{
						&stateCodeExpr{
							pos: position{line: 1308, col: 14, offset: 37406},
							run: (*parser).callonErrService3,
						},
						&zeroOrMoreExpr{
							pos: position{line: 1310, col: 3, offset: 37439},
							expr: &seqExpr{
								pos: position{line: 1310, col: 4, offset: 37440},
								exprs: []any{
									&notExpr{
										pos: position{line: 1310, col: 4, offset: 37440},
										expr: &charClassMatcher{
											pos:        position{line: 1310, col: 5, offset: 37441},
											val:        "[\\r\\n]",
											chars:      []rune{'\r', '\n'},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&anyMatcher{
										line: 1310, col: 12, offset: 37448,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ErrStruct",
			pos:  position{line: 1314, col: 1, offset: 37552},
			expr: &actionExpr{
				pos: position{line: 1314, col: 13, offset: 37564},
				run: (*parser).callonErrStruct1,
				expr: &seqExpr{
					pos: position{line: 1314, col: 13, offset: 37564},
					exprs: []any{
						&stateCodeExpr{
							pos: position{line: 1314, col: 13, offset: 37564},
							run: (*parser).callonErrStruct3,
						},
						&zeroOrMoreExpr{
							pos: position{line: 1316, col: 3, offset: 37596},
							expr: &seqExpr{
								pos: position{line: 1316, col: 4, offset: 37597},
								exprs: []any{
									&notExpr{
										pos: position{line: 1316, col: 4, offset: 37597},
										expr: &charClassMatcher{
											pos:        position{line: 1316, col: 5, offset: 37598},
											val:        "[\\r\\n]",
											chars:      []rune{'\r', '\n'},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&anyMatcher{
										line: 1316, col: 12, offset: 37605,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ErrUnion",
			pos:  position{line: 1320, col: 1, offset: 37708},
			expr: &actionExpr{
				pos: position{line: 1320, col: 12, offset: 37719},
				run: (*parser).callonErrUnion1,
				expr: &seqExpr{
					pos: position{line: 1320, col: 12, offset: 37719},
					exprs: []any{
						&stateCodeExpr{
							pos: position{line: 1320, col: 12, offset: 37719},
							run: (*parser).callonErrUnion3,
						},
						&zeroOrMoreExpr{
							pos: position{line: 1322, col: 3, offset: 37750},
							expr: &seqExpr{
								pos: position{line: 1322, col: 4, offset: 37751},
								exprs: []any{
									&notExpr{
										pos: position{line: 1322, col: 4, offset: 37751},
										expr: &charClassMatcher{
											pos:        position{line: 1322, col: 5, offset: 37752},
											val:        "[\\r\\n]",
											chars:      []rune{'\r', '\n'},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&anyMatcher{
										line: 1322, col: 12, offset: 37759,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ErrException",
			pos:  position{line: 1326, col: 1, offset: 37861},
			expr: &actionExpr{
				pos: position{line: 1326, col: 16, offset: 37876},
				run: (*parser).callonErrException1,
				expr: &seqExpr{
					pos: position{line: 1326, col: 16, offset: 37876},
					exprs: []any{
						&stateCodeExpr{
							pos: position{line: 1326, col: 16, offset: 37876},
							run: (*parser).callonErrException3,
						},
						&zeroOrMoreExpr{
							pos: position{line: 1328, col: 3, offset: 37911},
							expr: &seqExpr{
								pos: position{line: 1328, col: 4, offset: 37912},
								exprs: []any{
									&notExpr{
										pos: position{line: 1328, col: 4, offset: 37912},
										expr: &charClassMatcher{
											pos:        position{line: 1328, col: 5, offset: 37913},
											val:        "[\\r\\n]",
											chars:      []rune{'\r', '\n'},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&anyMatcher{
										line: 1328, col: 12, offset: 37920,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ErrDefinition",
			pos:  position{line: 1332, col: 1, offset: 38026},
			expr: &actionExpr{
				pos: position{line: 1332, col: 17, offset: 38042},
				run: (*parser).callonErrDefinition1,
				expr: &seqExpr{
					pos: position{line: 1332, col: 17, offset: 38042},
					exprs: []any{
						&stateCodeExpr{
							pos: position{line: 1332, col: 17, offset: 38042},
							run: (*parser).callonErrDefinition3,
						},
						&zeroOrMoreExpr{
							pos: position{line: 1334, col: 3, offset: 38078},
							expr: &seqExpr{
								pos: position{line: 1334, col: 4, offset: 38079},
								exprs: []any{
									&notExpr{
										pos: position{line: 1334, col: 4, offset: 38079},
										expr: &charClassMatcher{
											pos:        position{line: 1334, col: 5, offset: 38080},
											val:        "[\\r\\n]",
											chars:      []rune{'\r', '\n'},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&anyMatcher{
										line: 1334, col: 12, offset: 38087,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ErrInclude",
			pos:  position{line: 1338, col: 1, offset: 38193},
			expr: &actionExpr{
				pos: position{line: 1338, col: 14, offset: 38206},
				run: (*parser).callonErrInclude1,
				expr: &seqExpr{
					pos: position{line: 1338, col: 14, offset: 38206},
					exprs: []any{
						&stateCodeExpr{
							pos: position{line: 1338, col: 14, offset: 38206},
							run: (*parser).callonErrInclude3,
						},
						&zeroOrMoreExpr{
							pos: position{line: 1340, col: 3, offset: 38239},
							expr: &seqExpr{
								pos: position{line: 1340, col: 4, offset: 38240},
								exprs: []any{
									&notExpr{
										pos: position{line: 1340, col: 4, offset: 38240},
										expr: &charClassMatcher{
											pos:        position{line: 1340, col: 5, offset: 38241},
											val:        "[\\r\\n]",
											chars:      []rune{'\r', '\n'},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&anyMatcher{
										line: 1340, col: 12, offset: 38248,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ErrCppInclude",
			pos:  position{line: 1344, col: 1, offset: 38351},
			expr: &actionExpr{
				pos: position{line: 1344, col: 17, offset: 38367},
				run: (*parser).callonErrCppInclude1,
				expr: &seqExpr{
					pos: position{line: 1344, col: 17, offset: 38367},
					exprs: []any{
						&stateCodeExpr{
							pos: position{line: 1344, col: 17, offset: 38367},
							run: (*parser).callonErrCppInclude3,
						},
						&zeroOrMoreExpr{
							pos: position{line: 1346, col: 3, offset: 38403},
							expr: &seqExpr{
								pos: position{line: 1346, col: 4, offset: 38404},
								exprs: []any{
									&notExpr{
										pos: position{line: 1346, col: 4, offset: 38404},
										expr: &charClassMatcher{
											pos:        position{line: 1346, col: 5, offset: 38405},
											val:        "[\\r\\n]",
											chars:      []rune{'\r', '\n'},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&anyMatcher{
										line: 1346, col: 12, offset: 38412,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ErrNamespace",
			pos:  position{line: 1350, col: 1, offset: 38518},
			expr: &actionExpr{
				pos: position{line: 1350, col: 16, offset: 38533},
				run: (*parser).callonErrNamespace1,
				expr: &seqExpr{
					pos: position{line: 1350, col: 16, offset: 38533},
					exprs: []any{
						&stateCodeExpr{
							pos: position{line: 1350, col: 16, offset: 38533},
							run: (*parser).callonErrNamespace3,
						},
						&zeroOrMoreExpr{
							pos: position{line: 1352, col: 3, offset: 38568},
							expr: &seqExpr{
								pos: position{line: 1352, col: 4, offset: 38569},
								exprs: []any{
									&notExpr{
										pos: position{line: 1352, col: 4, offset: 38569},
										expr: &charClassMatcher{
											pos:        position{line: 1352, col: 5, offset: 38570},
											val:        "[\\r\\n]",
											chars:      []rune{'\r', '\n'},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&anyMatcher{
										line: 1352, col: 12, offset: 38577,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ErrHeader",
			pos:  position{line: 1356, col: 1, offset: 38682},
			expr: &actionExpr{
				pos: position{line: 1356, col: 13, offset: 38694},
				run: (*parser).callonErrHeader1,
				expr: &seqExpr{
					pos: position{line: 1356, col: 13, offset: 38694},
					exprs: []any{
						&stateCodeExpr{
							pos: position{line: 1356, col: 13, offset: 38694},
							run: (*parser).callonErrHeader3,
						},
						&zeroOrMoreExpr{
							pos: position{line: 1358, col: 3, offset: 38726},
							expr: &seqExpr{
								pos: position{line: 1358, col: 4, offset: 38727},
								exprs: []any{
									&notExpr{
										pos: position{line: 1358, col: 4, offset: 38727},
										expr: &charClassMatcher{
											pos:        position{line: 1358, col: 5, offset: 38728},
											val:        "[\\r\\n]",
											chars:      []rune{'\r', '\n'},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&anyMatcher{
										line: 1358, col: 12, offset: 38735,
									},
								},
							},
						},
					},
				},
			},
		},
	},
}

func (c *current) onDocument3(headers, defs, comments any) (any, error) {
	return NewDocument(toHeaderSlice(headers), toDefinitionSlice(defs), comments.([]*Comment), NewLocationFromCurrent(c)), nil
}

func (p *parser) callonDocument3() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocument3(stack["headers"], stack["defs"], stack["comments"])
}

func (c *current) onHeader5(comments, v, endLineComments any) (any, error) {
	c.globalStore["parse"] = "header"
	v.(Header).SetComments(comments.([]*Comment), endLineComments.([]*Comment))
	return v, nil
}

func (p *parser) callonHeader5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeader5(stack["comments"], stack["v"], stack["endLineComments"])
}

func (c *current) onHeader25() (bool, error) {
	/* fmt.Println("header predict:", c.pos, "text:", string(c.text)) */
	if state, ok := c.globalStore["parse"]; !ok || ok && state.(string) == "header" {
		return true, nil
	}
	return false, nil
}

func (p *parser) callonHeader25() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeader25()
}

func (c *current) onHeader16(x any) (any, error) {
	/* fmt.Println("header return:", c.pos, "text:", string(c.text)) */
	badHeader := x.([]any)[4].(*BadHeader)
	return badHeader, nil
}

func (p *parser) callonHeader16() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeader16(stack["x"])
}

func (c *current) onInclude2(includeKeyword, include any) (any, error) {
	includeV, ok := include.(*Literal)
	if !ok {
		includeV = include.([]interface{})[0].(*Literal)
	}
	return NewInclude(includeKeyword.(*IncludeKeyword), includeV, NewLocationFromCurrent(c)), nil
}

func (p *parser) callonInclude2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInclude2(stack["includeKeyword"], stack["include"])
}

func (c *current) onInclude8(x any) (any, error) {
	return x.([]any)[1], nil
}

func (p *parser) callonInclude8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInclude8(stack["x"])
}

func (c *current) onCppInclude2(cppIncludeKeyword, include any) (any, error) {
	includeV, ok := include.(*Literal)
	if !ok {
		includeV = include.([]interface{})[0].(*Literal)
	}
	return NewCPPInclude(cppIncludeKeyword.(*CPPIncludeKeyword), includeV, NewLocationFromCurrent(c)), nil
}

func (p *parser) callonCppInclude2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCppInclude2(stack["cppIncludeKeyword"], stack["include"])
}

func (c *current) onCppInclude8(x any) (any, error) {
	return x.([]any)[1], nil
}

func (p *parser) callonCppInclude8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCppInclude8(stack["x"])
}

func (c *current) onNamespace2(namespaceKeyword, language, name, annotations any) (any, error) {
	return NewNamespace(namespaceKeyword.(*NamespaceKeyword), language.(*NamespaceScope), name.(*Identifier), toAnnotations(annotations), NewLocationFromCurrent(c)), nil
}

func (p *parser) callonNamespace2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamespace2(stack["namespaceKeyword"], stack["language"], stack["name"], stack["annotations"])
}

func (c *current) onNamespace13(x any) (any, error) {
	return x.([]any)[1], nil
}

func (p *parser) callonNamespace13() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamespace13(stack["x"])
}

func (c *current) onNamespaceScope1(v any) (any, error) {
	id := v.(*Identifier)
	res := &NamespaceScope{
		Identifier: *id,
	}

	return res, nil
}

func (p *parser) callonNamespaceScope1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamespaceScope1(stack["v"])
}

func (c *current) onNamespaceScopeAny1(comments any) (any, error) {
	return NewIdentifier("*", comments.([]*Comment), NewLocationFromCurrent(c)), nil
}

func (p *parser) callonNamespaceScopeAny1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamespaceScopeAny1(stack["comments"])
}

func (c *current) onDefinition9(comments, v, annos, endLineComments any) (any, error) {
	c.globalStore["parse"] = "definition"
	def := v.(Definition)
	def.SetComments(comments.([]*Comment), endLineComments.([]*Comment))
	def.SetAnnotations(toAnnotations(annos))
	return def, nil
}

func (p *parser) callonDefinition9() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefinition9(stack["comments"], stack["v"], stack["annos"], stack["endLineComments"])
}

func (c *current) onDefinition34() (bool, error) {
	/* fmt.Println("definition predict:", c.pos, "text:", string(c.text)) */
	if state, ok := c.globalStore["parse"]; ok && state.(string) == "definition" {
		return true, nil
	}
	return false, nil
}

func (p *parser) callonDefinition34() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefinition34()
}

func (c *current) onDefinition27(x any) (any, error) {
	/* fmt.Println("definition return:", c.pos, "text:", string(c.text)) */
	return x.([]any)[3], nil
}

func (p *parser) callonDefinition27() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefinition27(stack["x"])
}

func (c *current) onConst5(constKeyword, t, name, v, sep any) (any, error) {
	equalAndValue := v.([]any)
	return NewConst(constKeyword.(*ConstKeyword), equalAndValue[0].(*EqualKeyword), toListSeparatorKeyword(sep), name.(*Identifier), t.(*FieldType), equalAndValue[1].(*ConstValue), NewLocationFromCurrent(c)), nil
}

func (p *parser) callonConst5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConst5(stack["constKeyword"], stack["t"], stack["name"], stack["v"], stack["sep"])
}

func (c *current) onConst18(x any) (any, error) {
	return x.([]any)[1], nil
}

func (p *parser) callonConst18() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConst18(stack["x"])
}

func (c *current) onConstEqualValue2(v any) (any, error) {
	return v, nil
}

func (p *parser) callonConstEqualValue2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstEqualValue2(stack["v"])
}

func (c *current) onConstEqualValue7(x any) (any, error) {
	return []any{NewBadEqualKeyword(), x.([]any)[1]}, nil
}

func (p *parser) callonConstEqualValue7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstEqualValue7(stack["x"])
}

func (c *current) onConstEqualValue13(x any) (any, error) {
	return x, nil
}

func (p *parser) callonConstEqualValue13() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstEqualValue13(stack["x"])
}

func (c *current) onTypedef3(typedefKeyword, t, alias any) (any, error) {
	return NewTypedef(typedefKeyword.(*TypedefKeyword), t.(*FieldType), alias.(*Identifier), NewLocationFromCurrent(c)), nil
}

func (p *parser) callonTypedef3() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypedef3(stack["typedefKeyword"], stack["t"], stack["alias"])
}

func (c *current) onTypedef11(x any) (any, error) {
	return x.([]any)[1], nil
}

func (p *parser) callonTypedef11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypedef11(stack["x"])
}

func (c *current) onEnum5(enum, name, lcur, v, rcur any) (any, error) {
	values := toEnumValueSlice(v)
	return NewEnum(enum.(*EnumKeyword), lcur.(*LCurKeyword), rcur.(*RCurKeyword), name.(*Identifier), values, NewLocationFromCurrent(c)), nil
}

func (p *parser) callonEnum5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEnum5(stack["enum"], stack["name"], stack["lcur"], stack["v"], stack["rcur"])
}

func (c *current) onEnum18(x any) (any, error) {
	return x.([]any)[1], nil
}

func (p *parser) callonEnum18() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEnum18(stack["x"])
}

func (c *current) onEnumValueLine1(comments, v, endLineComments any) (any, error) {
	v.(*EnumValue).SetComments(comments.([]*Comment), endLineComments.([]*Comment))
	return v, nil
}

func (p *parser) callonEnumValueLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEnumValueLine1(stack["comments"], stack["v"], stack["endLineComments"])
}

func (c *current) onEnumValue2(name, value, annos, sep any) (any, error) {
	var valueNode *ConstValue
	var equalNode *EqualKeyword
	intV := int64(-1)
	if value != nil {
		//fmt.Println(value.(Node).Type(), value)
		equalNode = value.([]any)[0].(*EqualKeyword)
		valueNode = value.([]any)[1].(*ConstValue)
		intV = valueNode.Value.(int64)
	}

	return NewEnumValue(toListSeparatorKeyword(sep), equalNode, name.(*Identifier), valueNode, intV, toAnnotations(annos), NewLocationFromCurrent(c)), nil
}

func (p *parser) callonEnumValue2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEnumValue2(stack["name"], stack["value"], stack["annos"], stack["sep"])
}

func (c *current) onService5(svc, name, extends, lcur, fns, rcur any) (any, error) {
	var extendsVal *Identifier
	var extendsKeyword *ExtendsKeyword
	if extends != nil {
		extendsKeyword = extends.([]any)[0].(*ExtendsKeyword)
		extendsVal = extends.([]any)[1].(*Identifier)
	}
	fnsVal := toFunctionSlice(fns)
	return NewService(svc.(*ServiceKeyword), extendsKeyword, lcur.(*LCurKeyword), rcur.(*RCurKeyword), name.(*Identifier), extendsVal, fnsVal, NewLocationFromCurrent(c)), nil
}

func (p *parser) callonService5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onService5(stack["svc"], stack["name"], stack["extends"], stack["lcur"], stack["fns"], stack["rcur"])
}

func (c *current) onService23(x any) (any, error) {
	return x.([]any)[1], nil
}

func (p *parser) callonService23() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onService23(stack["x"])
}

func (c *current) onStruct5(st, id, lcur, fields, rcur any) (any, error) {
	return NewStruct(st.(*StructKeyword), lcur.(*LCurKeyword), rcur.(*RCurKeyword), id.(*Identifier), toFieldSlice(fields), NewLocationFromCurrent(c)), nil
}

func (p *parser) callonStruct5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStruct5(stack["st"], stack["id"], stack["lcur"], stack["fields"], stack["rcur"])
}

func (c *current) onStruct18(x any) (any, error) {
	return x.([]any)[1], nil
}

func (p *parser) callonStruct18() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStruct18(stack["x"])
}

func (c *current) onUnion5(union, name, lcur, fields, rcur any) (any, error) {
	return NewUnion(union.(*UnionKeyword), lcur.(*LCurKeyword), rcur.(*RCurKeyword), name.(*Identifier), toFieldSlice(fields), NewLocationFromCurrent(c)), nil
}

func (p *parser) callonUnion5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnion5(stack["union"], stack["name"], stack["lcur"], stack["fields"], stack["rcur"])
}

func (c *current) onUnion18(x any) (any, error) {
	return x.([]any)[1], nil
}

func (p *parser) callonUnion18() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnion18(stack["x"])
}

func (c *current) onException5(excep, name, lcur, fields, rcur any) (any, error) {
	return NewException(excep.(*ExceptionKeyword), lcur.(*LCurKeyword), rcur.(*RCurKeyword), name.(*Identifier), toFieldSlice(fields), NewLocationFromCurrent(c)), nil
}

func (p *parser) callonException5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onException5(stack["excep"], stack["name"], stack["lcur"], stack["fields"], stack["rcur"])
}

func (c *current) onException18(x any) (any, error) {
	return x.([]any)[1], nil
}

func (p *parser) callonException18() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onException18(stack["x"])
}

func (c *current) onFieldWithThrow3(x any) (any, error) {
	return x.([]any)[2], nil
}

func (p *parser) callonFieldWithThrow3() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldWithThrow3(stack["x"])
}

func (c *current) onField1(comments, index, required, fieldType, id, value, annos, sep, lineComments any) (any, error) {
	var constV *ConstValue
	var equalKeyword *EqualKeyword
	if value != nil {
		equalKeyword = value.([]any)[0].(*EqualKeyword)
		constV = value.([]any)[1].(*ConstValue)
	}
	var requiredV *RequiredKeyword
	if required != nil {
		requiredV = required.(*RequiredKeyword)
	}

	return NewField(equalKeyword, toListSeparatorKeyword(sep), comments.([]*Comment), lineComments.([]*Comment), toAnnotations(annos), index.(*FieldIndex), requiredV, fieldType.(*FieldType), id.(*Identifier), constV, NewLocationFromCurrent(c)), nil
}

func (p *parser) callonField1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onField1(stack["comments"], stack["index"], stack["required"], stack["fieldType"], stack["id"], stack["value"], stack["annos"], stack["sep"], stack["lineComments"])
}

func (c *current) onFieldId2(comments, i, colon any) (any, error) {
	fieldIndex := i.(*FieldIndex)

	return NewFieldIndex(colon.(*ColonKeyword), fieldIndex.Value, comments.([]*Comment), fieldIndex.Location), nil
}

func (p *parser) callonFieldId2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldId2(stack["comments"], stack["i"], stack["colon"])
}

func (c *current) onFieldReq1(comments, r any) (any, error) {
	kw := NewKeyword(comments.([]*Comment), r.(*KeywordLiteral), NewLocationFromCurrent(c))

	return &RequiredKeyword{Keyword: kw}, nil
}

func (p *parser) callonFieldReq1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldReq1(stack["comments"], stack["r"])
}

func (c *current) onIsRequired1(v any) (any, error) {
	return v, nil
}

func (p *parser) callonIsRequired1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIsRequired1(stack["v"])
}

func (c *current) onRequiredToken1() (any, error) {
	return NewKeywordLiteral(c), nil
}

func (p *parser) callonRequiredToken1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRequiredToken1()
}

func (c *current) onOptionalToken1() (any, error) {
	return NewKeywordLiteral(c), nil
}

func (p *parser) callonOptionalToken1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOptionalToken1()
}

func (c *current) onFunction4(comments, oneway, ft, name, lpar, args, rpar, throws, annos, sep, endLineComments any) (any, error) {
	var ftype *FieldType
	var voidKeyword *VoidKeyword
	if _, ok := ft.(*VoidKeyword); ok {
		voidKeyword = ft.(*VoidKeyword)
	} else {
		ftype = ft.(*FieldType)
	}

	var throwsV *Throws
	if throws != nil {
		throwsV = throws.(*Throws)
	}

	var onewayKeyword *OnewayKeyword
	if oneway != nil {
		onewayKeyword = oneway.(*OnewayKeyword)
	}

	return NewFunction(lpar.(*LParKeyword), rpar.(*RParKeyword), toListSeparatorKeyword(sep), name.(*Identifier), onewayKeyword, voidKeyword, ftype, toFieldSlice(args), throwsV, comments.([]*Comment), endLineComments.([]*Comment), toAnnotations(annos), NewLocationFromCurrent(c)), nil
}

func (p *parser) callonFunction4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunction4(stack["comments"], stack["oneway"], stack["ft"], stack["name"], stack["lpar"], stack["args"], stack["rpar"], stack["throws"], stack["annos"], stack["sep"], stack["endLineComments"])
}

func (c *current) onFunction33(x any) (any, error) {
	return x.([]any)[2], nil
}

func (p *parser) callonFunction33() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunction33(stack["x"])
}

func (c *current) onFunctionFieldWithThrow2(v any) (any, error) {
	return v, nil
}

func (p *parser) callonFunctionFieldWithThrow2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunctionFieldWithThrow2(stack["v"])
}

func (c *current) onFunctionFieldWithThrow5(x any) (any, error) {
	return x.([]any)[2], nil
}

func (p *parser) callonFunctionFieldWithThrow5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunctionFieldWithThrow5(stack["x"])
}

func (c *current) onThrows1(throws, lpar, fields, rpar any) (any, error) {
	return NewThrows(throws.(*ThrowsKeyword), lpar.(*LParKeyword), rpar.(*RParKeyword), toFieldSlice(fields), NewLocationFromCurrent(c)), nil
}

func (p *parser) callonThrows1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onThrows1(stack["throws"], stack["lpar"], stack["fields"], stack["rpar"])
}

func (c *current) onFieldType1(v, annos any) (any, error) {
	ft := v.(*FieldType)
	ft.Annotations = toAnnotations(annos)

	return ft, nil
}

func (p *parser) callonFieldType1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldType1(stack["v"], stack["annos"])
}

func (c *current) onIdentifierType1(v any) (any, error) {
	return v.(*Identifier).ToFieldType(), nil
}

func (p *parser) callonIdentifierType1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierType1(stack["v"])
}

func (c *current) onBaseType1(v any) (any, error) {
	return NewFieldType(nil, nil, nil, nil, v.(*TypeName), nil, nil, NewLocationFromCurrent(c)), nil
}

func (p *parser) callonBaseType1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBaseType1(stack["v"])
}

func (c *current) onContainerType1(v any) (any, error) {
	return v.(*FieldType), nil
}

func (p *parser) callonContainerType1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContainerType1(stack["v"])
}

func (c *current) onMapType1(t, cpp, lp, key, comma, value, rp any) (any, error) {
	var cppType *CppType
	if cpp != nil {
		cppType = cpp.(*CppType)
	}

	return NewFieldType(lp.(*LPointKeyword), rp.(*RPointKeyword), comma.(*CommaKeyword), cppType, t.(*TypeName), key.(*FieldType), value.(*FieldType), NewLocationFromCurrent(c)), nil
}

func (p *parser) callonMapType1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMapType1(stack["t"], stack["cpp"], stack["lp"], stack["key"], stack["comma"], stack["value"], stack["rp"])
}

func (c *current) onSetType1(t, cpp, lp, key, rp any) (any, error) {
	var cppType *CppType
	if cpp != nil {
		cppType = cpp.(*CppType)
	}

	return NewFieldType(lp.(*LPointKeyword), rp.(*RPointKeyword), nil, cppType, t.(*TypeName), key.(*FieldType), nil, NewLocationFromCurrent(c)), nil
}

func (p *parser) callonSetType1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSetType1(stack["t"], stack["cpp"], stack["lp"], stack["key"], stack["rp"])
}

func (c *current) onListType1(t, lp, key, rp, cpp any) (any, error) {
	var cppType *CppType
	if cpp != nil {
		cppType = cpp.(*CppType)
	}

	return NewFieldType(lp.(*LPointKeyword), rp.(*RPointKeyword), nil, cppType, t.(*TypeName), key.(*FieldType), nil, NewLocationFromCurrent(c)), nil
}

func (p *parser) callonListType1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListType1(stack["t"], stack["lp"], stack["key"], stack["rp"], stack["cpp"])
}

func (c *current) onCppType1(cpp, l any) (any, error) {
	return NewCppType(cpp.(*CppTypeKeyword), l.(*Literal), NewLocationFromCurrent(c)), nil
}

func (p *parser) callonCppType1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCppType1(stack["cpp"], stack["l"])
}

func (c *current) onConstValue1(v any) (any, error) {
	if str, ok := v.(*Literal); ok {
		return NewConstValue("string", str.Value, NewLocationFromCurrent(c)), nil
	}
	return v.(*ConstValue), nil
}

func (p *parser) callonConstValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstValue1(stack["v"])
}

func (c *current) onIdentifierConst1(id any) (any, error) {
	return NewConstValue("identifier", id.(*Identifier).Name, NewLocationFromCurrent(c)), nil
}

func (p *parser) callonIdentifierConst1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierConst1(stack["id"])
}

func (c *current) onEnumValueIntConstant2(v any) (any, error) {
	return v, nil
}

func (p *parser) callonEnumValueIntConstant2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEnumValueIntConstant2(stack["v"])
}

func (c *current) onEnumValueIntConstant7(x any) (any, error) {
	return []any{x.([]any)[0], x.([]any)[2]}, nil
}

func (p *parser) callonEnumValueIntConstant7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEnumValueIntConstant7(stack["x"])
}

func (c *current) onIntConstant2(comments, v any) (any, error) {
	cv := v.(*ConstValue)
	cv.SetComments(comments.([]*Comment))

	return cv, nil
}

func (p *parser) callonIntConstant2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIntConstant2(stack["comments"], stack["v"])
}

func (c *current) onIntConstant15(x any) (any, error) {
	return x.([]any)[2], nil
}

func (p *parser) callonIntConstant15() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIntConstant15(stack["x"])
}

func (c *current) onHexIntConstant1() (any, error) {
	v, err := strconv.ParseInt(strings.TrimLeft(string(c.text), "0x"), 16, 64)
	if err != nil {
		return nil, err
	}

	cv := NewConstValue("i64", v, NewLocationFromCurrent(c))
	cv.ValueInText = string(c.text)

	return cv, nil
}

func (p *parser) callonHexIntConstant1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHexIntConstant1()
}

func (c *current) onOctIntConstant1() (any, error) {
	v, err := strconv.ParseInt(strings.TrimLeft(string(c.text), "0o"), 8, 64)
	if err != nil {
		return nil, err
	}
	cv := NewConstValue("i64", v, NewLocationFromCurrent(c))
	cv.ValueInText = string(c.text)

	return cv, nil
}

func (p *parser) callonOctIntConstant1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOctIntConstant1()
}

func (c *current) onNormalIntConstant1() (any, error) {
	v, err := strconv.ParseInt(string(c.text), 10, 64)
	if err != nil {
		return nil, err
	}
	cv := NewConstValue("i64", v, NewLocationFromCurrent(c))
	cv.ValueInText = string(c.text)

	return cv, nil
}

func (p *parser) callonNormalIntConstant1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalIntConstant1()
}

func (c *current) onFieldIndex2() (any, error) {
	v, err := strconv.ParseInt(string(c.text), 10, 64)
	if err != nil {
		return nil, err
	}
	return NewFieldIndex(nil, int(v), nil, NewLocationFromCurrent(c)), nil
}

func (p *parser) callonFieldIndex2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldIndex2()
}

func (c *current) onFieldIndex5(x any) (any, error) {
	return x.([]any)[2], nil
}

func (p *parser) callonFieldIndex5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldIndex5(stack["x"])
}

func (c *current) onDoubleConstant1(comments, v any) (any, error) {
	cv := v.(*ConstValue)
	cv.SetComments(comments.([]*Comment))

	return cv, nil
}

func (p *parser) callonDoubleConstant1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleConstant1(stack["comments"], stack["v"])
}

func (c *current) onDoubleConstantValue1() (any, error) {
	v, err := strconv.ParseFloat(string(c.text), 64)
	if err != nil {
		return nil, err
	}
	cv := NewConstValue("double", v, NewLocationFromCurrent(c))
	cv.ValueInText = string(c.text)

	return cv, nil
}

func (p *parser) callonDoubleConstantValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleConstantValue1()
}

func (c *current) onAnnotations1(lpar, annos, rpar any) (any, error) {
	return NewAnnotations(lpar.(*LParKeyword), rpar.(*RParKeyword), toAnnotationSlice(annos), NewLocationFromCurrent(c)), nil
}

func (p *parser) callonAnnotations1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnnotations1(stack["lpar"], stack["annos"], stack["rpar"])
}

func (c *current) onAnnotation1(id, eq, value, sep any) (any, error) {
	return NewAnnotation(eq.(*EqualKeyword), toListSeparatorKeyword(sep), id.(*Identifier), value.(*Literal), NewLocationFromCurrent(c)), nil
}

func (p *parser) callonAnnotation1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnnotation1(stack["id"], stack["eq"], stack["value"], stack["sep"])
}

func (c *current) onConstList1(lbrk, v, rbrk any) (any, error) {
	cv := NewConstValue("list", toConstValueSlice(v), NewLocationFromCurrent(c))

	cv.LBrkKeyword = lbrk.(*LBrkKeyword)
	cv.RBrkKeyword = rbrk.(*RBrkKeyword)

	return cv, nil
}

func (p *parser) callonConstList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstList1(stack["lbrk"], stack["v"], stack["rbrk"])
}

func (c *current) onConstListItem1(v, sep any) (any, error) {
	cv := v.(*ConstValue)

	if sep != nil {
		cv.ListSeparatorKeyword = sep.(*ListSeparatorKeyword)
	}

	return cv, nil
}

func (p *parser) callonConstListItem1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstListItem1(stack["v"], stack["sep"])
}

func (c *current) onConstMap1(lcur, v, rcur any) (any, error) {
	cv := NewConstValue("map", toConstValueSlice(v), NewLocationFromCurrent(c))

	cv.LCurKeyword = lcur.(*LCurKeyword)
	cv.RCurKeyword = rcur.(*RCurKeyword)

	return cv, nil
}

func (p *parser) callonConstMap1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstMap1(stack["lcur"], stack["v"], stack["rcur"])
}

func (c *current) onConstMapItem1(key, colon, value, sep any) (any, error) {
	cv := NewMapConstValue(key.(*ConstValue), value.(*ConstValue), NewLocationFromCurrent(c))

	cv.ColonKeyword = colon.(*ColonKeyword)
	if sep != nil {
		cv.ListSeparatorKeyword = sep.(*ListSeparatorKeyword)
	}

	return cv, nil
}

func (p *parser) callonConstMapItem1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstMapItem1(stack["key"], stack["colon"], stack["value"], stack["sep"])
}

func (c *current) onEscapeLiteralChar1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonEscapeLiteralChar1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapeLiteralChar1()
}

func (c *current) onLiteral5(l any) (any, error) {
	return l, nil
}

func (p *parser) callonLiteral5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteral5(stack["l"])
}

func (c *current) onLiteral12(comments, t any) (any, error) {
	strs := toStringSlice(t)
	return NewLiteral(comments.([]*Comment), strings.Join(strs, ""), "\"", NewLocationFromCurrent(c)), nil
}

func (p *parser) callonLiteral12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteral12(stack["comments"], stack["t"])
}

func (c *current) onLiteral118(x any) (any, error) {
	return x.([]any)[1], nil
}

func (p *parser) callonLiteral118() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteral118(stack["x"])
}

func (c *current) onLiteral22(comments, t any) (any, error) {
	strs := toStringSlice(t)
	return NewLiteral(comments.([]*Comment), strings.Join(strs, ""), "'", NewLocationFromCurrent(c)), nil
}

func (p *parser) callonLiteral22() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteral22(stack["comments"], stack["t"])
}

func (c *current) onLiteral218(x any) (any, error) {
	return x.([]any)[1], nil
}

func (p *parser) callonLiteral218() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteral218(stack["x"])
}

func (c *current) onDefinitionIdentifier2(id any) (any, error) {
	return id.(*Identifier), nil
}

func (p *parser) callonDefinitionIdentifier2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefinitionIdentifier2(stack["id"])
}

func (c *current) onIdentifier1(comments, id any) (any, error) {
	idV := id.(*Identifier)
	idV.Comments = comments.([]*Comment)

	return idV, nil
}

func (p *parser) callonIdentifier1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier1(stack["comments"], stack["id"])
}

func (c *current) onIdentifierToken1() (any, error) {
	return NewIdentifier(string(c.text), nil, NewLocationFromCurrent(c)), nil
}

func (p *parser) callonIdentifierToken1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierToken1()
}

func (c *current) onListSeparator1(comments, t any) (any, error) {
	kw := NewKeyword(comments.([]*Comment), t.(*KeywordLiteral), NewLocationFromCurrent(c))

	return &ListSeparatorKeyword{Keyword: kw}, nil
}

func (p *parser) callonListSeparator1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListSeparator1(stack["comments"], stack["t"])
}

func (c *current) onListSeparatorToken1() (any, error) {
	return NewKeywordLiteral(c), nil
}

func (p *parser) callonListSeparatorToken1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListSeparatorToken1()
}

func (c *current) onLetter4() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonLetter4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetter4()
}

func (c *current) onLetterOrDigit5() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonLetterOrDigit5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetterOrDigit5()
}

func (c *current) onDigit1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonDigit1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDigit1()
}

func (c *current) onReservedComments1(comments any) (any, error) {
	return toCommentSlice(comments), nil
}

func (p *parser) callonReservedComments1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReservedComments1(stack["comments"])
}

func (c *current) onReservedEndLineComments1(comments any) (any, error) {
	return toCommentSlice(comments), nil
}

func (p *parser) callonReservedEndLineComments1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReservedEndLineComments1(stack["comments"])
}

func (c *current) onSpace1() (any, error) {
	return "", nil
}

func (p *parser) callonSpace1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpace1()
}

func (c *current) onIndent1() (any, error) {
	return "", nil
}

func (p *parser) callonIndent1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndent1()
}

func (c *current) onComment1(v any) (any, error) {
	return v.(*Comment), nil
}

func (p *parser) callonComment1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComment1(stack["v"])
}

func (c *current) onLongComment1() (any, error) {
	return NewComment(string(c.text), CommentStyleMultiLine, NewLocationFromCurrent(c)), nil
}

func (p *parser) callonLongComment1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongComment1()
}

func (c *current) onLongCommentMatch1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonLongCommentMatch1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongCommentMatch1()
}

func (c *current) onLineComment1() (any, error) {
	return NewComment(string(c.text), CommentStyleSingleLine, NewLocationFromCurrent(c)), nil
}

func (p *parser) callonLineComment1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineComment1()
}

func (c *current) onLineCommentMatch1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonLineCommentMatch1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineCommentMatch1()
}

func (c *current) onUnixComment1() (any, error) {
	return NewComment(string(c.text), CommentStyleShell, NewLocationFromCurrent(c)), nil
}

func (p *parser) callonUnixComment1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnixComment1()
}

func (c *current) onUnixCommentMatch1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonUnixCommentMatch1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnixCommentMatch1()
}

func (c *current) onBOOL1(comments, t any) (any, error) {
	tn := t.(*TypeName)
	tn.Comments = comments.([]*Comment)

	return tn, nil
}

func (p *parser) callonBOOL1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBOOL1(stack["comments"], stack["t"])
}

func (c *current) onBOOLToken1() (any, error) {
	return NewTypeName(string(c.text), c.pos), nil
}

func (p *parser) callonBOOLToken1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBOOLToken1()
}

func (c *current) onBYTE1(comments, t any) (any, error) {
	tn := t.(*TypeName)
	tn.Comments = comments.([]*Comment)

	return tn, nil
}

func (p *parser) callonBYTE1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBYTE1(stack["comments"], stack["t"])
}

func (c *current) onBYTEToken1() (any, error) {
	return NewTypeName(string(c.text), c.pos), nil
}

func (p *parser) callonBYTEToken1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBYTEToken1()
}

func (c *current) onI81(comments, t any) (any, error) {
	tn := t.(*TypeName)
	tn.Comments = comments.([]*Comment)

	return tn, nil
}

func (p *parser) callonI81() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onI81(stack["comments"], stack["t"])
}

func (c *current) onI8Token1() (any, error) {
	return NewTypeName(string(c.text), c.pos), nil
}

func (p *parser) callonI8Token1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onI8Token1()
}

func (c *current) onI161(comments, t any) (any, error) {
	tn := t.(*TypeName)
	tn.Comments = comments.([]*Comment)

	return tn, nil
}

func (p *parser) callonI161() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onI161(stack["comments"], stack["t"])
}

func (c *current) onI16Token1() (any, error) {
	return NewTypeName(string(c.text), c.pos), nil
}

func (p *parser) callonI16Token1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onI16Token1()
}

func (c *current) onI321(comments, t any) (any, error) {
	tn := t.(*TypeName)
	tn.Comments = comments.([]*Comment)

	return tn, nil
}

func (p *parser) callonI321() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onI321(stack["comments"], stack["t"])
}

func (c *current) onI32Token1() (any, error) {
	return NewTypeName(string(c.text), c.pos), nil
}

func (p *parser) callonI32Token1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onI32Token1()
}

func (c *current) onI641(comments, t any) (any, error) {
	tn := t.(*TypeName)
	tn.Comments = comments.([]*Comment)

	return tn, nil
}

func (p *parser) callonI641() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onI641(stack["comments"], stack["t"])
}

func (c *current) onI64Token1() (any, error) {
	return NewTypeName(string(c.text), c.pos), nil
}

func (p *parser) callonI64Token1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onI64Token1()
}

func (c *current) onDOUBLE1(comments, t any) (any, error) {
	tn := t.(*TypeName)
	tn.Comments = comments.([]*Comment)

	return tn, nil
}

func (p *parser) callonDOUBLE1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDOUBLE1(stack["comments"], stack["t"])
}

func (c *current) onDOUBLEToken1() (any, error) {
	return NewTypeName(string(c.text), c.pos), nil
}

func (p *parser) callonDOUBLEToken1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDOUBLEToken1()
}

func (c *current) onSTRING1(comments, t any) (any, error) {
	tn := t.(*TypeName)
	tn.Comments = comments.([]*Comment)

	return tn, nil
}

func (p *parser) callonSTRING1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSTRING1(stack["comments"], stack["t"])
}

func (c *current) onSTRINGToken1() (any, error) {
	return NewTypeName(string(c.text), c.pos), nil
}

func (p *parser) callonSTRINGToken1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSTRINGToken1()
}

func (c *current) onBINARY1(comments, t any) (any, error) {
	tn := t.(*TypeName)
	tn.Comments = comments.([]*Comment)

	return tn, nil
}

func (p *parser) callonBINARY1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBINARY1(stack["comments"], stack["t"])
}

func (c *current) onBINARYToken1() (any, error) {
	return NewTypeName(string(c.text), c.pos), nil
}

func (p *parser) callonBINARYToken1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBINARYToken1()
}

func (c *current) onMAP1(comments, t any) (any, error) {
	tn := t.(*TypeName)
	tn.Comments = comments.([]*Comment)

	return tn, nil
}

func (p *parser) callonMAP1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMAP1(stack["comments"], stack["t"])
}

func (c *current) onMAPToken1() (any, error) {
	return NewTypeName(string(c.text), c.pos), nil
}

func (p *parser) callonMAPToken1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMAPToken1()
}

func (c *current) onSET1(comments, t any) (any, error) {
	tn := t.(*TypeName)
	tn.Comments = comments.([]*Comment)

	return tn, nil
}

func (p *parser) callonSET1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSET1(stack["comments"], stack["t"])
}

func (c *current) onSETToken1() (any, error) {
	return NewTypeName(string(c.text), c.pos), nil
}

func (p *parser) callonSETToken1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSETToken1()
}

func (c *current) onLIST1(comments, t any) (any, error) {
	tn := t.(*TypeName)
	tn.Comments = comments.([]*Comment)

	return tn, nil
}

func (p *parser) callonLIST1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLIST1(stack["comments"], stack["t"])
}

func (c *current) onListToken1() (any, error) {
	return NewTypeName(string(c.text), c.pos), nil
}

func (p *parser) callonListToken1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListToken1()
}

func (c *current) onCONST1(comments, t any) (any, error) {

	kw := NewKeyword(comments.([]*Comment), t.(*KeywordLiteral), NewLocationFromCurrent(c))

	return &ConstKeyword{Keyword: kw}, nil
}

func (p *parser) callonCONST1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCONST1(stack["comments"], stack["t"])
}

func (c *current) onCONSTToken1() (any, error) {
	return NewKeywordLiteral(c), nil
}

func (p *parser) callonCONSTToken1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCONSTToken1()
}

func (c *current) onONEWAY1(comments, t any) (any, error) {

	kw := NewKeyword(comments.([]*Comment), t.(*KeywordLiteral), NewLocationFromCurrent(c))

	return &OnewayKeyword{Keyword: kw}, nil
}

func (p *parser) callonONEWAY1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onONEWAY1(stack["comments"], stack["t"])
}

func (c *current) onONEWAYToken1() (any, error) {
	return NewKeywordLiteral(c), nil
}

func (p *parser) callonONEWAYToken1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onONEWAYToken1()
}

func (c *current) onTYPEDEF1(comments, t any) (any, error) {
	kw := NewKeyword(comments.([]*Comment), t.(*KeywordLiteral), NewLocationFromCurrent(c))

	return &TypedefKeyword{Keyword: kw}, nil
}

func (p *parser) callonTYPEDEF1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTYPEDEF1(stack["comments"], stack["t"])
}

func (c *current) onTYPEDEFToken1() (any, error) {
	return NewKeywordLiteral(c), nil
}

func (p *parser) callonTYPEDEFToken1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTYPEDEFToken1()
}

func (c *current) onVOID1(comments, t any) (any, error) {
	kw := NewKeyword(comments.([]*Comment), t.(*KeywordLiteral), NewLocationFromCurrent(c))

	return &VoidKeyword{Keyword: kw}, nil
}

func (p *parser) callonVOID1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVOID1(stack["comments"], stack["t"])
}

func (c *current) onVOIDToken1() (any, error) {
	return NewKeywordLiteral(c), nil
}

func (p *parser) callonVOIDToken1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVOIDToken1()
}

func (c *current) onTHROWS1(comments, t any) (any, error) {
	kw := NewKeyword(comments.([]*Comment), t.(*KeywordLiteral), NewLocationFromCurrent(c))

	return &ThrowsKeyword{Keyword: kw}, nil
}

func (p *parser) callonTHROWS1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTHROWS1(stack["comments"], stack["t"])
}

func (c *current) onTHROWSToken1() (any, error) {
	return NewKeywordLiteral(c), nil
}

func (p *parser) callonTHROWSToken1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTHROWSToken1()
}

func (c *current) onEXCEPTION1(comments, t any) (any, error) {
	kw := NewKeyword(comments.([]*Comment), t.(*KeywordLiteral), NewLocationFromCurrent(c))

	return &ExceptionKeyword{Keyword: kw}, nil
}

func (p *parser) callonEXCEPTION1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEXCEPTION1(stack["comments"], stack["t"])
}

func (c *current) onEXCEPTIONToken1() (any, error) {
	return NewKeywordLiteral(c), nil
}

func (p *parser) callonEXCEPTIONToken1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEXCEPTIONToken1()
}

func (c *current) onEXTENDS1(comments, t any) (any, error) {
	kw := NewKeyword(comments.([]*Comment), t.(*KeywordLiteral), NewLocationFromCurrent(c))

	return &ExtendsKeyword{Keyword: kw}, nil
}

func (p *parser) callonEXTENDS1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEXTENDS1(stack["comments"], stack["t"])
}

func (c *current) onEXTENDSToken1() (any, error) {
	return NewKeywordLiteral(c), nil
}

func (p *parser) callonEXTENDSToken1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEXTENDSToken1()
}

func (c *current) onSERVICE1(comments, t any) (any, error) {
	kw := NewKeyword(comments.([]*Comment), t.(*KeywordLiteral), NewLocationFromCurrent(c))

	return &ServiceKeyword{Keyword: kw}, nil
}

func (p *parser) callonSERVICE1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSERVICE1(stack["comments"], stack["t"])
}

func (c *current) onSERVICEToken1() (any, error) {
	return NewKeywordLiteral(c), nil
}

func (p *parser) callonSERVICEToken1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSERVICEToken1()
}

func (c *current) onSTRUCT1(comments, t any) (any, error) {
	kw := NewKeyword(comments.([]*Comment), t.(*KeywordLiteral), NewLocationFromCurrent(c))

	return &StructKeyword{Keyword: kw}, nil
}

func (p *parser) callonSTRUCT1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSTRUCT1(stack["comments"], stack["t"])
}

func (c *current) onSTRUCTToken1() (any, error) {
	return NewKeywordLiteral(c), nil
}

func (p *parser) callonSTRUCTToken1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSTRUCTToken1()
}

func (c *current) onUNION1(comments, t any) (any, error) {
	kw := NewKeyword(comments.([]*Comment), t.(*KeywordLiteral), NewLocationFromCurrent(c))

	return &UnionKeyword{Keyword: kw}, nil
}

func (p *parser) callonUNION1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUNION1(stack["comments"], stack["t"])
}

func (c *current) onUNIONToken1() (any, error) {
	return NewKeywordLiteral(c), nil
}

func (p *parser) callonUNIONToken1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUNIONToken1()
}

func (c *current) onENUM1(comments, t any) (any, error) {
	kw := NewKeyword(comments.([]*Comment), t.(*KeywordLiteral), NewLocationFromCurrent(c))

	return &EnumKeyword{Keyword: kw}, nil
}

func (p *parser) callonENUM1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onENUM1(stack["comments"], stack["t"])
}

func (c *current) onENUMToken1() (any, error) {
	return NewKeywordLiteral(c), nil
}

func (p *parser) callonENUMToken1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onENUMToken1()
}

func (c *current) onINCLUDE1(comments, t any) (any, error) {
	kw := NewKeyword(comments.([]*Comment), t.(*KeywordLiteral), NewLocationFromCurrent(c))

	return &IncludeKeyword{Keyword: kw}, nil
}

func (p *parser) callonINCLUDE1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINCLUDE1(stack["comments"], stack["t"])
}

func (c *current) onINCLUDEToken1() (any, error) {
	return NewKeywordLiteral(c), nil
}

func (p *parser) callonINCLUDEToken1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINCLUDEToken1()
}

func (c *current) onCPPINCLUDE1(comments, t any) (any, error) {
	kw := NewKeyword(comments.([]*Comment), t.(*KeywordLiteral), NewLocationFromCurrent(c))

	return &CPPIncludeKeyword{Keyword: kw}, nil
}

func (p *parser) callonCPPINCLUDE1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCPPINCLUDE1(stack["comments"], stack["t"])
}

func (c *current) onCPPINCLUDEToken1() (any, error) {
	return NewKeywordLiteral(c), nil
}

func (p *parser) callonCPPINCLUDEToken1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCPPINCLUDEToken1()
}

func (c *current) onNAMESPACE1(comments, t any) (any, error) {
	kw := NewKeyword(comments.([]*Comment), t.(*KeywordLiteral), NewLocationFromCurrent(c))

	return &NamespaceKeyword{Keyword: kw}, nil
}

func (p *parser) callonNAMESPACE1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNAMESPACE1(stack["comments"], stack["t"])
}

func (c *current) onNAMESPACEToken1() (any, error) {
	return NewKeywordLiteral(c), nil
}

func (p *parser) callonNAMESPACEToken1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNAMESPACEToken1()
}

func (c *current) onCPPTYPE1(comments, t any) (any, error) {
	kw := NewKeyword(comments.([]*Comment), t.(*KeywordLiteral), NewLocationFromCurrent(c))

	return &CppTypeKeyword{Keyword: kw}, nil
}

func (p *parser) callonCPPTYPE1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCPPTYPE1(stack["comments"], stack["t"])
}

func (c *current) onCPPTYPEToken1() (any, error) {
	return NewKeywordLiteral(c), nil
}

func (p *parser) callonCPPTYPEToken1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCPPTYPEToken1()
}

func (c *current) onLBRK1(comments, t any) (any, error) {
	kw := NewKeyword(comments.([]*Comment), t.(*KeywordLiteral), NewLocationFromCurrent(c))

	return &LBrkKeyword{Keyword: kw}, nil
}

func (p *parser) callonLBRK1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLBRK1(stack["comments"], stack["t"])
}

func (c *current) onLBRKToken1() (any, error) {
	return NewKeywordLiteral(c), nil
}

func (p *parser) callonLBRKToken1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLBRKToken1()
}

func (c *current) onRBRK1(comments, t any) (any, error) {
	kw := NewKeyword(comments.([]*Comment), t.(*KeywordLiteral), NewLocationFromCurrent(c))

	return &RBrkKeyword{Keyword: kw}, nil
}

func (p *parser) callonRBRK1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRBRK1(stack["comments"], stack["t"])
}

func (c *current) onRBRKToken1() (any, error) {
	return NewKeywordLiteral(c), nil
}

func (p *parser) callonRBRKToken1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRBRKToken1()
}

func (c *current) onLCUR1(comments, t any) (any, error) {
	kw := NewKeyword(comments.([]*Comment), t.(*KeywordLiteral), NewLocationFromCurrent(c))

	return &LCurKeyword{Keyword: kw}, nil
}

func (p *parser) callonLCUR1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLCUR1(stack["comments"], stack["t"])
}

func (c *current) onRCUR1(comments, t any) (any, error) {
	kw := NewKeyword(comments.([]*Comment), t.(*KeywordLiteral), NewLocationFromCurrent(c))

	return &RCurKeyword{Keyword: kw}, nil
}

func (p *parser) callonRCUR1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRCUR1(stack["comments"], stack["t"])
}

func (c *current) onLCURToken1() (any, error) {
	return NewKeywordLiteral(c), nil
}

func (p *parser) callonLCURToken1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLCURToken1()
}

func (c *current) onRCURToken2() (any, error) {
	return NewKeywordLiteral(c), nil
}

func (p *parser) callonRCURToken2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRCURToken2()
}

func (c *current) onEQUAL1(comments, t any) (any, error) {
	kw := NewKeyword(comments.([]*Comment), t.(*KeywordLiteral), NewLocationFromCurrent(c))

	return &EqualKeyword{Keyword: kw}, nil
}

func (p *parser) callonEQUAL1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEQUAL1(stack["comments"], stack["t"])
}

func (c *current) onEQUALToken1() (any, error) {
	return NewKeywordLiteral(c), nil
}

func (p *parser) callonEQUALToken1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEQUALToken1()
}

func (c *current) onLPOINT1(comments, t any) (any, error) {
	kw := NewKeyword(comments.([]*Comment), t.(*KeywordLiteral), NewLocationFromCurrent(c))

	return &LPointKeyword{Keyword: kw}, nil
}

func (p *parser) callonLPOINT1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLPOINT1(stack["comments"], stack["t"])
}

func (c *current) onLPOINTToken1() (any, error) {
	return NewKeywordLiteral(c), nil
}

func (p *parser) callonLPOINTToken1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLPOINTToken1()
}

func (c *current) onRPOINT1(comments, t any) (any, error) {
	kw := NewKeyword(comments.([]*Comment), t.(*KeywordLiteral), NewLocationFromCurrent(c))

	return &RPointKeyword{Keyword: kw}, nil
}

func (p *parser) callonRPOINT1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRPOINT1(stack["comments"], stack["t"])
}

func (c *current) onRPOINTToken1() (any, error) {
	return NewKeywordLiteral(c), nil
}

func (p *parser) callonRPOINTToken1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRPOINTToken1()
}

func (c *current) onCOMMA1(comments, t any) (any, error) {
	kw := NewKeyword(comments.([]*Comment), t.(*KeywordLiteral), NewLocationFromCurrent(c))

	return &CommaKeyword{Keyword: kw}, nil
}

func (p *parser) callonCOMMA1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCOMMA1(stack["comments"], stack["t"])
}

func (c *current) onCOMMAToken1() (any, error) {
	return NewKeywordLiteral(c), nil
}

func (p *parser) callonCOMMAToken1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCOMMAToken1()
}

func (c *current) onLPAR1(comments, t any) (any, error) {
	kw := NewKeyword(comments.([]*Comment), t.(*KeywordLiteral), NewLocationFromCurrent(c))

	return &LParKeyword{Keyword: kw}, nil
}

func (p *parser) callonLPAR1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLPAR1(stack["comments"], stack["t"])
}

func (c *current) onLPARToken1() (any, error) {
	return NewKeywordLiteral(c), nil
}

func (p *parser) callonLPARToken1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLPARToken1()
}

func (c *current) onRPAR1(comments, t any) (any, error) {
	kw := NewKeyword(comments.([]*Comment), t.(*KeywordLiteral), NewLocationFromCurrent(c))

	return &RParKeyword{Keyword: kw}, nil
}

func (p *parser) callonRPAR1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRPAR1(stack["comments"], stack["t"])
}

func (c *current) onRPARToken1() (any, error) {
	return NewKeywordLiteral(c), nil
}

func (p *parser) callonRPARToken1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRPARToken1()
}

func (c *current) onCOLON1(comments, t any) (any, error) {
	kw := NewKeyword(comments.([]*Comment), t.(*KeywordLiteral), NewLocationFromCurrent(c))

	return &ColonKeyword{Keyword: kw}, nil
}

func (p *parser) callonCOLON1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCOLON1(stack["comments"], stack["t"])
}

func (c *current) onCOLONToken1() (any, error) {
	return NewKeywordLiteral(c), nil
}

func (p *parser) callonCOLONToken1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCOLONToken1()
}

func (c *current) onErrFieldIndex3() error {
	return InvalidFieldIndexError
}

func (p *parser) callonErrFieldIndex3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrFieldIndex3()
}

func (c *current) onErrFieldIndex1() (any, error) {
	// 消费到冒号或本行结束
	return NewBadFieldIndex(NewLocationFromCurrent(c)), nil
}

func (p *parser) callonErrFieldIndex1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrFieldIndex1()
}

func (c *current) onErrStructField3() error {
	return InvalidStructFieldError
}

func (p *parser) callonErrStructField3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrStructField3()
}

func (c *current) onErrStructField1() (any, error) {
	return NewBadField(NewLocationFromCurrent(c)), nil
}

func (p *parser) callonErrStructField1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrStructField1()
}

func (c *current) onErrStructIdentifier3() error {
	return InvalidStructIdentifierError
}

func (p *parser) callonErrStructIdentifier3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrStructIdentifier3()
}

func (c *current) onErrStructIdentifier1() (any, error) {
	// struct identifier 异常，consume 掉异常字符直到出现 '{' 为止
	t := NewBadIdentifier(NewLocationFromCurrent(c))

	return t, nil
}

func (p *parser) callonErrStructIdentifier1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrStructIdentifier1()
}

func (c *current) onErrStructRCUR3() error {
	return InvalidStructBlockRCURError
}

func (p *parser) callonErrStructRCUR3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrStructRCUR3()
}

func (c *current) onErrStructRCUR1() (any, error) {
	// 缺少 '}'，消费异常字符直到出现下一个 definition。TODO(jpf): 后面会加入 typedef 等定义，需要扩展补充
	return NewBadKeywordLiteral(c), nil
}

func (p *parser) callonErrStructRCUR1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrStructRCUR1()
}

func (c *current) onErrStructLCUR3() error {
	return InvalidStructBlockLCURError
}

func (p *parser) callonErrStructLCUR3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrStructLCUR3()
}

func (c *current) onErrStructLCUR1() (any, error) {
	// 缺少 '{'，消费异常字符直到出现下一个 Field 或者 '}'
	return NewBadKeywordLiteral(c), nil
}

func (p *parser) callonErrStructLCUR1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrStructLCUR1()
}

func (c *current) onErrUnionIdentifier3() error {
	return InvalidUnionIdentifierError
}

func (p *parser) callonErrUnionIdentifier3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrUnionIdentifier3()
}

func (c *current) onErrUnionIdentifier1() (any, error) {
	// identifier 异常，consume 掉异常字符直到出现 '{' 为止
	t := NewBadIdentifier(NewLocationFromCurrent(c))

	return t, nil
}

func (p *parser) callonErrUnionIdentifier1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrUnionIdentifier1()
}

func (c *current) onErrUnionRCUR3() error {
	return InvalidUnionBlockRCURError
}

func (p *parser) callonErrUnionRCUR3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrUnionRCUR3()
}

func (c *current) onErrUnionRCUR1() (any, error) {
	return NewBadKeywordLiteral(c), nil
}

func (p *parser) callonErrUnionRCUR1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrUnionRCUR1()
}

func (c *current) onErrUnionLCUR3() error {
	return InvalidUnionBlockLCURError
}

func (p *parser) callonErrUnionLCUR3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrUnionLCUR3()
}

func (c *current) onErrUnionLCUR1() (any, error) {
	// 缺少 '{'，消费异常字符直到出现下一个 Field 或者 '}'
	return "?", nil
}

func (p *parser) callonErrUnionLCUR1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrUnionLCUR1()
}

func (c *current) onErrUnionField3() error {
	return InvalidUnionFieldError
}

func (p *parser) callonErrUnionField3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrUnionField3()
}

func (c *current) onErrUnionField1() (any, error) {
	return NewBadField(NewLocationFromCurrent(c)), nil
}

func (p *parser) callonErrUnionField1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrUnionField1()
}

func (c *current) onErrExceptionIdentifier3() error {
	return InvalidExceptionIdentifierError
}

func (p *parser) callonErrExceptionIdentifier3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrExceptionIdentifier3()
}

func (c *current) onErrExceptionIdentifier1() (any, error) {
	// identifier 异常，consume 掉异常字符直到出现 '{' 为止
	t := NewBadIdentifier(NewLocationFromCurrent(c))

	return t, nil
}

func (p *parser) callonErrExceptionIdentifier1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrExceptionIdentifier1()
}

func (c *current) onErrExceptionRCUR3() error {
	return InvalidExceptionBlockRCURError
}

func (p *parser) callonErrExceptionRCUR3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrExceptionRCUR3()
}

func (c *current) onErrExceptionRCUR1() (any, error) {
	return NewBadKeywordLiteral(c), nil
}

func (p *parser) callonErrExceptionRCUR1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrExceptionRCUR1()
}

func (c *current) onErrExceptionLCUR3() error {
	return InvalidExceptionBlockLCURError
}

func (p *parser) callonErrExceptionLCUR3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrExceptionLCUR3()
}

func (c *current) onErrExceptionLCUR1() (any, error) {
	// 缺少 '{'，消费异常字符直到出现下一个 Field 或者 '}'
	return NewBadKeywordLiteral(c), nil
}

func (p *parser) callonErrExceptionLCUR1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrExceptionLCUR1()
}

func (c *current) onErrExceptionField3() error {
	return InvalidExceptionFieldError
}

func (p *parser) callonErrExceptionField3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrExceptionField3()
}

func (c *current) onErrExceptionField1() (any, error) {
	return NewBadField(NewLocationFromCurrent(c)), nil
}

func (p *parser) callonErrExceptionField1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrExceptionField1()
}

func (c *current) onErrEnumIdentifier3() error {
	return InvalidEnumIdentifierError
}

func (p *parser) callonErrEnumIdentifier3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrEnumIdentifier3()
}

func (c *current) onErrEnumIdentifier1() (any, error) {
	// enum identifier 异常，consume 掉异常字符直到出现 '{' 为止
	t := NewBadIdentifier(NewLocationFromCurrent(c))

	return t, nil
}

func (p *parser) callonErrEnumIdentifier1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrEnumIdentifier1()
}

func (c *current) onErrEnumRCUR3() error {
	return InvalidEnumBlockRCURError
}

func (p *parser) callonErrEnumRCUR3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrEnumRCUR3()
}

func (c *current) onErrEnumRCUR1() (any, error) {
	return NewBadKeywordLiteral(c), nil
}

func (p *parser) callonErrEnumRCUR1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrEnumRCUR1()
}

func (c *current) onErrEnumLCUR3() error {
	return InvalidEnumBlockLCURError
}

func (p *parser) callonErrEnumLCUR3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrEnumLCUR3()
}

func (c *current) onErrEnumLCUR1() (any, error) {
	// 缺少 '{'，消费异常字符直到出现下一个 Field 或者 '}'
	return NewBadKeywordLiteral(c), nil
}

func (p *parser) callonErrEnumLCUR1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrEnumLCUR1()
}

func (c *current) onErrEnumValue3() error {
	return InvalidEnumValueError
}

func (p *parser) callonErrEnumValue3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrEnumValue3()
}

func (c *current) onErrEnumValue1() (any, error) {
	return NewBadEnumValue(NewLocationFromCurrent(c)), nil
}

func (p *parser) callonErrEnumValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrEnumValue1()
}

func (c *current) onErrEnumValueIntConstant3() error {
	return InvalidEnumValueIntConstantError
}

func (p *parser) callonErrEnumValueIntConstant3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrEnumValueIntConstant3()
}

func (c *current) onErrEnumValueIntConstant1() (any, error) {
	return NewBadIntConstValue(NewLocationFromCurrent(c)), nil
}

func (p *parser) callonErrEnumValueIntConstant1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrEnumValueIntConstant1()
}

func (c *current) onErrTypedefIdentifier3() error {
	return InvalidTypedefIdentifierError
}

func (p *parser) callonErrTypedefIdentifier3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrTypedefIdentifier3()
}

func (c *current) onErrTypedefIdentifier1() (any, error) {
	t := NewBadIdentifier(NewLocationFromCurrent(c))
	return t, nil
}

func (p *parser) callonErrTypedefIdentifier1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrTypedefIdentifier1()
}

func (c *current) onErrConstIdentifier3() error {
	return InvalidConstIdentifierError
}

func (p *parser) callonErrConstIdentifier3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrConstIdentifier3()
}

func (c *current) onErrConstIdentifier1() (any, error) {
	t := NewBadIdentifier(NewLocationFromCurrent(c))

	return t, nil
}

func (p *parser) callonErrConstIdentifier1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrConstIdentifier1()
}

func (c *current) onErrConstMissingValue3() error {
	return InvalidConstMissingValueError
}

func (p *parser) callonErrConstMissingValue3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrConstMissingValue3()
}

func (c *current) onErrConstMissingValue1() (any, error) {
	return NewBadConstValue(NewLocationFromCurrent(c)), nil
}

func (p *parser) callonErrConstMissingValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrConstMissingValue1()
}

func (c *current) onErrConstConstValue3() error {
	return InvalidConstConstValueError
}

func (p *parser) callonErrConstConstValue3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrConstConstValue3()
}

func (c *current) onErrConstConstValue1() (any, error) {
	return NewBadConstValue(NewLocationFromCurrent(c)), nil
}

func (p *parser) callonErrConstConstValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrConstConstValue1()
}

func (c *current) onErrServiceIdentifier3() error {
	return InvalidServiceIdentifierError
}

func (p *parser) callonErrServiceIdentifier3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrServiceIdentifier3()
}

func (c *current) onErrServiceIdentifier1() (any, error) {
	// identifier 异常，consume 掉异常字符直到出现 '{' 为止
	t := NewBadIdentifier(NewLocationFromCurrent(c))

	return t, nil
}

func (p *parser) callonErrServiceIdentifier1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrServiceIdentifier1()
}

func (c *current) onErrServiceRCUR3() error {
	return InvalidServiceBlockRCURError
}

func (p *parser) callonErrServiceRCUR3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrServiceRCUR3()
}

func (c *current) onErrServiceRCUR1() (any, error) {
	return NewBadKeywordLiteral(c), nil
}

func (p *parser) callonErrServiceRCUR1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrServiceRCUR1()
}

func (c *current) onErrServiceFunction3() error {
	return InvalidServiceFunctionError
}

func (p *parser) callonErrServiceFunction3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrServiceFunction3()
}

func (c *current) onErrServiceFunction1() (any, error) {
	return NewBadFunction(NewLocationFromCurrent(c)), nil
}

func (p *parser) callonErrServiceFunction1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrServiceFunction1()
}

func (c *current) onErrFunctionIdentifier3() error {
	return InvalidFunctionIdentifierError
}

func (p *parser) callonErrFunctionIdentifier3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrFunctionIdentifier3()
}

func (c *current) onErrFunctionIdentifier1() (any, error) {
	// identifier 异常，consume 掉异常字符直到出现 '(' 为止
	t := NewBadIdentifier(NewLocationFromCurrent(c))

	return t, nil
}

func (p *parser) callonErrFunctionIdentifier1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrFunctionIdentifier1()
}

func (c *current) onErrFunctionArgument3() error {
	return InvalidFunctionArgumentError
}

func (p *parser) callonErrFunctionArgument3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrFunctionArgument3()
}

func (c *current) onErrFunctionArgument1() (any, error) {
	return NewBadField(NewLocationFromCurrent(c)), nil
}

func (p *parser) callonErrFunctionArgument1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrFunctionArgument1()
}

func (c *current) onErrLiteral1MissingRight3() error {
	return InvalidLiteral1MissingRightError
}

func (p *parser) callonErrLiteral1MissingRight3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrLiteral1MissingRight3()
}

func (c *current) onErrLiteral1MissingRight1() (any, error) {
	// 消费异常字符直到这行结束
	return NewBadLiteral(string(c.text), NewLocationFromCurrent(c)), nil
}

func (p *parser) callonErrLiteral1MissingRight1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrLiteral1MissingRight1()
}

func (c *current) onErrLiteral13() error {
	return InvalidLiteral1Error
}

func (p *parser) callonErrLiteral13() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrLiteral13()
}

func (c *current) onErrLiteral11() (any, error) {
	// 消费异常字符直到这行结束
	return NewBadLiteral(string(c.text), NewLocationFromCurrent(c)), nil
}

func (p *parser) callonErrLiteral11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrLiteral11()
}

func (c *current) onErrLiteral2MissingRight3() error {
	return InvalidLiteral2MissingRightError
}

func (p *parser) callonErrLiteral2MissingRight3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrLiteral2MissingRight3()
}

func (c *current) onErrLiteral2MissingRight1() (any, error) {
	// 消费异常字符直到这行结束
	return NewBadLiteral(string(c.text), NewLocationFromCurrent(c)), nil
}

func (p *parser) callonErrLiteral2MissingRight1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrLiteral2MissingRight1()
}

func (c *current) onErrLiteral23() error {
	return InvalidLiteral2Error
}

func (p *parser) callonErrLiteral23() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrLiteral23()
}

func (c *current) onErrLiteral21() (any, error) {
	// 消费异常字符直到这行结束
	return NewBadLiteral(string(c.text), NewLocationFromCurrent(c)), nil
}

func (p *parser) callonErrLiteral21() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrLiteral21()
}

func (c *current) onErrConst3() error {
	return InvalidConstError
}

func (p *parser) callonErrConst3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrConst3()
}

func (c *current) onErrConst1() (any, error) {
	// 消费异常字符直到这行结束
	return NewBadConst(NewLocationFromCurrent(c)), nil
}

func (p *parser) callonErrConst1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrConst1()
}

func (c *current) onErrTypedef3() error {
	return InvalidTypedefError
}

func (p *parser) callonErrTypedef3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrTypedef3()
}

func (c *current) onErrTypedef1() (any, error) {
	// 消费异常字符直到这行结束
	fmt.Println("text: ", string(c.text))
	return NewBadTypedef(NewLocationFromCurrent(c)), nil
}

func (p *parser) callonErrTypedef1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrTypedef1()
}

func (c *current) onErrEnum3() error {
	return InvalidEnumError
}

func (p *parser) callonErrEnum3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrEnum3()
}

func (c *current) onErrEnum1() (any, error) {
	// 消费异常字符直到这行结束
	return NewBadEnum(NewLocationFromCurrent(c)), nil
}

func (p *parser) callonErrEnum1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrEnum1()
}

func (c *current) onErrService3() error {
	return InvalidServiceError
}

func (p *parser) callonErrService3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrService3()
}

func (c *current) onErrService1() (any, error) {
	// 消费异常字符直到这行结束
	return NewBadService(NewLocationFromCurrent(c)), nil
}

func (p *parser) callonErrService1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrService1()
}

func (c *current) onErrStruct3() error {
	return InvalidStructError
}

func (p *parser) callonErrStruct3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrStruct3()
}

func (c *current) onErrStruct1() (any, error) {
	// 消费异常字符直到这行结束
	return NewBadStruct(NewLocationFromCurrent(c)), nil
}

func (p *parser) callonErrStruct1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrStruct1()
}

func (c *current) onErrUnion3() error {
	return InvalidUnionError
}

func (p *parser) callonErrUnion3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrUnion3()
}

func (c *current) onErrUnion1() (any, error) {
	// 消费异常字符直到这行结束
	return NewBadUnion(NewLocationFromCurrent(c)), nil
}

func (p *parser) callonErrUnion1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrUnion1()
}

func (c *current) onErrException3() error {
	return InvalidExceptionError
}

func (p *parser) callonErrException3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrException3()
}

func (c *current) onErrException1() (any, error) {
	// 消费异常字符直到这行结束
	return NewBadException(NewLocationFromCurrent(c)), nil
}

func (p *parser) callonErrException1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrException1()
}

func (c *current) onErrDefinition3() error {
	return InvalidDefinitionError
}

func (p *parser) callonErrDefinition3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrDefinition3()
}

func (c *current) onErrDefinition1() (any, error) {
	// 消费异常字符直到这行结束
	return NewBadDefinition(NewLocationFromCurrent(c)), nil
}

func (p *parser) callonErrDefinition1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrDefinition1()
}

func (c *current) onErrInclude3() error {
	return InvalidIncludeError
}

func (p *parser) callonErrInclude3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrInclude3()
}

func (c *current) onErrInclude1() (any, error) {
	// 消费异常字符直到这行结束
	return NewBadInclude(NewLocationFromCurrent(c)), nil
}

func (p *parser) callonErrInclude1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrInclude1()
}

func (c *current) onErrCppInclude3() error {
	return InvalidCppIncludeError
}

func (p *parser) callonErrCppInclude3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrCppInclude3()
}

func (c *current) onErrCppInclude1() (any, error) {
	// 消费异常字符直到这行结束
	return NewBadCPPInclude(NewLocationFromCurrent(c)), nil
}

func (p *parser) callonErrCppInclude1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrCppInclude1()
}

func (c *current) onErrNamespace3() error {
	return InvalidNamespaceError
}

func (p *parser) callonErrNamespace3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrNamespace3()
}

func (c *current) onErrNamespace1() (any, error) {
	// 消费异常字符直到这行结束
	return NewBadNamespace(NewLocationFromCurrent(c)), nil
}

func (p *parser) callonErrNamespace1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrNamespace1()
}

func (c *current) onErrHeader3() error {
	return InvalidHeaderError
}

func (p *parser) callonErrHeader3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrHeader3()
}

func (c *current) onErrHeader1() (any, error) {
	// 消费异常字符直到这行结束
	return NewBadHeader(NewLocationFromCurrent(c)), nil
}

func (p *parser) callonErrHeader1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrHeader1()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//	input := "input"
//	stats := Stats{}
//	_, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//	if err != nil {
//	    log.Panicln(err)
//	}
//	b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//	if err != nil {
//	    log.Panicln(err)
//	}
//	fmt.Println(string(b))
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value any) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value any) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i any, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (any, error) {
	b, err := io.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (any, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]any

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        any
}

type choiceExpr struct {
	pos          position
	alternatives []any
}

type actionExpr struct {
	pos  position
	expr any
	run  func(*parser) (any, error)
}

type recoveryExpr struct {
	pos          position
	expr         any
	recoverExpr  any
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []any
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  any
}

type expr struct {
	pos  position
	expr any
}

type (
	andExpr        expr
	notExpr        expr
	zeroOrOneExpr  expr
	zeroOrMoreExpr expr
	oneOrMoreExpr  expr
)

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   any
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[any]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]any
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]any
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]any)
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr any) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]any, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) in(s string) string {
	p.depth++
	return p.print(strings.Repeat(" ", p.depth)+">", s)
}

func (p *parser) out(s string) string {
	p.depth--
	return p.print(strings.Repeat(" ", p.depth)+"<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() any
}

var statePool = &sync.Pool{
	New: func() any { return make(storeDict) },
}

func (sd storeDict) Discard() {
	for k := range sd {
		delete(sd, k)
	}
	statePool.Put(sd)
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := statePool.Get().(storeDict)
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state.Discard()
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node any) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node any, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[any]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[any]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val any, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRule(rule *rule) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}

	if p.memoize {
		res, ok := p.getMemoized(rule)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
	}

	start := p.pt
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}

	if p.memoize {
		p.setMemoized(start, rule, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr any) (any, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val any
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]any, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
