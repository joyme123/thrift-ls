// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"sync"
	"unicode"
	"unicode/utf8"
)

func toStringSlice(strs any) []string {
	if strs == nil {
		return nil
	}

	items := strs.([]any)
	ret := make([]string, 0, len(items))
	for i := range items {
		var item string
		if _, ok := items[i].([]interface{}); ok {
			data := items[i].([]interface{})[1]
			if bs, ok := data.([]uint8); ok {
				item = string(bs)
			} else {
				item = items[i].([]interface{})[1].(string)
			}
		} else {
			item = items[i].(string)
		}

		ret = append(ret, item)
	}

	return ret
}

func toFieldSlice(fields any) []*Field {
	if fields == nil {
		return nil
	}

	items := fields.([]any)
	ret := make([]*Field, 0, len(items))
	for i := range items {
		item := items[i].(*Field)
		ret = append(ret, item)
	}
	return ret
}

func toConstValueSlice(values any) []*ConstValue {
	if values == nil {
		return nil
	}

	items := values.([]any)
	ret := make([]*ConstValue, 0, len(items))
	for i := range items {
		item := items[i].(*ConstValue)
		ret = append(ret, item)
	}
	return ret
}

func toString(text any) string {
	if text == nil {
		return ""
	}

	data := text.([]interface{})

	ret := bytes.NewBuffer(nil)
	for i := range data {
		ret.WriteString(data[i].(string))
	}

	return ret.String()
}

func toAnnotationSlice(annos any) []*Annotation {
	if annos == nil {
		return nil
	}
	items := annos.([]any)
	ret := make([]*Annotation, 0, len(items))
	for i := range items {
		ret = append(ret, items[i].(*Annotation))
	}

	return ret
}

func toHeaderSlice(headers any) []Header {
	if headers == nil {
		return nil
	}
	items := headers.([]any)
	ret := make([]Header, 0, len(items))
	for i := range items {
		ret = append(ret, items[i].(Header))
	}
	return ret
}

func toDefinitionSlice(defs any) []Definition {
	if defs == nil {
		return nil
	}
	items := defs.([]any)
	ret := make([]Definition, 0, len(items))
	for i := range items {
		ret = append(ret, items[i].(Definition))
	}
	return ret
}

func toEnumValueSlice(v any) []*EnumValue {
	if v == nil {
		return nil
	}
	values := v.([]any)

	ret := make([]*EnumValue, 0, len(values))
	value := int64(0)
	for i := range values {
		enumV := values[i].(*EnumValue)
		if enumV.ValueNode == nil {
			enumV.Value = value
		} else {
			value = enumV.Value
		}
		value++
		ret = append(ret, enumV)
	}
	return ret
}

func toFunctionSlice(fns any) []*Function {
	if fns == nil {
		return nil
	}
	items := fns.([]any)
	ret := make([]*Function, 0, len(items))
	for i := range items {
		ret = append(ret, items[i].(*Function))
	}
	return ret
}

var g = &grammar{
	rules: []*rule{
		{
			name: "Document",
			pos:  position{line: 145, col: 1, offset: 2492},
			expr: &recoveryExpr{
				pos: position{line: 145, col: 12, offset: 2503},
				expr: &recoveryExpr{
					pos: position{line: 145, col: 12, offset: 2503},
					expr: &actionExpr{
						pos: position{line: 145, col: 12, offset: 2503},
						run: (*parser).callonDocument3,
						expr: &seqExpr{
							pos: position{line: 145, col: 12, offset: 2503},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 145, col: 12, offset: 2503},
									label: "headers",
									expr: &zeroOrMoreExpr{
										pos: position{line: 145, col: 20, offset: 2511},
										expr: &ruleRefExpr{
											pos:  position{line: 145, col: 20, offset: 2511},
											name: "Header",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 145, col: 29, offset: 2520},
									label: "defs",
									expr: &zeroOrMoreExpr{
										pos: position{line: 145, col: 34, offset: 2525},
										expr: &ruleRefExpr{
											pos:  position{line: 145, col: 34, offset: 2525},
											name: "Definition",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 145, col: 46, offset: 2537},
									name: "ReservedComments",
								},
								&notExpr{
									pos: position{line: 145, col: 63, offset: 2554},
									expr: &anyMatcher{
										line: 145, col: 64, offset: 2555,
									},
								},
							},
						},
					},
					recoverExpr: &ruleRefExpr{
						pos:  position{line: 147, col: 17, offset: 2676},
						name: "ErrHeader",
					},
					failureLabel: []string{
						"errHeader",
					},
				},
				recoverExpr: &ruleRefExpr{
					pos:  position{line: 147, col: 45, offset: 2704},
					name: "ErrDefinition",
				},
				failureLabel: []string{
					"errDefinition",
				},
			},
		},
		{
			name: "Header",
			pos:  position{line: 149, col: 1, offset: 2719},
			expr: &recoveryExpr{
				pos: position{line: 149, col: 10, offset: 2728},
				expr: &recoveryExpr{
					pos: position{line: 149, col: 10, offset: 2728},
					expr: &recoveryExpr{
						pos: position{line: 149, col: 10, offset: 2728},
						expr: &choiceExpr{
							pos: position{line: 149, col: 10, offset: 2728},
							alternatives: []any{
								&actionExpr{
									pos: position{line: 149, col: 10, offset: 2728},
									run: (*parser).callonHeader5,
									expr: &seqExpr{
										pos: position{line: 149, col: 10, offset: 2728},
										exprs: []any{
											&ruleRefExpr{
												pos:  position{line: 149, col: 10, offset: 2728},
												name: "ReservedComments",
											},
											&labeledExpr{
												pos:   position{line: 149, col: 27, offset: 2745},
												label: "v",
												expr: &choiceExpr{
													pos: position{line: 149, col: 30, offset: 2748},
													alternatives: []any{
														&ruleRefExpr{
															pos:  position{line: 149, col: 30, offset: 2748},
															name: "Include",
														},
														&ruleRefExpr{
															pos:  position{line: 149, col: 40, offset: 2758},
															name: "CppInclude",
														},
														&ruleRefExpr{
															pos:  position{line: 149, col: 53, offset: 2771},
															name: "Namespace",
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 149, col: 64, offset: 2782},
												name: "ReservedEndLineComments",
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 152, col: 5, offset: 2862},
									run: (*parser).callonHeader14,
									expr: &labeledExpr{
										pos:   position{line: 152, col: 5, offset: 2862},
										label: "x",
										expr: &seqExpr{
											pos: position{line: 152, col: 8, offset: 2865},
											exprs: []any{
												&notExpr{
													pos: position{line: 152, col: 8, offset: 2865},
													expr: &ruleRefExpr{
														pos:  position{line: 152, col: 10, offset: 2867},
														name: "Definition",
													},
												},
												&ruleRefExpr{
													pos:  position{line: 152, col: 22, offset: 2879},
													name: "ReservedComments",
												},
												&andExpr{
													pos: position{line: 152, col: 39, offset: 2896},
													expr: &oneOrMoreExpr{
														pos: position{line: 152, col: 41, offset: 2898},
														expr: &anyMatcher{
															line: 152, col: 41, offset: 2898,
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 152, col: 45, offset: 2902},
													run: (*parser).callonHeader23,
												},
												&throwExpr{
													pos:   position{line: 158, col: 3, offset: 3103},
													label: "errHeader",
												},
											},
										},
									},
								},
							},
						},
						recoverExpr: &ruleRefExpr{
							pos:  position{line: 162, col: 18, offset: 3268},
							name: "ErrInclude",
						},
						failureLabel: []string{
							"errInclude",
						},
					},
					recoverExpr: &ruleRefExpr{
						pos:  position{line: 162, col: 47, offset: 3297},
						name: "ErrorCppInclude",
					},
					failureLabel: []string{
						"errCppInclude",
					},
				},
				recoverExpr: &ruleRefExpr{
					pos:  position{line: 162, col: 80, offset: 3330},
					name: "ErrorNamespace",
				},
				failureLabel: []string{
					"errNamespace",
				},
			},
		},
		{
			name: "Include",
			pos:  position{line: 164, col: 1, offset: 3346},
			expr: &choiceExpr{
				pos: position{line: 164, col: 11, offset: 3356},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 164, col: 11, offset: 3356},
						run: (*parser).callonInclude2,
						expr: &seqExpr{
							pos: position{line: 164, col: 11, offset: 3356},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 164, col: 11, offset: 3356},
									name: "INCLUDE",
								},
								&labeledExpr{
									pos:   position{line: 164, col: 19, offset: 3364},
									label: "include",
									expr: &ruleRefExpr{
										pos:  position{line: 164, col: 27, offset: 3372},
										name: "Literal",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 170, col: 5, offset: 3547},
						run: (*parser).callonInclude7,
						expr: &labeledExpr{
							pos:   position{line: 170, col: 5, offset: 3547},
							label: "x",
							expr: &seqExpr{
								pos: position{line: 170, col: 8, offset: 3550},
								exprs: []any{
									&andExpr{
										pos: position{line: 170, col: 8, offset: 3550},
										expr: &seqExpr{
											pos: position{line: 170, col: 10, offset: 3552},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 170, col: 10, offset: 3552},
													name: "INCLUDE",
												},
												&zeroOrMoreExpr{
													pos: position{line: 170, col: 18, offset: 3560},
													expr: &anyMatcher{
														line: 170, col: 18, offset: 3560,
													},
												},
											},
										},
									},
									&throwExpr{
										pos:   position{line: 170, col: 22, offset: 3564},
										label: "errInclude",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CppInclude",
			pos:  position{line: 175, col: 1, offset: 3611},
			expr: &choiceExpr{
				pos: position{line: 175, col: 15, offset: 3625},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 175, col: 15, offset: 3625},
						run: (*parser).callonCppInclude2,
						expr: &seqExpr{
							pos: position{line: 175, col: 15, offset: 3625},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 175, col: 15, offset: 3625},
									name: "CPPINCLUDE",
								},
								&labeledExpr{
									pos:   position{line: 175, col: 26, offset: 3636},
									label: "include",
									expr: &ruleRefExpr{
										pos:  position{line: 175, col: 34, offset: 3644},
										name: "Literal",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 181, col: 5, offset: 3822},
						run: (*parser).callonCppInclude7,
						expr: &labeledExpr{
							pos:   position{line: 181, col: 5, offset: 3822},
							label: "x",
							expr: &seqExpr{
								pos: position{line: 181, col: 8, offset: 3825},
								exprs: []any{
									&andExpr{
										pos: position{line: 181, col: 8, offset: 3825},
										expr: &seqExpr{
											pos: position{line: 181, col: 10, offset: 3827},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 181, col: 10, offset: 3827},
													name: "CPPINCLUDE",
												},
												&zeroOrMoreExpr{
													pos: position{line: 181, col: 21, offset: 3838},
													expr: &anyMatcher{
														line: 181, col: 21, offset: 3838,
													},
												},
											},
										},
									},
									&throwExpr{
										pos:   position{line: 181, col: 25, offset: 3842},
										label: "errCppInclude",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Namespace",
			pos:  position{line: 186, col: 1, offset: 3892},
			expr: &choiceExpr{
				pos: position{line: 186, col: 14, offset: 3905},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 186, col: 14, offset: 3905},
						run: (*parser).callonNamespace2,
						expr: &seqExpr{
							pos: position{line: 186, col: 14, offset: 3905},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 186, col: 14, offset: 3905},
									name: "NAMESPACE",
								},
								&labeledExpr{
									pos:   position{line: 186, col: 24, offset: 3915},
									label: "language",
									expr: &ruleRefExpr{
										pos:  position{line: 186, col: 33, offset: 3924},
										name: "NamespaceScope",
									},
								},
								&labeledExpr{
									pos:   position{line: 186, col: 48, offset: 3939},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 186, col: 53, offset: 3944},
										name: "Identifier",
									},
								},
								&labeledExpr{
									pos:   position{line: 186, col: 64, offset: 3955},
									label: "annotations",
									expr: &zeroOrOneExpr{
										pos: position{line: 186, col: 76, offset: 3967},
										expr: &ruleRefExpr{
											pos:  position{line: 186, col: 76, offset: 3967},
											name: "Annotations",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 195, col: 5, offset: 4205},
						run: (*parser).callonNamespace12,
						expr: &labeledExpr{
							pos:   position{line: 195, col: 5, offset: 4205},
							label: "x",
							expr: &seqExpr{
								pos: position{line: 195, col: 8, offset: 4208},
								exprs: []any{
									&andExpr{
										pos: position{line: 195, col: 8, offset: 4208},
										expr: &seqExpr{
											pos: position{line: 195, col: 10, offset: 4210},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 195, col: 10, offset: 4210},
													name: "NAMESPACE",
												},
												&zeroOrMoreExpr{
													pos: position{line: 195, col: 20, offset: 4220},
													expr: &anyMatcher{
														line: 195, col: 20, offset: 4220,
													},
												},
											},
										},
									},
									&throwExpr{
										pos:   position{line: 195, col: 24, offset: 4224},
										label: "errNamespace",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NamespaceScope",
			pos:  position{line: 199, col: 1, offset: 4272},
			expr: &choiceExpr{
				pos: position{line: 199, col: 19, offset: 4290},
				alternatives: []any{
					&seqExpr{
						pos: position{line: 199, col: 19, offset: 4290},
						exprs: []any{
							&ruleRefExpr{
								pos:  position{line: 199, col: 19, offset: 4290},
								name: "ReservedComments",
							},
							&litMatcher{
								pos:        position{line: 200, col: 5, offset: 4311},
								val:        "*",
								ignoreCase: false,
								want:       "\"*\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 200, col: 9, offset: 4315},
								expr: &ruleRefExpr{
									pos:  position{line: 200, col: 9, offset: 4315},
									name: "Indent",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 201, col: 7, offset: 4329},
						name: "Identifier",
					},
				},
			},
		},
		{
			name: "Definition",
			pos:  position{line: 203, col: 1, offset: 4341},
			expr: &recoveryExpr{
				pos: position{line: 203, col: 14, offset: 4354},
				expr: &recoveryExpr{
					pos: position{line: 203, col: 14, offset: 4354},
					expr: &recoveryExpr{
						pos: position{line: 203, col: 14, offset: 4354},
						expr: &recoveryExpr{
							pos: position{line: 203, col: 14, offset: 4354},
							expr: &recoveryExpr{
								pos: position{line: 203, col: 14, offset: 4354},
								expr: &recoveryExpr{
									pos: position{line: 203, col: 14, offset: 4354},
									expr: &recoveryExpr{
										pos: position{line: 203, col: 14, offset: 4354},
										expr: &choiceExpr{
											pos: position{line: 203, col: 14, offset: 4354},
											alternatives: []any{
												&actionExpr{
													pos: position{line: 203, col: 14, offset: 4354},
													run: (*parser).callonDefinition9,
													expr: &seqExpr{
														pos: position{line: 203, col: 14, offset: 4354},
														exprs: []any{
															&labeledExpr{
																pos:   position{line: 203, col: 14, offset: 4354},
																label: "comments",
																expr: &ruleRefExpr{
																	pos:  position{line: 203, col: 23, offset: 4363},
																	name: "ReservedComments",
																},
															},
															&labeledExpr{
																pos:   position{line: 203, col: 40, offset: 4380},
																label: "v",
																expr: &choiceExpr{
																	pos: position{line: 203, col: 43, offset: 4383},
																	alternatives: []any{
																		&ruleRefExpr{
																			pos:  position{line: 203, col: 43, offset: 4383},
																			name: "Const",
																		},
																		&ruleRefExpr{
																			pos:  position{line: 203, col: 51, offset: 4391},
																			name: "Typedef",
																		},
																		&ruleRefExpr{
																			pos:  position{line: 203, col: 61, offset: 4401},
																			name: "Enum",
																		},
																		&ruleRefExpr{
																			pos:  position{line: 203, col: 68, offset: 4408},
																			name: "Service",
																		},
																		&ruleRefExpr{
																			pos:  position{line: 203, col: 78, offset: 4418},
																			name: "Struct",
																		},
																		&ruleRefExpr{
																			pos:  position{line: 203, col: 87, offset: 4427},
																			name: "Union",
																		},
																		&ruleRefExpr{
																			pos:  position{line: 203, col: 95, offset: 4435},
																			name: "Exception",
																		},
																	},
																},
															},
															&zeroOrOneExpr{
																pos: position{line: 203, col: 106, offset: 4446},
																expr: &ruleRefExpr{
																	pos:  position{line: 203, col: 106, offset: 4446},
																	name: "Annotations",
																},
															},
															&ruleRefExpr{
																pos:  position{line: 203, col: 119, offset: 4459},
																name: "ReservedEndLineComments",
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 208, col: 5, offset: 4604},
													run: (*parser).callonDefinition25,
													expr: &labeledExpr{
														pos:   position{line: 208, col: 5, offset: 4604},
														label: "x",
														expr: &seqExpr{
															pos: position{line: 208, col: 8, offset: 4607},
															exprs: []any{
																&ruleRefExpr{
																	pos:  position{line: 208, col: 8, offset: 4607},
																	name: "ReservedComments",
																},
																&andExpr{
																	pos: position{line: 208, col: 25, offset: 4624},
																	expr: &oneOrMoreExpr{
																		pos: position{line: 208, col: 27, offset: 4626},
																		expr: &anyMatcher{
																			line: 208, col: 27, offset: 4626,
																		},
																	},
																},
																&andCodeExpr{
																	pos: position{line: 208, col: 31, offset: 4630},
																	run: (*parser).callonDefinition32,
																},
																&throwExpr{
																	pos:   position{line: 214, col: 3, offset: 4830},
																	label: "errDefinition",
																},
															},
														},
													},
												},
											},
										},
										recoverExpr: &ruleRefExpr{
											pos:  position{line: 217, col: 16, offset: 4964},
											name: "ErrConst",
										},
										failureLabel: []string{
											"errConst",
										},
									},
									recoverExpr: &ruleRefExpr{
										pos:  position{line: 217, col: 40, offset: 4988},
										name: "ErrTypedef",
									},
									failureLabel: []string{
										"errTypedef",
									},
								},
								recoverExpr: &ruleRefExpr{
									pos:  position{line: 217, col: 63, offset: 5011},
									name: "ErrEnum",
								},
								failureLabel: []string{
									"errEnum",
								},
							},
							recoverExpr: &ruleRefExpr{
								pos:  position{line: 217, col: 86, offset: 5034},
								name: "ErrService",
							},
							failureLabel: []string{
								"errService",
							},
						},
						recoverExpr: &ruleRefExpr{
							pos:  position{line: 217, col: 111, offset: 5059},
							name: "ErrStruct",
						},
						failureLabel: []string{
							"errStruct",
						},
					},
					recoverExpr: &ruleRefExpr{
						pos:  position{line: 217, col: 134, offset: 5082},
						name: "ErrUnion",
					},
					failureLabel: []string{
						"errUnion",
					},
				},
				recoverExpr: &ruleRefExpr{
					pos:  position{line: 217, col: 160, offset: 5108},
					name: "ErrException",
				},
				failureLabel: []string{
					"errException",
				},
			},
		},
		{
			name: "Const",
			pos:  position{line: 219, col: 1, offset: 5122},
			expr: &recoveryExpr{
				pos: position{line: 219, col: 9, offset: 5130},
				expr: &recoveryExpr{
					pos: position{line: 219, col: 9, offset: 5130},
					expr: &recoveryExpr{
						pos: position{line: 219, col: 9, offset: 5130},
						expr: &choiceExpr{
							pos: position{line: 219, col: 9, offset: 5130},
							alternatives: []any{
								&actionExpr{
									pos: position{line: 219, col: 9, offset: 5130},
									run: (*parser).callonConst5,
									expr: &seqExpr{
										pos: position{line: 219, col: 9, offset: 5130},
										exprs: []any{
											&ruleRefExpr{
												pos:  position{line: 219, col: 9, offset: 5130},
												name: "CONST",
											},
											&labeledExpr{
												pos:   position{line: 219, col: 15, offset: 5136},
												label: "t",
												expr: &ruleRefExpr{
													pos:  position{line: 219, col: 17, offset: 5138},
													name: "FieldType",
												},
											},
											&labeledExpr{
												pos:   position{line: 219, col: 27, offset: 5148},
												label: "name",
												expr: &ruleRefExpr{
													pos:  position{line: 219, col: 32, offset: 5153},
													name: "DefinitionIdentifier",
												},
											},
											&labeledExpr{
												pos:   position{line: 219, col: 53, offset: 5174},
												label: "v",
												expr: &ruleRefExpr{
													pos:  position{line: 219, col: 55, offset: 5176},
													name: "ConstEqualValue",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 219, col: 71, offset: 5192},
												expr: &ruleRefExpr{
													pos:  position{line: 219, col: 71, offset: 5192},
													name: "ListSeparator",
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 221, col: 5, offset: 5319},
									run: (*parser).callonConst16,
									expr: &labeledExpr{
										pos:   position{line: 221, col: 5, offset: 5319},
										label: "x",
										expr: &seqExpr{
											pos: position{line: 221, col: 8, offset: 5322},
											exprs: []any{
												&andExpr{
													pos: position{line: 221, col: 8, offset: 5322},
													expr: &seqExpr{
														pos: position{line: 221, col: 10, offset: 5324},
														exprs: []any{
															&ruleRefExpr{
																pos:  position{line: 221, col: 10, offset: 5324},
																name: "CONST",
															},
															&zeroOrMoreExpr{
																pos: position{line: 221, col: 16, offset: 5330},
																expr: &anyMatcher{
																	line: 221, col: 16, offset: 5330,
																},
															},
														},
													},
												},
												&throwExpr{
													pos:   position{line: 221, col: 20, offset: 5334},
													label: "errConst",
												},
											},
										},
									},
								},
							},
						},
						recoverExpr: &ruleRefExpr{
							pos:  position{line: 223, col: 21, offset: 5395},
							name: "ErrConstIdentifier",
						},
						failureLabel: []string{
							"errIdentifier",
						},
					},
					recoverExpr: &ruleRefExpr{
						pos:  position{line: 223, col: 65, offset: 5439},
						name: "ErrConstMissingValue",
					},
					failureLabel: []string{
						"errConstMissingValue",
					},
				},
				recoverExpr: &ruleRefExpr{
					pos:  position{line: 223, col: 109, offset: 5483},
					name: "ErrConstConstValue",
				},
				failureLabel: []string{
					"errConstConstValue",
				},
			},
		},
		{
			name: "ConstEqualValue",
			pos:  position{line: 225, col: 1, offset: 5503},
			expr: &choiceExpr{
				pos: position{line: 225, col: 19, offset: 5521},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 225, col: 19, offset: 5521},
						run: (*parser).callonConstEqualValue2,
						expr: &seqExpr{
							pos: position{line: 225, col: 19, offset: 5521},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 225, col: 19, offset: 5521},
									name: "EQUAL",
								},
								&labeledExpr{
									pos:   position{line: 225, col: 25, offset: 5527},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 225, col: 27, offset: 5529},
										name: "ConstValue",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 227, col: 5, offset: 5561},
						run: (*parser).callonConstEqualValue7,
						expr: &labeledExpr{
							pos:   position{line: 227, col: 5, offset: 5561},
							label: "x",
							expr: &seqExpr{
								pos: position{line: 227, col: 8, offset: 5564},
								exprs: []any{
									&notExpr{
										pos: position{line: 227, col: 8, offset: 5564},
										expr: &ruleRefExpr{
											pos:  position{line: 227, col: 9, offset: 5565},
											name: "EQUAL",
										},
									},
									&throwExpr{
										pos:   position{line: 227, col: 15, offset: 5571},
										label: "errConstMissingValue",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 229, col: 5, offset: 5628},
						run: (*parser).callonConstEqualValue13,
						expr: &labeledExpr{
							pos:   position{line: 229, col: 5, offset: 5628},
							label: "x",
							expr: &seqExpr{
								pos: position{line: 229, col: 8, offset: 5631},
								exprs: []any{
									&ruleRefExpr{
										pos:  position{line: 229, col: 8, offset: 5631},
										name: "EQUAL",
									},
									&throwExpr{
										pos:   position{line: 229, col: 14, offset: 5637},
										label: "errConstConstValue",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Typedef",
			pos:  position{line: 233, col: 1, offset: 5691},
			expr: &recoveryExpr{
				pos: position{line: 233, col: 11, offset: 5701},
				expr: &choiceExpr{
					pos: position{line: 233, col: 11, offset: 5701},
					alternatives: []any{
						&actionExpr{
							pos: position{line: 233, col: 11, offset: 5701},
							run: (*parser).callonTypedef3,
							expr: &seqExpr{
								pos: position{line: 233, col: 11, offset: 5701},
								exprs: []any{
									&ruleRefExpr{
										pos:  position{line: 233, col: 11, offset: 5701},
										name: "TYPEDEF",
									},
									&labeledExpr{
										pos:   position{line: 233, col: 19, offset: 5709},
										label: "t",
										expr: &ruleRefExpr{
											pos:  position{line: 233, col: 21, offset: 5711},
											name: "FieldType",
										},
									},
									&labeledExpr{
										pos:   position{line: 233, col: 31, offset: 5721},
										label: "alias",
										expr: &ruleRefExpr{
											pos:  position{line: 233, col: 37, offset: 5727},
											name: "DefinitionIdentifier",
										},
									},
								},
							},
						},
						&actionExpr{
							pos: position{line: 235, col: 5, offset: 5842},
							run: (*parser).callonTypedef10,
							expr: &labeledExpr{
								pos:   position{line: 235, col: 5, offset: 5842},
								label: "x",
								expr: &seqExpr{
									pos: position{line: 235, col: 8, offset: 5845},
									exprs: []any{
										&andExpr{
											pos: position{line: 235, col: 8, offset: 5845},
											expr: &seqExpr{
												pos: position{line: 235, col: 10, offset: 5847},
												exprs: []any{
													&ruleRefExpr{
														pos:  position{line: 235, col: 10, offset: 5847},
														name: "TYPEDEF",
													},
													&zeroOrMoreExpr{
														pos: position{line: 235, col: 18, offset: 5855},
														expr: &anyMatcher{
															line: 235, col: 18, offset: 5855,
														},
													},
												},
											},
										},
										&throwExpr{
											pos:   position{line: 235, col: 22, offset: 5859},
											label: "errTypedef",
										},
									},
								},
							},
						},
					},
				},
				recoverExpr: &ruleRefExpr{
					pos:  position{line: 237, col: 21, offset: 5922},
					name: "ErrTypedefIdentifier",
				},
				failureLabel: []string{
					"errIdentifier",
				},
			},
		},
		{
			name: "Enum",
			pos:  position{line: 239, col: 1, offset: 5944},
			expr: &recoveryExpr{
				pos: position{line: 239, col: 8, offset: 5951},
				expr: &recoveryExpr{
					pos: position{line: 239, col: 8, offset: 5951},
					expr: &recoveryExpr{
						pos: position{line: 239, col: 8, offset: 5951},
						expr: &choiceExpr{
							pos: position{line: 239, col: 8, offset: 5951},
							alternatives: []any{
								&actionExpr{
									pos: position{line: 239, col: 8, offset: 5951},
									run: (*parser).callonEnum5,
									expr: &seqExpr{
										pos: position{line: 239, col: 8, offset: 5951},
										exprs: []any{
											&ruleRefExpr{
												pos:  position{line: 239, col: 8, offset: 5951},
												name: "ENUM",
											},
											&labeledExpr{
												pos:   position{line: 239, col: 13, offset: 5956},
												label: "name",
												expr: &ruleRefExpr{
													pos:  position{line: 239, col: 18, offset: 5961},
													name: "DefinitionIdentifier",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 239, col: 39, offset: 5982},
												name: "LCUR",
											},
											&labeledExpr{
												pos:   position{line: 239, col: 44, offset: 5987},
												label: "v",
												expr: &zeroOrMoreExpr{
													pos: position{line: 239, col: 46, offset: 5989},
													expr: &ruleRefExpr{
														pos:  position{line: 239, col: 46, offset: 5989},
														name: "EnumValueLine",
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 239, col: 61, offset: 6004},
												name: "RCUR",
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 242, col: 5, offset: 6122},
									run: (*parser).callonEnum15,
									expr: &labeledExpr{
										pos:   position{line: 242, col: 5, offset: 6122},
										label: "x",
										expr: &seqExpr{
											pos: position{line: 242, col: 8, offset: 6125},
											exprs: []any{
												&andExpr{
													pos: position{line: 242, col: 8, offset: 6125},
													expr: &seqExpr{
														pos: position{line: 242, col: 10, offset: 6127},
														exprs: []any{
															&ruleRefExpr{
																pos:  position{line: 242, col: 10, offset: 6127},
																name: "ENUM",
															},
															&zeroOrMoreExpr{
																pos: position{line: 242, col: 15, offset: 6132},
																expr: &anyMatcher{
																	line: 242, col: 15, offset: 6132,
																},
															},
														},
													},
												},
												&throwExpr{
													pos:   position{line: 242, col: 19, offset: 6136},
													label: "errEnum",
												},
											},
										},
									},
								},
							},
						},
						recoverExpr: &ruleRefExpr{
							pos:  position{line: 244, col: 21, offset: 6196},
							name: "ErrEnumIdentifier",
						},
						failureLabel: []string{
							"errIdentifier",
						},
					},
					recoverExpr: &ruleRefExpr{
						pos:  position{line: 244, col: 51, offset: 6226},
						name: "ErrEnumRCUR",
					},
					failureLabel: []string{
						"errRCUR",
					},
				},
				recoverExpr: &ruleRefExpr{
					pos:  position{line: 244, col: 80, offset: 6255},
					name: "ErrEnumValue",
				},
				failureLabel: []string{
					"errEnumValue",
				},
			},
		},
		{
			name: "EnumValueLine",
			pos:  position{line: 246, col: 1, offset: 6269},
			expr: &actionExpr{
				pos: position{line: 246, col: 17, offset: 6285},
				run: (*parser).callonEnumValueLine1,
				expr: &seqExpr{
					pos: position{line: 246, col: 17, offset: 6285},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 246, col: 17, offset: 6285},
							label: "comments",
							expr: &ruleRefExpr{
								pos:  position{line: 246, col: 26, offset: 6294},
								name: "ReservedComments",
							},
						},
						&labeledExpr{
							pos:   position{line: 246, col: 43, offset: 6311},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 246, col: 45, offset: 6313},
								name: "EnumValue",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 246, col: 55, offset: 6323},
							name: "ReservedEndLineComments",
						},
					},
				},
			},
		},
		{
			name: "EnumValue",
			pos:  position{line: 251, col: 1, offset: 6419},
			expr: &recoveryExpr{
				pos: position{line: 251, col: 14, offset: 6432},
				expr: &actionExpr{
					pos: position{line: 251, col: 14, offset: 6432},
					run: (*parser).callonEnumValue2,
					expr: &seqExpr{
						pos: position{line: 251, col: 14, offset: 6432},
						exprs: []any{
							&labeledExpr{
								pos:   position{line: 251, col: 14, offset: 6432},
								label: "name",
								expr: &ruleRefExpr{
									pos:  position{line: 251, col: 19, offset: 6437},
									name: "Identifier",
								},
							},
							&labeledExpr{
								pos:   position{line: 251, col: 30, offset: 6448},
								label: "value",
								expr: &zeroOrOneExpr{
									pos: position{line: 251, col: 36, offset: 6454},
									expr: &ruleRefExpr{
										pos:  position{line: 251, col: 37, offset: 6455},
										name: "EnumValueIntConstant",
									},
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 251, col: 60, offset: 6478},
								expr: &ruleRefExpr{
									pos:  position{line: 251, col: 60, offset: 6478},
									name: "Annotations",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 251, col: 73, offset: 6491},
								expr: &ruleRefExpr{
									pos:  position{line: 251, col: 73, offset: 6491},
									name: "ListSeparator",
								},
							},
						},
					},
				},
				recoverExpr: &ruleRefExpr{
					pos:  position{line: 261, col: 22, offset: 6813},
					name: "ErrEnumValueIntConstant",
				},
				failureLabel: []string{
					"errIntConstant",
				},
			},
		},
		{
			name: "Service",
			pos:  position{line: 263, col: 1, offset: 6838},
			expr: &recoveryExpr{
				pos: position{line: 263, col: 11, offset: 6848},
				expr: &recoveryExpr{
					pos: position{line: 263, col: 11, offset: 6848},
					expr: &recoveryExpr{
						pos: position{line: 263, col: 11, offset: 6848},
						expr: &choiceExpr{
							pos: position{line: 263, col: 11, offset: 6848},
							alternatives: []any{
								&actionExpr{
									pos: position{line: 263, col: 11, offset: 6848},
									run: (*parser).callonService5,
									expr: &seqExpr{
										pos: position{line: 263, col: 11, offset: 6848},
										exprs: []any{
											&ruleRefExpr{
												pos:  position{line: 263, col: 11, offset: 6848},
												name: "SERVICE",
											},
											&labeledExpr{
												pos:   position{line: 263, col: 19, offset: 6856},
												label: "name",
												expr: &ruleRefExpr{
													pos:  position{line: 263, col: 24, offset: 6861},
													name: "DefinitionIdentifier",
												},
											},
											&labeledExpr{
												pos:   position{line: 263, col: 45, offset: 6882},
												label: "extends",
												expr: &zeroOrOneExpr{
													pos: position{line: 263, col: 53, offset: 6890},
													expr: &seqExpr{
														pos: position{line: 263, col: 55, offset: 6892},
														exprs: []any{
															&ruleRefExpr{
																pos:  position{line: 263, col: 55, offset: 6892},
																name: "EXTENDS",
															},
															&ruleRefExpr{
																pos:  position{line: 263, col: 63, offset: 6900},
																name: "Identifier",
															},
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 263, col: 77, offset: 6914},
												name: "LCUR",
											},
											&labeledExpr{
												pos:   position{line: 263, col: 82, offset: 6919},
												label: "fns",
												expr: &zeroOrMoreExpr{
													pos: position{line: 263, col: 86, offset: 6923},
													expr: &ruleRefExpr{
														pos:  position{line: 263, col: 86, offset: 6923},
														name: "Function",
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 263, col: 96, offset: 6933},
												name: "RCUR",
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 270, col: 5, offset: 7167},
									run: (*parser).callonService20,
									expr: &labeledExpr{
										pos:   position{line: 270, col: 5, offset: 7167},
										label: "x",
										expr: &seqExpr{
											pos: position{line: 270, col: 8, offset: 7170},
											exprs: []any{
												&andExpr{
													pos: position{line: 270, col: 8, offset: 7170},
													expr: &seqExpr{
														pos: position{line: 270, col: 10, offset: 7172},
														exprs: []any{
															&ruleRefExpr{
																pos:  position{line: 270, col: 10, offset: 7172},
																name: "SERVICE",
															},
															&zeroOrMoreExpr{
																pos: position{line: 270, col: 18, offset: 7180},
																expr: &anyMatcher{
																	line: 270, col: 18, offset: 7180,
																},
															},
														},
													},
												},
												&throwExpr{
													pos:   position{line: 270, col: 22, offset: 7184},
													label: "errService",
												},
											},
										},
									},
								},
							},
						},
						recoverExpr: &ruleRefExpr{
							pos:  position{line: 272, col: 21, offset: 7247},
							name: "ErrServiceIdentifier",
						},
						failureLabel: []string{
							"errIdentifier",
						},
					},
					recoverExpr: &ruleRefExpr{
						pos:  position{line: 272, col: 54, offset: 7280},
						name: "ErrServiceRCUR",
					},
					failureLabel: []string{
						"errRCUR",
					},
				},
				recoverExpr: &ruleRefExpr{
					pos:  position{line: 272, col: 85, offset: 7311},
					name: "ErrServiceFunction",
				},
				failureLabel: []string{
					"errFunction",
				},
			},
		},
		{
			name: "Struct",
			pos:  position{line: 274, col: 1, offset: 7332},
			expr: &recoveryExpr{
				pos: position{line: 274, col: 10, offset: 7341},
				expr: &recoveryExpr{
					pos: position{line: 274, col: 10, offset: 7341},
					expr: &recoveryExpr{
						pos: position{line: 274, col: 10, offset: 7341},
						expr: &choiceExpr{
							pos: position{line: 274, col: 10, offset: 7341},
							alternatives: []any{
								&actionExpr{
									pos: position{line: 274, col: 10, offset: 7341},
									run: (*parser).callonStruct5,
									expr: &seqExpr{
										pos: position{line: 274, col: 10, offset: 7341},
										exprs: []any{
											&ruleRefExpr{
												pos:  position{line: 274, col: 10, offset: 7341},
												name: "STRUCT",
											},
											&labeledExpr{
												pos:   position{line: 274, col: 17, offset: 7348},
												label: "id",
												expr: &ruleRefExpr{
													pos:  position{line: 274, col: 20, offset: 7351},
													name: "DefinitionIdentifier",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 274, col: 41, offset: 7372},
												name: "LCUR",
											},
											&labeledExpr{
												pos:   position{line: 274, col: 46, offset: 7377},
												label: "fields",
												expr: &zeroOrMoreExpr{
													pos: position{line: 274, col: 53, offset: 7384},
													expr: &ruleRefExpr{
														pos:  position{line: 274, col: 53, offset: 7384},
														name: "FieldWithThrow",
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 274, col: 69, offset: 7400},
												name: "RCUR",
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 276, col: 5, offset: 7501},
									run: (*parser).callonStruct15,
									expr: &labeledExpr{
										pos:   position{line: 276, col: 5, offset: 7501},
										label: "x",
										expr: &seqExpr{
											pos: position{line: 276, col: 8, offset: 7504},
											exprs: []any{
												&andExpr{
													pos: position{line: 276, col: 8, offset: 7504},
													expr: &seqExpr{
														pos: position{line: 276, col: 10, offset: 7506},
														exprs: []any{
															&ruleRefExpr{
																pos:  position{line: 276, col: 10, offset: 7506},
																name: "STRUCT",
															},
															&zeroOrMoreExpr{
																pos: position{line: 276, col: 17, offset: 7513},
																expr: &anyMatcher{
																	line: 276, col: 17, offset: 7513,
																},
															},
														},
													},
												},
												&throwExpr{
													pos:   position{line: 276, col: 21, offset: 7517},
													label: "errStruct",
												},
											},
										},
									},
								},
							},
						},
						recoverExpr: &ruleRefExpr{
							pos:  position{line: 278, col: 21, offset: 7579},
							name: "ErrStructIdentifier",
						},
						failureLabel: []string{
							"errIdentifier",
						},
					},
					recoverExpr: &ruleRefExpr{
						pos:  position{line: 278, col: 53, offset: 7611},
						name: "ErrStructRCUR",
					},
					failureLabel: []string{
						"errRCUR",
					},
				},
				recoverExpr: &ruleRefExpr{
					pos:  position{line: 278, col: 81, offset: 7639},
					name: "ErrStructField",
				},
				failureLabel: []string{
					"errField",
				},
			},
		},
		{
			name: "Union",
			pos:  position{line: 280, col: 1, offset: 7655},
			expr: &recoveryExpr{
				pos: position{line: 280, col: 10, offset: 7664},
				expr: &recoveryExpr{
					pos: position{line: 280, col: 10, offset: 7664},
					expr: &recoveryExpr{
						pos: position{line: 280, col: 10, offset: 7664},
						expr: &choiceExpr{
							pos: position{line: 280, col: 10, offset: 7664},
							alternatives: []any{
								&actionExpr{
									pos: position{line: 280, col: 10, offset: 7664},
									run: (*parser).callonUnion5,
									expr: &seqExpr{
										pos: position{line: 280, col: 10, offset: 7664},
										exprs: []any{
											&ruleRefExpr{
												pos:  position{line: 280, col: 10, offset: 7664},
												name: "UNION",
											},
											&labeledExpr{
												pos:   position{line: 280, col: 16, offset: 7670},
												label: "name",
												expr: &ruleRefExpr{
													pos:  position{line: 280, col: 21, offset: 7675},
													name: "DefinitionIdentifier",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 280, col: 42, offset: 7696},
												name: "LCUR",
											},
											&labeledExpr{
												pos:   position{line: 280, col: 47, offset: 7701},
												label: "fields",
												expr: &zeroOrMoreExpr{
													pos: position{line: 280, col: 54, offset: 7708},
													expr: &ruleRefExpr{
														pos:  position{line: 280, col: 54, offset: 7708},
														name: "FieldWithThrow",
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 280, col: 70, offset: 7724},
												name: "RCUR",
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 282, col: 5, offset: 7826},
									run: (*parser).callonUnion15,
									expr: &labeledExpr{
										pos:   position{line: 282, col: 5, offset: 7826},
										label: "x",
										expr: &seqExpr{
											pos: position{line: 282, col: 8, offset: 7829},
											exprs: []any{
												&andExpr{
													pos: position{line: 282, col: 8, offset: 7829},
													expr: &seqExpr{
														pos: position{line: 282, col: 10, offset: 7831},
														exprs: []any{
															&ruleRefExpr{
																pos:  position{line: 282, col: 10, offset: 7831},
																name: "UNION",
															},
															&zeroOrMoreExpr{
																pos: position{line: 282, col: 16, offset: 7837},
																expr: &anyMatcher{
																	line: 282, col: 16, offset: 7837,
																},
															},
														},
													},
												},
												&throwExpr{
													pos:   position{line: 282, col: 20, offset: 7841},
													label: "errUnion",
												},
											},
										},
									},
								},
							},
						},
						recoverExpr: &ruleRefExpr{
							pos:  position{line: 284, col: 21, offset: 7902},
							name: "ErrUnionIdentifier",
						},
						failureLabel: []string{
							"errIdentifier",
						},
					},
					recoverExpr: &ruleRefExpr{
						pos:  position{line: 284, col: 52, offset: 7933},
						name: "ErrUnionRCUR",
					},
					failureLabel: []string{
						"errRCUR",
					},
				},
				recoverExpr: &ruleRefExpr{
					pos:  position{line: 284, col: 78, offset: 7959},
					name: "ErrUnionField",
				},
				failureLabel: []string{
					"errField",
				},
			},
		},
		{
			name: "Exception",
			pos:  position{line: 287, col: 1, offset: 7975},
			expr: &recoveryExpr{
				pos: position{line: 287, col: 14, offset: 7988},
				expr: &recoveryExpr{
					pos: position{line: 287, col: 14, offset: 7988},
					expr: &recoveryExpr{
						pos: position{line: 287, col: 14, offset: 7988},
						expr: &choiceExpr{
							pos: position{line: 287, col: 14, offset: 7988},
							alternatives: []any{
								&actionExpr{
									pos: position{line: 287, col: 14, offset: 7988},
									run: (*parser).callonException5,
									expr: &seqExpr{
										pos: position{line: 287, col: 14, offset: 7988},
										exprs: []any{
											&ruleRefExpr{
												pos:  position{line: 287, col: 14, offset: 7988},
												name: "EXCEPTION",
											},
											&labeledExpr{
												pos:   position{line: 287, col: 24, offset: 7998},
												label: "name",
												expr: &ruleRefExpr{
													pos:  position{line: 287, col: 29, offset: 8003},
													name: "DefinitionIdentifier",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 287, col: 50, offset: 8024},
												name: "LCUR",
											},
											&labeledExpr{
												pos:   position{line: 287, col: 55, offset: 8029},
												label: "fields",
												expr: &zeroOrMoreExpr{
													pos: position{line: 287, col: 62, offset: 8036},
													expr: &ruleRefExpr{
														pos:  position{line: 287, col: 62, offset: 8036},
														name: "FieldWithThrow",
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 287, col: 78, offset: 8052},
												name: "RCUR",
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 289, col: 5, offset: 8158},
									run: (*parser).callonException15,
									expr: &labeledExpr{
										pos:   position{line: 289, col: 5, offset: 8158},
										label: "x",
										expr: &seqExpr{
											pos: position{line: 289, col: 8, offset: 8161},
											exprs: []any{
												&andExpr{
													pos: position{line: 289, col: 8, offset: 8161},
													expr: &seqExpr{
														pos: position{line: 289, col: 10, offset: 8163},
														exprs: []any{
															&ruleRefExpr{
																pos:  position{line: 289, col: 10, offset: 8163},
																name: "EXCEPTION",
															},
															&zeroOrMoreExpr{
																pos: position{line: 289, col: 20, offset: 8173},
																expr: &anyMatcher{
																	line: 289, col: 20, offset: 8173,
																},
															},
														},
													},
												},
												&throwExpr{
													pos:   position{line: 289, col: 24, offset: 8177},
													label: "errException",
												},
											},
										},
									},
								},
							},
						},
						recoverExpr: &ruleRefExpr{
							pos:  position{line: 291, col: 21, offset: 8242},
							name: "ErrExceptionIdentifier",
						},
						failureLabel: []string{
							"errIdentifier",
						},
					},
					recoverExpr: &ruleRefExpr{
						pos:  position{line: 291, col: 56, offset: 8277},
						name: "ErrExceptionRCUR",
					},
					failureLabel: []string{
						"errRCUR",
					},
				},
				recoverExpr: &ruleRefExpr{
					pos:  position{line: 291, col: 86, offset: 8307},
					name: "ErrExceptionField",
				},
				failureLabel: []string{
					"errField",
				},
			},
		},
		{
			name: "FieldWithThrow",
			pos:  position{line: 294, col: 1, offset: 8327},
			expr: &choiceExpr{
				pos: position{line: 294, col: 18, offset: 8344},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 294, col: 18, offset: 8344},
						name: "Field",
					},
					&actionExpr{
						pos: position{line: 294, col: 26, offset: 8352},
						run: (*parser).callonFieldWithThrow3,
						expr: &labeledExpr{
							pos:   position{line: 294, col: 26, offset: 8352},
							label: "x",
							expr: &seqExpr{
								pos: position{line: 294, col: 30, offset: 8356},
								exprs: []any{
									&ruleRefExpr{
										pos:  position{line: 294, col: 30, offset: 8356},
										name: "ReservedComments",
									},
									&notExpr{
										pos: position{line: 294, col: 47, offset: 8373},
										expr: &choiceExpr{
											pos: position{line: 294, col: 49, offset: 8375},
											alternatives: []any{
												&seqExpr{
													pos: position{line: 294, col: 51, offset: 8377},
													exprs: []any{
														&litMatcher{
															pos:        position{line: 294, col: 51, offset: 8377},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
														&zeroOrMoreExpr{
															pos: position{line: 294, col: 55, offset: 8381},
															expr: &ruleRefExpr{
																pos:  position{line: 294, col: 55, offset: 8381},
																name: "Indent",
															},
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 294, col: 66, offset: 8392},
													name: "DefinitionStart",
												},
											},
										},
									},
									&throwExpr{
										pos:   position{line: 294, col: 84, offset: 8410},
										label: "errField",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Field",
			pos:  position{line: 298, col: 1, offset: 8455},
			expr: &actionExpr{
				pos: position{line: 298, col: 9, offset: 8463},
				run: (*parser).callonField1,
				expr: &seqExpr{
					pos: position{line: 298, col: 9, offset: 8463},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 298, col: 9, offset: 8463},
							label: "comments",
							expr: &ruleRefExpr{
								pos:  position{line: 298, col: 18, offset: 8472},
								name: "ReservedComments",
							},
						},
						&labeledExpr{
							pos:   position{line: 298, col: 35, offset: 8489},
							label: "index",
							expr: &ruleRefExpr{
								pos:  position{line: 298, col: 41, offset: 8495},
								name: "FieldId",
							},
						},
						&labeledExpr{
							pos:   position{line: 298, col: 49, offset: 8503},
							label: "required",
							expr: &zeroOrOneExpr{
								pos: position{line: 298, col: 58, offset: 8512},
								expr: &ruleRefExpr{
									pos:  position{line: 298, col: 58, offset: 8512},
									name: "FieldReq",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 298, col: 68, offset: 8522},
							label: "fieldType",
							expr: &ruleRefExpr{
								pos:  position{line: 298, col: 78, offset: 8532},
								name: "FieldType",
							},
						},
						&labeledExpr{
							pos:   position{line: 298, col: 88, offset: 8542},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 298, col: 91, offset: 8545},
								name: "Identifier",
							},
						},
						&labeledExpr{
							pos:   position{line: 298, col: 102, offset: 8556},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 298, col: 108, offset: 8562},
								expr: &seqExpr{
									pos: position{line: 298, col: 109, offset: 8563},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 298, col: 109, offset: 8563},
											name: "EQUAL",
										},
										&ruleRefExpr{
											pos:  position{line: 298, col: 115, offset: 8569},
											name: "ConstValue",
										},
									},
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 298, col: 128, offset: 8582},
							expr: &ruleRefExpr{
								pos:  position{line: 298, col: 128, offset: 8582},
								name: "Annotations",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 298, col: 141, offset: 8595},
							expr: &ruleRefExpr{
								pos:  position{line: 298, col: 141, offset: 8595},
								name: "ListSeparator",
							},
						},
						&labeledExpr{
							pos:   position{line: 298, col: 156, offset: 8610},
							label: "lineComments",
							expr: &ruleRefExpr{
								pos:  position{line: 298, col: 169, offset: 8623},
								name: "ReservedEndLineComments",
							},
						},
					},
				},
			},
		},
		{
			name: "FieldId",
			pos:  position{line: 312, col: 1, offset: 9018},
			expr: &recoveryExpr{
				pos: position{line: 312, col: 11, offset: 9028},
				expr: &actionExpr{
					pos: position{line: 312, col: 11, offset: 9028},
					run: (*parser).callonFieldId2,
					expr: &seqExpr{
						pos: position{line: 312, col: 11, offset: 9028},
						exprs: []any{
							&ruleRefExpr{
								pos:  position{line: 312, col: 11, offset: 9028},
								name: "ReservedComments",
							},
							&labeledExpr{
								pos:   position{line: 312, col: 28, offset: 9045},
								label: "i",
								expr: &ruleRefExpr{
									pos:  position{line: 312, col: 30, offset: 9047},
									name: "FieldIndex",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 312, col: 41, offset: 9058},
								name: "COLON",
							},
							&zeroOrMoreExpr{
								pos: position{line: 312, col: 47, offset: 9064},
								expr: &ruleRefExpr{
									pos:  position{line: 312, col: 47, offset: 9064},
									name: "Indent",
								},
							},
						},
					},
				},
				recoverExpr: &ruleRefExpr{
					pos:  position{line: 314, col: 21, offset: 9109},
					name: "ErrFieldIndex",
				},
				failureLabel: []string{
					"errFieldIndex",
				},
			},
		},
		{
			name: "FieldReq",
			pos:  position{line: 316, col: 1, offset: 9124},
			expr: &actionExpr{
				pos: position{line: 316, col: 12, offset: 9135},
				run: (*parser).callonFieldReq1,
				expr: &seqExpr{
					pos: position{line: 316, col: 12, offset: 9135},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 316, col: 12, offset: 9135},
							name: "ReservedComments",
						},
						&labeledExpr{
							pos:   position{line: 316, col: 29, offset: 9152},
							label: "r",
							expr: &ruleRefExpr{
								pos:  position{line: 316, col: 31, offset: 9154},
								name: "IsRequired",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 316, col: 42, offset: 9165},
							expr: &ruleRefExpr{
								pos:  position{line: 316, col: 42, offset: 9165},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "IsRequired",
			pos:  position{line: 322, col: 1, offset: 9240},
			expr: &actionExpr{
				pos: position{line: 322, col: 14, offset: 9253},
				run: (*parser).callonIsRequired1,
				expr: &labeledExpr{
					pos:   position{line: 322, col: 14, offset: 9253},
					label: "v",
					expr: &choiceExpr{
						pos: position{line: 322, col: 17, offset: 9256},
						alternatives: []any{
							&litMatcher{
								pos:        position{line: 322, col: 17, offset: 9256},
								val:        "required",
								ignoreCase: false,
								want:       "\"required\"",
							},
							&litMatcher{
								pos:        position{line: 322, col: 30, offset: 9269},
								val:        "optional",
								ignoreCase: false,
								want:       "\"optional\"",
							},
						},
					},
				},
			},
		},
		{
			name: "Function",
			pos:  position{line: 329, col: 1, offset: 9388},
			expr: &recoveryExpr{
				pos: position{line: 329, col: 12, offset: 9399},
				expr: &recoveryExpr{
					pos: position{line: 329, col: 12, offset: 9399},
					expr: &choiceExpr{
						pos: position{line: 329, col: 12, offset: 9399},
						alternatives: []any{
							&actionExpr{
								pos: position{line: 329, col: 12, offset: 9399},
								run: (*parser).callonFunction4,
								expr: &seqExpr{
									pos: position{line: 329, col: 12, offset: 9399},
									exprs: []any{
										&labeledExpr{
											pos:   position{line: 329, col: 12, offset: 9399},
											label: "comments",
											expr: &ruleRefExpr{
												pos:  position{line: 329, col: 21, offset: 9408},
												name: "ReservedComments",
											},
										},
										&labeledExpr{
											pos:   position{line: 329, col: 38, offset: 9425},
											label: "oneway",
											expr: &zeroOrOneExpr{
												pos: position{line: 329, col: 45, offset: 9432},
												expr: &ruleRefExpr{
													pos:  position{line: 329, col: 45, offset: 9432},
													name: "ONEWAY",
												},
											},
										},
										&labeledExpr{
											pos:   position{line: 329, col: 53, offset: 9440},
											label: "ft",
											expr: &ruleRefExpr{
												pos:  position{line: 329, col: 56, offset: 9443},
												name: "FunctionType",
											},
										},
										&labeledExpr{
											pos:   position{line: 329, col: 69, offset: 9456},
											label: "name",
											expr: &ruleRefExpr{
												pos:  position{line: 329, col: 74, offset: 9461},
												name: "DefinitionIdentifier",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 329, col: 95, offset: 9482},
											name: "LPAR",
										},
										&labeledExpr{
											pos:   position{line: 329, col: 100, offset: 9487},
											label: "args",
											expr: &zeroOrMoreExpr{
												pos: position{line: 329, col: 105, offset: 9492},
												expr: &ruleRefExpr{
													pos:  position{line: 329, col: 105, offset: 9492},
													name: "FunctionFieldWithThrow",
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 329, col: 129, offset: 9516},
											name: "RPAR",
										},
										&labeledExpr{
											pos:   position{line: 329, col: 134, offset: 9521},
											label: "throws",
											expr: &zeroOrOneExpr{
												pos: position{line: 329, col: 141, offset: 9528},
												expr: &ruleRefExpr{
													pos:  position{line: 329, col: 141, offset: 9528},
													name: "Throws",
												},
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 329, col: 149, offset: 9536},
											expr: &ruleRefExpr{
												pos:  position{line: 329, col: 149, offset: 9536},
												name: "Annotations",
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 329, col: 162, offset: 9549},
											expr: &ruleRefExpr{
												pos:  position{line: 329, col: 162, offset: 9549},
												name: "ListSeparator",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 329, col: 177, offset: 9564},
											name: "ReservedEndLineComments",
										},
									},
								},
							},
							&actionExpr{
								pos: position{line: 343, col: 5, offset: 9974},
								run: (*parser).callonFunction28,
								expr: &labeledExpr{
									pos:   position{line: 343, col: 5, offset: 9974},
									label: "x",
									expr: &seqExpr{
										pos: position{line: 343, col: 8, offset: 9977},
										exprs: []any{
											&ruleRefExpr{
												pos:  position{line: 343, col: 8, offset: 9977},
												name: "ReservedComments",
											},
											&andExpr{
												pos: position{line: 343, col: 25, offset: 9994},
												expr: &seqExpr{
													pos: position{line: 343, col: 27, offset: 9996},
													exprs: []any{
														&labeledExpr{
															pos:   position{line: 343, col: 27, offset: 9996},
															label: "oneway",
															expr: &zeroOrOneExpr{
																pos: position{line: 343, col: 34, offset: 10003},
																expr: &ruleRefExpr{
																	pos:  position{line: 343, col: 34, offset: 10003},
																	name: "ONEWAY",
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 343, col: 42, offset: 10011},
															label: "ft",
															expr: &ruleRefExpr{
																pos:  position{line: 343, col: 45, offset: 10014},
																name: "FunctionType",
															},
														},
													},
												},
											},
											&throwExpr{
												pos:   position{line: 343, col: 59, offset: 10028},
												label: "errFunction",
											},
										},
									},
								},
							},
						},
					},
					recoverExpr: &ruleRefExpr{
						pos:  position{line: 345, col: 21, offset: 10092},
						name: "ErrFunctionIdentifier",
					},
					failureLabel: []string{
						"errIdentifier",
					},
				},
				recoverExpr: &ruleRefExpr{
					pos:  position{line: 345, col: 56, offset: 10127},
					name: "ErrFunctionArgument",
				},
				failureLabel: []string{
					"errField",
				},
			},
		},
		{
			name: "FunctionFieldWithThrow",
			pos:  position{line: 347, col: 1, offset: 10148},
			expr: &choiceExpr{
				pos: position{line: 347, col: 26, offset: 10173},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 347, col: 26, offset: 10173},
						run: (*parser).callonFunctionFieldWithThrow2,
						expr: &labeledExpr{
							pos:   position{line: 347, col: 26, offset: 10173},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 347, col: 28, offset: 10175},
								name: "Field",
							},
						},
					},
					&actionExpr{
						pos: position{line: 349, col: 6, offset: 10203},
						run: (*parser).callonFunctionFieldWithThrow5,
						expr: &labeledExpr{
							pos:   position{line: 349, col: 6, offset: 10203},
							label: "x",
							expr: &seqExpr{
								pos: position{line: 349, col: 9, offset: 10206},
								exprs: []any{
									&labeledExpr{
										pos:   position{line: 349, col: 9, offset: 10206},
										label: "comments",
										expr: &ruleRefExpr{
											pos:  position{line: 349, col: 18, offset: 10215},
											name: "ReservedComments",
										},
									},
									&andExpr{
										pos: position{line: 349, col: 35, offset: 10232},
										expr: &seqExpr{
											pos: position{line: 349, col: 37, offset: 10234},
											exprs: []any{
												&labeledExpr{
													pos:   position{line: 349, col: 37, offset: 10234},
													label: "index",
													expr: &ruleRefExpr{
														pos:  position{line: 349, col: 43, offset: 10240},
														name: "FieldId",
													},
												},
												&labeledExpr{
													pos:   position{line: 349, col: 51, offset: 10248},
													label: "required",
													expr: &zeroOrOneExpr{
														pos: position{line: 349, col: 60, offset: 10257},
														expr: &ruleRefExpr{
															pos:  position{line: 349, col: 60, offset: 10257},
															name: "FieldReq",
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 349, col: 70, offset: 10267},
													label: "fieldType",
													expr: &ruleRefExpr{
														pos:  position{line: 349, col: 80, offset: 10277},
														name: "FieldType",
													},
												},
											},
										},
									},
									&throwExpr{
										pos:   position{line: 349, col: 91, offset: 10288},
										label: "errField",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FunctionType",
			pos:  position{line: 354, col: 1, offset: 10334},
			expr: &choiceExpr{
				pos: position{line: 354, col: 18, offset: 10351},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 354, col: 18, offset: 10351},
						name: "VOID",
					},
					&ruleRefExpr{
						pos:  position{line: 354, col: 25, offset: 10358},
						name: "FieldType",
					},
				},
			},
		},
		{
			name: "Throws",
			pos:  position{line: 356, col: 1, offset: 10369},
			expr: &actionExpr{
				pos: position{line: 356, col: 11, offset: 10379},
				run: (*parser).callonThrows1,
				expr: &seqExpr{
					pos: position{line: 356, col: 11, offset: 10379},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 356, col: 11, offset: 10379},
							name: "THROWS",
						},
						&ruleRefExpr{
							pos:  position{line: 356, col: 18, offset: 10386},
							name: "LPAR",
						},
						&labeledExpr{
							pos:   position{line: 356, col: 23, offset: 10391},
							label: "fields",
							expr: &zeroOrMoreExpr{
								pos: position{line: 356, col: 30, offset: 10398},
								expr: &ruleRefExpr{
									pos:  position{line: 356, col: 30, offset: 10398},
									name: "Field",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 356, col: 37, offset: 10405},
							name: "RPAR",
						},
					},
				},
			},
		},
		{
			name: "FieldType",
			pos:  position{line: 360, col: 1, offset: 10449},
			expr: &actionExpr{
				pos: position{line: 360, col: 13, offset: 10461},
				run: (*parser).callonFieldType1,
				expr: &seqExpr{
					pos: position{line: 360, col: 13, offset: 10461},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 360, col: 13, offset: 10461},
							label: "v",
							expr: &choiceExpr{
								pos: position{line: 360, col: 16, offset: 10464},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 360, col: 16, offset: 10464},
										name: "ContainerType",
									},
									&ruleRefExpr{
										pos:  position{line: 360, col: 32, offset: 10480},
										name: "BaseType",
									},
									&ruleRefExpr{
										pos:  position{line: 360, col: 43, offset: 10491},
										name: "IdentifierType",
									},
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 360, col: 59, offset: 10507},
							expr: &ruleRefExpr{
								pos:  position{line: 360, col: 59, offset: 10507},
								name: "Annotations",
							},
						},
					},
				},
			},
		},
		{
			name: "IdentifierType",
			pos:  position{line: 364, col: 1, offset: 10553},
			expr: &actionExpr{
				pos: position{line: 364, col: 18, offset: 10570},
				run: (*parser).callonIdentifierType1,
				expr: &labeledExpr{
					pos:   position{line: 364, col: 18, offset: 10570},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 364, col: 20, offset: 10572},
						name: "Identifier",
					},
				},
			},
		},
		{
			name: "BaseType",
			pos:  position{line: 368, col: 1, offset: 10631},
			expr: &actionExpr{
				pos: position{line: 368, col: 12, offset: 10642},
				run: (*parser).callonBaseType1,
				expr: &labeledExpr{
					pos:   position{line: 368, col: 12, offset: 10642},
					label: "v",
					expr: &choiceExpr{
						pos: position{line: 368, col: 15, offset: 10645},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 368, col: 15, offset: 10645},
								name: "BOOL",
							},
							&ruleRefExpr{
								pos:  position{line: 368, col: 22, offset: 10652},
								name: "BYTE",
							},
							&ruleRefExpr{
								pos:  position{line: 368, col: 29, offset: 10659},
								name: "I8",
							},
							&ruleRefExpr{
								pos:  position{line: 368, col: 34, offset: 10664},
								name: "I16",
							},
							&ruleRefExpr{
								pos:  position{line: 368, col: 40, offset: 10670},
								name: "I32",
							},
							&ruleRefExpr{
								pos:  position{line: 368, col: 46, offset: 10676},
								name: "I64",
							},
							&ruleRefExpr{
								pos:  position{line: 368, col: 52, offset: 10682},
								name: "DOUBLE",
							},
							&ruleRefExpr{
								pos:  position{line: 368, col: 61, offset: 10691},
								name: "STRING",
							},
							&ruleRefExpr{
								pos:  position{line: 368, col: 70, offset: 10700},
								name: "BINARY",
							},
						},
					},
				},
			},
		},
		{
			name: "ContainerType",
			pos:  position{line: 372, col: 1, offset: 10791},
			expr: &actionExpr{
				pos: position{line: 372, col: 17, offset: 10807},
				run: (*parser).callonContainerType1,
				expr: &labeledExpr{
					pos:   position{line: 372, col: 17, offset: 10807},
					label: "v",
					expr: &choiceExpr{
						pos: position{line: 372, col: 20, offset: 10810},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 372, col: 20, offset: 10810},
								name: "MapType",
							},
							&ruleRefExpr{
								pos:  position{line: 372, col: 30, offset: 10820},
								name: "SetType",
							},
							&ruleRefExpr{
								pos:  position{line: 372, col: 40, offset: 10830},
								name: "ListType",
							},
						},
					},
				},
			},
		},
		{
			name: "MapType",
			pos:  position{line: 376, col: 1, offset: 10873},
			expr: &actionExpr{
				pos: position{line: 376, col: 12, offset: 10884},
				run: (*parser).callonMapType1,
				expr: &seqExpr{
					pos: position{line: 376, col: 12, offset: 10884},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 376, col: 12, offset: 10884},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 376, col: 14, offset: 10886},
								name: "MAP",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 376, col: 18, offset: 10890},
							expr: &ruleRefExpr{
								pos:  position{line: 376, col: 18, offset: 10890},
								name: "CppType",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 376, col: 27, offset: 10899},
							name: "LPOINT",
						},
						&labeledExpr{
							pos:   position{line: 376, col: 34, offset: 10906},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 376, col: 38, offset: 10910},
								name: "FieldType",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 376, col: 48, offset: 10920},
							name: "COMMA",
						},
						&labeledExpr{
							pos:   position{line: 376, col: 54, offset: 10926},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 376, col: 60, offset: 10932},
								name: "FieldType",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 376, col: 70, offset: 10942},
							name: "RPOINT",
						},
					},
				},
			},
		},
		{
			name: "SetType",
			pos:  position{line: 380, col: 1, offset: 11060},
			expr: &actionExpr{
				pos: position{line: 380, col: 11, offset: 11070},
				run: (*parser).callonSetType1,
				expr: &seqExpr{
					pos: position{line: 380, col: 11, offset: 11070},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 380, col: 11, offset: 11070},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 380, col: 13, offset: 11072},
								name: "SET",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 380, col: 17, offset: 11076},
							expr: &ruleRefExpr{
								pos:  position{line: 380, col: 17, offset: 11076},
								name: "CppType",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 380, col: 26, offset: 11085},
							name: "LPOINT",
						},
						&labeledExpr{
							pos:   position{line: 380, col: 33, offset: 11092},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 380, col: 37, offset: 11096},
								name: "FieldType",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 380, col: 47, offset: 11106},
							name: "RPOINT",
						},
					},
				},
			},
		},
		{
			name: "ListType",
			pos:  position{line: 384, col: 1, offset: 11209},
			expr: &actionExpr{
				pos: position{line: 384, col: 12, offset: 11220},
				run: (*parser).callonListType1,
				expr: &seqExpr{
					pos: position{line: 384, col: 12, offset: 11220},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 384, col: 12, offset: 11220},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 384, col: 14, offset: 11222},
								name: "LIST",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 384, col: 19, offset: 11227},
							name: "LPOINT",
						},
						&labeledExpr{
							pos:   position{line: 384, col: 26, offset: 11234},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 384, col: 30, offset: 11238},
								name: "FieldType",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 384, col: 40, offset: 11248},
							name: "RPOINT",
						},
						&zeroOrOneExpr{
							pos: position{line: 384, col: 47, offset: 11255},
							expr: &ruleRefExpr{
								pos:  position{line: 384, col: 47, offset: 11255},
								name: "CppType",
							},
						},
					},
				},
			},
		},
		{
			name: "CppType",
			pos:  position{line: 388, col: 1, offset: 11360},
			expr: &seqExpr{
				pos: position{line: 388, col: 11, offset: 11370},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 388, col: 11, offset: 11370},
						name: "CPPTYPE",
					},
					&ruleRefExpr{
						pos:  position{line: 388, col: 19, offset: 11378},
						name: "Literal",
					},
				},
			},
		},
		{
			name: "ConstValue",
			pos:  position{line: 390, col: 1, offset: 11387},
			expr: &actionExpr{
				pos: position{line: 390, col: 14, offset: 11400},
				run: (*parser).callonConstValue1,
				expr: &labeledExpr{
					pos:   position{line: 390, col: 14, offset: 11400},
					label: "v",
					expr: &choiceExpr{
						pos: position{line: 390, col: 17, offset: 11403},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 390, col: 17, offset: 11403},
								name: "DoubleConstant",
							},
							&ruleRefExpr{
								pos:  position{line: 390, col: 34, offset: 11420},
								name: "IntConstant",
							},
							&ruleRefExpr{
								pos:  position{line: 390, col: 48, offset: 11434},
								name: "Literal",
							},
							&ruleRefExpr{
								pos:  position{line: 390, col: 58, offset: 11444},
								name: "IdentifierConst",
							},
							&ruleRefExpr{
								pos:  position{line: 390, col: 76, offset: 11462},
								name: "ConstMap",
							},
							&ruleRefExpr{
								pos:  position{line: 390, col: 87, offset: 11473},
								name: "ConstList",
							},
						},
					},
				},
			},
		},
		{
			name: "IdentifierConst",
			pos:  position{line: 397, col: 1, offset: 11632},
			expr: &actionExpr{
				pos: position{line: 397, col: 19, offset: 11650},
				run: (*parser).callonIdentifierConst1,
				expr: &labeledExpr{
					pos:   position{line: 397, col: 19, offset: 11650},
					label: "id",
					expr: &ruleRefExpr{
						pos:  position{line: 397, col: 22, offset: 11653},
						name: "Identifier",
					},
				},
			},
		},
		{
			name: "EnumValueIntConstant",
			pos:  position{line: 401, col: 1, offset: 11760},
			expr: &choiceExpr{
				pos: position{line: 401, col: 24, offset: 11783},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 401, col: 24, offset: 11783},
						run: (*parser).callonEnumValueIntConstant2,
						expr: &seqExpr{
							pos: position{line: 401, col: 24, offset: 11783},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 401, col: 24, offset: 11783},
									name: "EQUAL",
								},
								&labeledExpr{
									pos:   position{line: 401, col: 30, offset: 11789},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 401, col: 32, offset: 11791},
										name: "IntConstant",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 403, col: 5, offset: 11824},
						run: (*parser).callonEnumValueIntConstant7,
						expr: &labeledExpr{
							pos:   position{line: 403, col: 5, offset: 11824},
							label: "x",
							expr: &seqExpr{
								pos: position{line: 403, col: 8, offset: 11827},
								exprs: []any{
									&ruleRefExpr{
										pos:  position{line: 403, col: 8, offset: 11827},
										name: "EQUAL",
									},
									&ruleRefExpr{
										pos:  position{line: 403, col: 14, offset: 11833},
										name: "ReservedComments",
									},
									&throwExpr{
										pos:   position{line: 403, col: 31, offset: 11850},
										label: "errIntConstant",
									},
									&zeroOrMoreExpr{
										pos: position{line: 403, col: 49, offset: 11868},
										expr: &ruleRefExpr{
											pos:  position{line: 403, col: 49, offset: 11868},
											name: "Indent",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "IntConstant",
			pos:  position{line: 407, col: 1, offset: 11908},
			expr: &choiceExpr{
				pos: position{line: 407, col: 15, offset: 11922},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 407, col: 15, offset: 11922},
						run: (*parser).callonIntConstant2,
						expr: &seqExpr{
							pos: position{line: 407, col: 15, offset: 11922},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 407, col: 15, offset: 11922},
									name: "ReservedComments",
								},
								&labeledExpr{
									pos:   position{line: 407, col: 33, offset: 11940},
									label: "v",
									expr: &choiceExpr{
										pos: position{line: 407, col: 36, offset: 11943},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 407, col: 36, offset: 11943},
												name: "HexIntConstant",
											},
											&ruleRefExpr{
												pos:  position{line: 407, col: 53, offset: 11960},
												name: "OctIntConstant",
											},
											&ruleRefExpr{
												pos:  position{line: 407, col: 70, offset: 11977},
												name: "NormalIntConstant",
											},
										},
									},
								},
								&notExpr{
									pos: position{line: 407, col: 89, offset: 11996},
									expr: &charClassMatcher{
										pos:        position{line: 407, col: 90, offset: 11997},
										val:        "[a-zA-Z]",
										ranges:     []rune{'a', 'z', 'A', 'Z'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 407, col: 100, offset: 12007},
									expr: &ruleRefExpr{
										pos:  position{line: 407, col: 100, offset: 12007},
										name: "Indent",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 409, col: 5, offset: 12050},
						run: (*parser).callonIntConstant14,
						expr: &labeledExpr{
							pos:   position{line: 409, col: 5, offset: 12050},
							label: "x",
							expr: &seqExpr{
								pos: position{line: 409, col: 8, offset: 12053},
								exprs: []any{
									&ruleRefExpr{
										pos:  position{line: 409, col: 8, offset: 12053},
										name: "ReservedComments",
									},
									&andExpr{
										pos: position{line: 409, col: 25, offset: 12070},
										expr: &choiceExpr{
											pos: position{line: 409, col: 27, offset: 12072},
											alternatives: []any{
												&litMatcher{
													pos:        position{line: 409, col: 27, offset: 12072},
													val:        "0x",
													ignoreCase: false,
													want:       "\"0x\"",
												},
												&litMatcher{
													pos:        position{line: 409, col: 34, offset: 12079},
													val:        "0o",
													ignoreCase: false,
													want:       "\"0o\"",
												},
												&seqExpr{
													pos: position{line: 409, col: 42, offset: 12087},
													exprs: []any{
														&zeroOrOneExpr{
															pos: position{line: 409, col: 42, offset: 12087},
															expr: &choiceExpr{
																pos: position{line: 409, col: 43, offset: 12088},
																alternatives: []any{
																	&litMatcher{
																		pos:        position{line: 409, col: 43, offset: 12088},
																		val:        "+",
																		ignoreCase: false,
																		want:       "\"+\"",
																	},
																	&litMatcher{
																		pos:        position{line: 409, col: 49, offset: 12094},
																		val:        "-",
																		ignoreCase: false,
																		want:       "\"-\"",
																	},
																},
															},
														},
														&ruleRefExpr{
															pos:  position{line: 409, col: 55, offset: 12100},
															name: "Digit",
														},
													},
												},
											},
										},
									},
									&throwExpr{
										pos:   position{line: 409, col: 63, offset: 12108},
										label: "errIntConstant",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "HexIntConstant",
			pos:  position{line: 413, col: 1, offset: 12158},
			expr: &actionExpr{
				pos: position{line: 413, col: 18, offset: 12175},
				run: (*parser).callonHexIntConstant1,
				expr: &seqExpr{
					pos: position{line: 413, col: 18, offset: 12175},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 413, col: 18, offset: 12175},
							val:        "0x",
							ignoreCase: false,
							want:       "\"0x\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 413, col: 23, offset: 12180},
							expr: &choiceExpr{
								pos: position{line: 413, col: 24, offset: 12181},
								alternatives: []any{
									&charClassMatcher{
										pos:        position{line: 413, col: 24, offset: 12181},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
									&charClassMatcher{
										pos:        position{line: 413, col: 32, offset: 12189},
										val:        "[A-Z]",
										ranges:     []rune{'A', 'Z'},
										ignoreCase: false,
										inverted:   false,
									},
									&charClassMatcher{
										pos:        position{line: 413, col: 40, offset: 12197},
										val:        "[a-z]",
										ranges:     []rune{'a', 'z'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OctIntConstant",
			pos:  position{line: 425, col: 1, offset: 12440},
			expr: &actionExpr{
				pos: position{line: 425, col: 18, offset: 12457},
				run: (*parser).callonOctIntConstant1,
				expr: &seqExpr{
					pos: position{line: 425, col: 18, offset: 12457},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 425, col: 18, offset: 12457},
							val:        "0o",
							ignoreCase: false,
							want:       "\"0o\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 425, col: 23, offset: 12462},
							expr: &ruleRefExpr{
								pos:  position{line: 425, col: 23, offset: 12462},
								name: "Digit",
							},
						},
					},
				},
			},
		},
		{
			name: "NormalIntConstant",
			pos:  position{line: 436, col: 1, offset: 12695},
			expr: &actionExpr{
				pos: position{line: 436, col: 21, offset: 12715},
				run: (*parser).callonNormalIntConstant1,
				expr: &seqExpr{
					pos: position{line: 436, col: 21, offset: 12715},
					exprs: []any{
						&zeroOrOneExpr{
							pos: position{line: 436, col: 21, offset: 12715},
							expr: &choiceExpr{
								pos: position{line: 436, col: 22, offset: 12716},
								alternatives: []any{
									&litMatcher{
										pos:        position{line: 436, col: 22, offset: 12716},
										val:        "+",
										ignoreCase: false,
										want:       "\"+\"",
									},
									&litMatcher{
										pos:        position{line: 436, col: 28, offset: 12722},
										val:        "-",
										ignoreCase: false,
										want:       "\"-\"",
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 436, col: 34, offset: 12728},
							expr: &ruleRefExpr{
								pos:  position{line: 436, col: 34, offset: 12728},
								name: "Digit",
							},
						},
					},
				},
			},
		},
		{
			name: "FieldIndex",
			pos:  position{line: 447, col: 1, offset: 12938},
			expr: &choiceExpr{
				pos: position{line: 447, col: 14, offset: 12951},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 447, col: 14, offset: 12951},
						run: (*parser).callonFieldIndex2,
						expr: &oneOrMoreExpr{
							pos: position{line: 447, col: 14, offset: 12951},
							expr: &ruleRefExpr{
								pos:  position{line: 447, col: 14, offset: 12951},
								name: "Digit",
							},
						},
					},
					&actionExpr{
						pos: position{line: 453, col: 5, offset: 13116},
						run: (*parser).callonFieldIndex5,
						expr: &labeledExpr{
							pos:   position{line: 453, col: 5, offset: 13116},
							label: "x",
							expr: &seqExpr{
								pos: position{line: 453, col: 8, offset: 13119},
								exprs: []any{
									&ruleRefExpr{
										pos:  position{line: 453, col: 8, offset: 13119},
										name: "ReservedComments",
									},
									&andExpr{
										pos: position{line: 453, col: 25, offset: 13136},
										expr: &seqExpr{
											pos: position{line: 453, col: 27, offset: 13138},
											exprs: []any{
												&oneOrMoreExpr{
													pos: position{line: 453, col: 27, offset: 13138},
													expr: &charClassMatcher{
														pos:        position{line: 453, col: 27, offset: 13138},
														val:        "[a-zA-Z]",
														ranges:     []rune{'a', 'z', 'A', 'Z'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&ruleRefExpr{
													pos:  position{line: 453, col: 37, offset: 13148},
													name: "COLON",
												},
											},
										},
									},
									&throwExpr{
										pos:   position{line: 453, col: 44, offset: 13155},
										label: "errFieldIndex",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleConstant",
			pos:  position{line: 457, col: 1, offset: 13204},
			expr: &actionExpr{
				pos: position{line: 457, col: 19, offset: 13222},
				run: (*parser).callonDoubleConstant1,
				expr: &seqExpr{
					pos: position{line: 457, col: 19, offset: 13222},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 457, col: 19, offset: 13222},
							name: "ReservedComments",
						},
						&labeledExpr{
							pos:   position{line: 457, col: 36, offset: 13239},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 457, col: 38, offset: 13241},
								name: "DoubleConstantValue",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 457, col: 58, offset: 13261},
							expr: &ruleRefExpr{
								pos:  position{line: 457, col: 58, offset: 13261},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleConstantValue",
			pos:  position{line: 461, col: 1, offset: 13289},
			expr: &actionExpr{
				pos: position{line: 461, col: 23, offset: 13311},
				run: (*parser).callonDoubleConstantValue1,
				expr: &seqExpr{
					pos: position{line: 461, col: 23, offset: 13311},
					exprs: []any{
						&zeroOrOneExpr{
							pos: position{line: 461, col: 23, offset: 13311},
							expr: &choiceExpr{
								pos: position{line: 461, col: 24, offset: 13312},
								alternatives: []any{
									&litMatcher{
										pos:        position{line: 461, col: 24, offset: 13312},
										val:        "+",
										ignoreCase: false,
										want:       "\"+\"",
									},
									&litMatcher{
										pos:        position{line: 461, col: 30, offset: 13318},
										val:        "-",
										ignoreCase: false,
										want:       "\"-\"",
									},
								},
							},
						},
						&choiceExpr{
							pos: position{line: 461, col: 37, offset: 13325},
							alternatives: []any{
								&seqExpr{
									pos: position{line: 461, col: 37, offset: 13325},
									exprs: []any{
										&zeroOrMoreExpr{
											pos: position{line: 461, col: 37, offset: 13325},
											expr: &ruleRefExpr{
												pos:  position{line: 461, col: 37, offset: 13325},
												name: "Digit",
											},
										},
										&litMatcher{
											pos:        position{line: 461, col: 44, offset: 13332},
											val:        ".",
											ignoreCase: false,
											want:       "\".\"",
										},
										&oneOrMoreExpr{
											pos: position{line: 461, col: 48, offset: 13336},
											expr: &ruleRefExpr{
												pos:  position{line: 461, col: 48, offset: 13336},
												name: "Digit",
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 461, col: 56, offset: 13344},
											expr: &ruleRefExpr{
												pos:  position{line: 461, col: 56, offset: 13344},
												name: "Exponent",
											},
										},
									},
								},
								&seqExpr{
									pos: position{line: 461, col: 68, offset: 13356},
									exprs: []any{
										&oneOrMoreExpr{
											pos: position{line: 461, col: 68, offset: 13356},
											expr: &ruleRefExpr{
												pos:  position{line: 461, col: 68, offset: 13356},
												name: "Digit",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 461, col: 75, offset: 13363},
											name: "Exponent",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Exponent",
			pos:  position{line: 472, col: 1, offset: 13585},
			expr: &seqExpr{
				pos: position{line: 472, col: 12, offset: 13596},
				exprs: []any{
					&choiceExpr{
						pos: position{line: 472, col: 13, offset: 13597},
						alternatives: []any{
							&litMatcher{
								pos:        position{line: 472, col: 13, offset: 13597},
								val:        "e",
								ignoreCase: false,
								want:       "\"e\"",
							},
							&litMatcher{
								pos:        position{line: 472, col: 19, offset: 13603},
								val:        "E",
								ignoreCase: false,
								want:       "\"E\"",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 472, col: 24, offset: 13608},
						name: "IntConstant",
					},
				},
			},
		},
		{
			name: "Annotations",
			pos:  position{line: 474, col: 1, offset: 13621},
			expr: &actionExpr{
				pos: position{line: 474, col: 16, offset: 13636},
				run: (*parser).callonAnnotations1,
				expr: &seqExpr{
					pos: position{line: 474, col: 16, offset: 13636},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 474, col: 16, offset: 13636},
							name: "LPAR",
						},
						&labeledExpr{
							pos:   position{line: 474, col: 21, offset: 13641},
							label: "annos",
							expr: &oneOrMoreExpr{
								pos: position{line: 474, col: 27, offset: 13647},
								expr: &ruleRefExpr{
									pos:  position{line: 474, col: 27, offset: 13647},
									name: "Annotation",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 474, col: 39, offset: 13659},
							name: "RPAR",
						},
					},
				},
			},
		},
		{
			name: "Annotation",
			pos:  position{line: 478, col: 1, offset: 13688},
			expr: &actionExpr{
				pos: position{line: 478, col: 15, offset: 13702},
				run: (*parser).callonAnnotation1,
				expr: &seqExpr{
					pos: position{line: 478, col: 15, offset: 13702},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 478, col: 15, offset: 13702},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 478, col: 18, offset: 13705},
								name: "Identifier",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 478, col: 29, offset: 13716},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 478, col: 35, offset: 13722},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 478, col: 41, offset: 13728},
								name: "Literal",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 478, col: 49, offset: 13736},
							expr: &ruleRefExpr{
								pos:  position{line: 478, col: 49, offset: 13736},
								name: "ListSeparator",
							},
						},
					},
				},
			},
		},
		{
			name: "ConstList",
			pos:  position{line: 482, col: 1, offset: 13846},
			expr: &actionExpr{
				pos: position{line: 482, col: 14, offset: 13859},
				run: (*parser).callonConstList1,
				expr: &seqExpr{
					pos: position{line: 482, col: 14, offset: 13859},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 482, col: 14, offset: 13859},
							name: "LBRK",
						},
						&labeledExpr{
							pos:   position{line: 482, col: 19, offset: 13864},
							label: "v",
							expr: &zeroOrMoreExpr{
								pos: position{line: 482, col: 21, offset: 13866},
								expr: &ruleRefExpr{
									pos:  position{line: 482, col: 21, offset: 13866},
									name: "ConstListItem",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 482, col: 36, offset: 13881},
							name: "RBRK",
						},
					},
				},
			},
		},
		{
			name: "ConstListItem",
			pos:  position{line: 486, col: 1, offset: 13975},
			expr: &actionExpr{
				pos: position{line: 486, col: 17, offset: 13991},
				run: (*parser).callonConstListItem1,
				expr: &seqExpr{
					pos: position{line: 486, col: 17, offset: 13991},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 486, col: 17, offset: 13991},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 486, col: 19, offset: 13993},
								name: "ConstValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 486, col: 30, offset: 14004},
							expr: &ruleRefExpr{
								pos:  position{line: 486, col: 30, offset: 14004},
								name: "ListSeparator",
							},
						},
					},
				},
			},
		},
		{
			name: "ConstMap",
			pos:  position{line: 490, col: 1, offset: 14053},
			expr: &actionExpr{
				pos: position{line: 490, col: 13, offset: 14065},
				run: (*parser).callonConstMap1,
				expr: &seqExpr{
					pos: position{line: 490, col: 13, offset: 14065},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 490, col: 13, offset: 14065},
							name: "LCUR",
						},
						&labeledExpr{
							pos:   position{line: 490, col: 18, offset: 14070},
							label: "v",
							expr: &zeroOrMoreExpr{
								pos: position{line: 490, col: 20, offset: 14072},
								expr: &ruleRefExpr{
									pos:  position{line: 490, col: 20, offset: 14072},
									name: "ConstMapItem",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 490, col: 34, offset: 14086},
							name: "RCUR",
						},
					},
				},
			},
		},
		{
			name: "ConstMapItem",
			pos:  position{line: 494, col: 1, offset: 14179},
			expr: &actionExpr{
				pos: position{line: 494, col: 16, offset: 14194},
				run: (*parser).callonConstMapItem1,
				expr: &seqExpr{
					pos: position{line: 494, col: 16, offset: 14194},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 494, col: 16, offset: 14194},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 494, col: 20, offset: 14198},
								name: "ConstValue",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 494, col: 31, offset: 14209},
							name: "COLON",
						},
						&labeledExpr{
							pos:   position{line: 494, col: 37, offset: 14215},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 494, col: 43, offset: 14221},
								name: "ConstValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 494, col: 54, offset: 14232},
							expr: &ruleRefExpr{
								pos:  position{line: 494, col: 54, offset: 14232},
								name: "ListSeparator",
							},
						},
					},
				},
			},
		},
		{
			name: "EscapeLiteralChar",
			pos:  position{line: 498, col: 1, offset: 14349},
			expr: &actionExpr{
				pos: position{line: 498, col: 21, offset: 14369},
				run: (*parser).callonEscapeLiteralChar1,
				expr: &seqExpr{
					pos: position{line: 498, col: 21, offset: 14369},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 498, col: 21, offset: 14369},
							val:        "\\",
							ignoreCase: false,
							want:       "\"\\\\\"",
						},
						&charClassMatcher{
							pos:        position{line: 498, col: 26, offset: 14374},
							val:        "[\"']",
							chars:      []rune{'"', '\''},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "Literal",
			pos:  position{line: 502, col: 1, offset: 14412},
			expr: &recoveryExpr{
				pos: position{line: 502, col: 11, offset: 14422},
				expr: &recoveryExpr{
					pos: position{line: 502, col: 11, offset: 14422},
					expr: &recoveryExpr{
						pos: position{line: 502, col: 11, offset: 14422},
						expr: &recoveryExpr{
							pos: position{line: 502, col: 11, offset: 14422},
							expr: &actionExpr{
								pos: position{line: 502, col: 11, offset: 14422},
								run: (*parser).callonLiteral5,
								expr: &labeledExpr{
									pos:   position{line: 502, col: 11, offset: 14422},
									label: "l",
									expr: &choiceExpr{
										pos: position{line: 502, col: 14, offset: 14425},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 502, col: 14, offset: 14425},
												name: "Literal1",
											},
											&ruleRefExpr{
												pos:  position{line: 502, col: 25, offset: 14436},
												name: "Literal2",
											},
										},
									},
								},
							},
							recoverExpr: &ruleRefExpr{
								pos:  position{line: 504, col: 31, offset: 14493},
								name: "ErrLiteral1MissingRight",
							},
							failureLabel: []string{
								"errLiteral1MissingRight",
							},
						},
						recoverExpr: &ruleRefExpr{
							pos:  position{line: 504, col: 71, offset: 14533},
							name: "ErrLiteral1",
						},
						failureLabel: []string{
							"errLiteral1",
						},
					},
					recoverExpr: &ruleRefExpr{
						pos:  position{line: 504, col: 111, offset: 14573},
						name: "ErrLiteral2MissingRight",
					},
					failureLabel: []string{
						"errLiteral2MissingRight",
					},
				},
				recoverExpr: &ruleRefExpr{
					pos:  position{line: 504, col: 151, offset: 14613},
					name: "ErrLiteral2",
				},
				failureLabel: []string{
					"errLiteral2",
				},
			},
		},
		{
			name: "Literal1",
			pos:  position{line: 506, col: 1, offset: 14626},
			expr: &choiceExpr{
				pos: position{line: 506, col: 12, offset: 14637},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 506, col: 12, offset: 14637},
						run: (*parser).callonLiteral12,
						expr: &seqExpr{
							pos: position{line: 506, col: 12, offset: 14637},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 506, col: 12, offset: 14637},
									name: "ReservedComments",
								},
								&litMatcher{
									pos:        position{line: 506, col: 29, offset: 14654},
									val:        "\"",
									ignoreCase: false,
									want:       "\"\\\"\"",
								},
								&labeledExpr{
									pos:   position{line: 506, col: 33, offset: 14658},
									label: "t",
									expr: &zeroOrMoreExpr{
										pos: position{line: 506, col: 35, offset: 14660},
										expr: &choiceExpr{
											pos: position{line: 506, col: 36, offset: 14661},
											alternatives: []any{
												&ruleRefExpr{
													pos:  position{line: 506, col: 36, offset: 14661},
													name: "EscapeLiteralChar",
												},
												&seqExpr{
													pos: position{line: 506, col: 56, offset: 14681},
													exprs: []any{
														&notExpr{
															pos: position{line: 506, col: 56, offset: 14681},
															expr: &charClassMatcher{
																pos:        position{line: 506, col: 57, offset: 14682},
																val:        "[\"\\r\\n]",
																chars:      []rune{'"', '\r', '\n'},
																ignoreCase: false,
																inverted:   false,
															},
														},
														&anyMatcher{
															line: 506, col: 65, offset: 14690,
														},
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 506, col: 69, offset: 14694},
									val:        "\"",
									ignoreCase: false,
									want:       "\"\\\"\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 506, col: 73, offset: 14698},
									expr: &ruleRefExpr{
										pos:  position{line: 506, col: 73, offset: 14698},
										name: "Indent",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 509, col: 5, offset: 14813},
						run: (*parser).callonLiteral117,
						expr: &labeledExpr{
							pos:   position{line: 509, col: 5, offset: 14813},
							label: "x",
							expr: &seqExpr{
								pos: position{line: 509, col: 8, offset: 14816},
								exprs: []any{
									&andExpr{
										pos: position{line: 509, col: 8, offset: 14816},
										expr: &seqExpr{
											pos: position{line: 509, col: 10, offset: 14818},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 509, col: 10, offset: 14818},
													name: "ReservedComments",
												},
												&litMatcher{
													pos:        position{line: 509, col: 27, offset: 14835},
													val:        "\"",
													ignoreCase: false,
													want:       "\"\\\"\"",
												},
												&labeledExpr{
													pos:   position{line: 509, col: 31, offset: 14839},
													label: "t",
													expr: &zeroOrMoreExpr{
														pos: position{line: 509, col: 33, offset: 14841},
														expr: &choiceExpr{
															pos: position{line: 509, col: 34, offset: 14842},
															alternatives: []any{
																&ruleRefExpr{
																	pos:  position{line: 509, col: 34, offset: 14842},
																	name: "EscapeLiteralChar",
																},
																&seqExpr{
																	pos: position{line: 509, col: 54, offset: 14862},
																	exprs: []any{
																		&notExpr{
																			pos: position{line: 509, col: 54, offset: 14862},
																			expr: &litMatcher{
																				pos:        position{line: 509, col: 55, offset: 14863},
																				val:        "\"",
																				ignoreCase: false,
																				want:       "\"\\\"\"",
																			},
																		},
																		&anyMatcher{
																			line: 509, col: 59, offset: 14867,
																		},
																	},
																},
															},
														},
													},
												},
												&zeroOrMoreExpr{
													pos: position{line: 509, col: 63, offset: 14871},
													expr: &ruleRefExpr{
														pos:  position{line: 509, col: 63, offset: 14871},
														name: "Indent",
													},
												},
											},
										},
									},
									&throwExpr{
										pos:   position{line: 509, col: 72, offset: 14880},
										label: "errLiteral1MissingRight",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Literal2",
			pos:  position{line: 513, col: 1, offset: 14941},
			expr: &choiceExpr{
				pos: position{line: 513, col: 12, offset: 14952},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 513, col: 12, offset: 14952},
						run: (*parser).callonLiteral22,
						expr: &seqExpr{
							pos: position{line: 513, col: 12, offset: 14952},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 513, col: 12, offset: 14952},
									name: "ReservedComments",
								},
								&litMatcher{
									pos:        position{line: 513, col: 29, offset: 14969},
									val:        "'",
									ignoreCase: false,
									want:       "\"'\"",
								},
								&labeledExpr{
									pos:   position{line: 513, col: 33, offset: 14973},
									label: "t",
									expr: &zeroOrMoreExpr{
										pos: position{line: 513, col: 35, offset: 14975},
										expr: &choiceExpr{
											pos: position{line: 513, col: 36, offset: 14976},
											alternatives: []any{
												&ruleRefExpr{
													pos:  position{line: 513, col: 36, offset: 14976},
													name: "EscapeLiteralChar",
												},
												&seqExpr{
													pos: position{line: 513, col: 56, offset: 14996},
													exprs: []any{
														&notExpr{
															pos: position{line: 513, col: 56, offset: 14996},
															expr: &charClassMatcher{
																pos:        position{line: 513, col: 57, offset: 14997},
																val:        "['\\r\\n]",
																chars:      []rune{'\'', '\r', '\n'},
																ignoreCase: false,
																inverted:   false,
															},
														},
														&anyMatcher{
															line: 513, col: 65, offset: 15005,
														},
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 513, col: 69, offset: 15009},
									val:        "'",
									ignoreCase: false,
									want:       "\"'\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 513, col: 73, offset: 15013},
									expr: &ruleRefExpr{
										pos:  position{line: 513, col: 73, offset: 15013},
										name: "Indent",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 516, col: 5, offset: 15128},
						run: (*parser).callonLiteral217,
						expr: &labeledExpr{
							pos:   position{line: 516, col: 5, offset: 15128},
							label: "x",
							expr: &seqExpr{
								pos: position{line: 516, col: 8, offset: 15131},
								exprs: []any{
									&andExpr{
										pos: position{line: 516, col: 8, offset: 15131},
										expr: &seqExpr{
											pos: position{line: 516, col: 10, offset: 15133},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 516, col: 10, offset: 15133},
													name: "ReservedComments",
												},
												&litMatcher{
													pos:        position{line: 516, col: 27, offset: 15150},
													val:        "'",
													ignoreCase: false,
													want:       "\"'\"",
												},
												&labeledExpr{
													pos:   position{line: 516, col: 31, offset: 15154},
													label: "t",
													expr: &zeroOrMoreExpr{
														pos: position{line: 516, col: 33, offset: 15156},
														expr: &choiceExpr{
															pos: position{line: 516, col: 34, offset: 15157},
															alternatives: []any{
																&ruleRefExpr{
																	pos:  position{line: 516, col: 34, offset: 15157},
																	name: "EscapeLiteralChar",
																},
																&seqExpr{
																	pos: position{line: 516, col: 54, offset: 15177},
																	exprs: []any{
																		&notExpr{
																			pos: position{line: 516, col: 54, offset: 15177},
																			expr: &litMatcher{
																				pos:        position{line: 516, col: 55, offset: 15178},
																				val:        "'",
																				ignoreCase: false,
																				want:       "\"'\"",
																			},
																		},
																		&anyMatcher{
																			line: 516, col: 59, offset: 15182,
																		},
																	},
																},
															},
														},
													},
												},
												&zeroOrMoreExpr{
													pos: position{line: 516, col: 63, offset: 15186},
													expr: &ruleRefExpr{
														pos:  position{line: 516, col: 63, offset: 15186},
														name: "Indent",
													},
												},
											},
										},
									},
									&throwExpr{
										pos:   position{line: 516, col: 72, offset: 15195},
										label: "errLiteral2MissingRight",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DefinitionIdentifier",
			pos:  position{line: 520, col: 1, offset: 15256},
			expr: &choiceExpr{
				pos: position{line: 520, col: 24, offset: 15279},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 520, col: 24, offset: 15279},
						run: (*parser).callonDefinitionIdentifier2,
						expr: &labeledExpr{
							pos:   position{line: 520, col: 24, offset: 15279},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 520, col: 27, offset: 15282},
								name: "Identifier",
							},
						},
					},
					&throwExpr{
						pos:   position{line: 522, col: 5, offset: 15329},
						label: "errIdentifier",
					},
				},
			},
		},
		{
			name: "Identifier",
			pos:  position{line: 524, col: 1, offset: 15347},
			expr: &actionExpr{
				pos: position{line: 524, col: 14, offset: 15360},
				run: (*parser).callonIdentifier1,
				expr: &seqExpr{
					pos: position{line: 524, col: 14, offset: 15360},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 524, col: 14, offset: 15360},
							name: "ReservedComments",
						},
						&labeledExpr{
							pos:   position{line: 524, col: 31, offset: 15377},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 524, col: 34, offset: 15380},
								name: "IdentifierToken",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 524, col: 50, offset: 15396},
							expr: &ruleRefExpr{
								pos:  position{line: 524, col: 50, offset: 15396},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "IdentifierToken",
			pos:  position{line: 528, col: 1, offset: 15439},
			expr: &actionExpr{
				pos: position{line: 528, col: 19, offset: 15457},
				run: (*parser).callonIdentifierToken1,
				expr: &seqExpr{
					pos: position{line: 528, col: 19, offset: 15457},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 528, col: 19, offset: 15457},
							name: "Letter",
						},
						&zeroOrMoreExpr{
							pos: position{line: 528, col: 26, offset: 15464},
							expr: &choiceExpr{
								pos: position{line: 528, col: 28, offset: 15466},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 528, col: 28, offset: 15466},
										name: "Letter",
									},
									&ruleRefExpr{
										pos:  position{line: 528, col: 37, offset: 15475},
										name: "Digit",
									},
									&litMatcher{
										pos:        position{line: 528, col: 45, offset: 15483},
										val:        ".",
										ignoreCase: false,
										want:       "\".\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListSeparator",
			pos:  position{line: 532, col: 1, offset: 15546},
			expr: &seqExpr{
				pos: position{line: 532, col: 17, offset: 15562},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 532, col: 17, offset: 15562},
						name: "ReservedComments",
					},
					&choiceExpr{
						pos: position{line: 532, col: 35, offset: 15580},
						alternatives: []any{
							&litMatcher{
								pos:        position{line: 532, col: 35, offset: 15580},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
							&litMatcher{
								pos:        position{line: 532, col: 41, offset: 15586},
								val:        ";",
								ignoreCase: false,
								want:       "\";\"",
							},
						},
					},
					&zeroOrMoreExpr{
						pos: position{line: 532, col: 46, offset: 15591},
						expr: &ruleRefExpr{
							pos:  position{line: 532, col: 46, offset: 15591},
							name: "Indent",
						},
					},
				},
			},
		},
		{
			name: "Letter",
			pos:  position{line: 534, col: 1, offset: 15600},
			expr: &choiceExpr{
				pos: position{line: 534, col: 10, offset: 15609},
				alternatives: []any{
					&charClassMatcher{
						pos:        position{line: 534, col: 10, offset: 15609},
						val:        "[A-Z]",
						ranges:     []rune{'A', 'Z'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 534, col: 18, offset: 15617},
						val:        "[a-z]",
						ranges:     []rune{'a', 'z'},
						ignoreCase: false,
						inverted:   false,
					},
					&actionExpr{
						pos: position{line: 534, col: 26, offset: 15625},
						run: (*parser).callonLetter4,
						expr: &litMatcher{
							pos:        position{line: 534, col: 26, offset: 15625},
							val:        "_",
							ignoreCase: false,
							want:       "\"_\"",
						},
					},
				},
			},
		},
		{
			name: "LetterOrDigit",
			pos:  position{line: 537, col: 1, offset: 15661},
			expr: &choiceExpr{
				pos: position{line: 537, col: 17, offset: 15677},
				alternatives: []any{
					&charClassMatcher{
						pos:        position{line: 537, col: 17, offset: 15677},
						val:        "[a-z]",
						ranges:     []rune{'a', 'z'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 537, col: 25, offset: 15685},
						val:        "[A-Z]",
						ranges:     []rune{'A', 'Z'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 537, col: 33, offset: 15693},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&actionExpr{
						pos: position{line: 537, col: 41, offset: 15701},
						run: (*parser).callonLetterOrDigit5,
						expr: &charClassMatcher{
							pos:        position{line: 537, col: 41, offset: 15701},
							val:        "[_$]",
							chars:      []rune{'_', '$'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "Digit",
			pos:  position{line: 541, col: 1, offset: 15739},
			expr: &actionExpr{
				pos: position{line: 541, col: 9, offset: 15747},
				run: (*parser).callonDigit1,
				expr: &charClassMatcher{
					pos:        position{line: 541, col: 9, offset: 15747},
					val:        "[0-9]",
					ranges:     []rune{'0', '9'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "ReservedComments",
			pos:  position{line: 545, col: 1, offset: 15786},
			expr: &actionExpr{
				pos: position{line: 545, col: 20, offset: 15805},
				run: (*parser).callonReservedComments1,
				expr: &labeledExpr{
					pos:   position{line: 545, col: 20, offset: 15805},
					label: "comments",
					expr: &zeroOrMoreExpr{
						pos: position{line: 545, col: 29, offset: 15814},
						expr: &choiceExpr{
							pos: position{line: 545, col: 30, offset: 15815},
							alternatives: []any{
								&ruleRefExpr{
									pos:  position{line: 545, col: 30, offset: 15815},
									name: "Space",
								},
								&ruleRefExpr{
									pos:  position{line: 545, col: 38, offset: 15823},
									name: "Comment",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ReservedEndLineComments",
			pos:  position{line: 548, col: 1, offset: 15894},
			expr: &actionExpr{
				pos: position{line: 548, col: 27, offset: 15920},
				run: (*parser).callonReservedEndLineComments1,
				expr: &labeledExpr{
					pos:   position{line: 548, col: 27, offset: 15920},
					label: "comments",
					expr: &zeroOrMoreExpr{
						pos: position{line: 548, col: 36, offset: 15929},
						expr: &choiceExpr{
							pos: position{line: 548, col: 37, offset: 15930},
							alternatives: []any{
								&ruleRefExpr{
									pos:  position{line: 548, col: 37, offset: 15930},
									name: "Indent",
								},
								&ruleRefExpr{
									pos:  position{line: 548, col: 46, offset: 15939},
									name: "Comment",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Space",
			pos:  position{line: 552, col: 1, offset: 16011},
			expr: &actionExpr{
				pos: position{line: 552, col: 9, offset: 16019},
				run: (*parser).callonSpace1,
				expr: &oneOrMoreExpr{
					pos: position{line: 552, col: 9, offset: 16019},
					expr: &choiceExpr{
						pos: position{line: 552, col: 10, offset: 16020},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 552, col: 10, offset: 16020},
								name: "Indent",
							},
							&ruleRefExpr{
								pos:  position{line: 552, col: 19, offset: 16029},
								name: "CarriageReturnLineFeed",
							},
						},
					},
				},
			},
		},
		{
			name: "Indent",
			pos:  position{line: 555, col: 1, offset: 16074},
			expr: &actionExpr{
				pos: position{line: 555, col: 10, offset: 16083},
				run: (*parser).callonIndent1,
				expr: &charClassMatcher{
					pos:        position{line: 555, col: 10, offset: 16083},
					val:        "[ \\t\\v]",
					chars:      []rune{' ', '\t', '\v'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "CarriageReturnLineFeed",
			pos:  position{line: 558, col: 1, offset: 16111},
			expr: &charClassMatcher{
				pos:        position{line: 558, col: 26, offset: 16136},
				val:        "[\\r\\n]",
				chars:      []rune{'\r', '\n'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "Comment",
			pos:  position{line: 560, col: 1, offset: 16144},
			expr: &actionExpr{
				pos: position{line: 560, col: 11, offset: 16154},
				run: (*parser).callonComment1,
				expr: &labeledExpr{
					pos:   position{line: 560, col: 11, offset: 16154},
					label: "v",
					expr: &choiceExpr{
						pos: position{line: 560, col: 14, offset: 16157},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 560, col: 14, offset: 16157},
								name: "LongComment",
							},
							&ruleRefExpr{
								pos:  position{line: 560, col: 28, offset: 16171},
								name: "LineComment",
							},
							&ruleRefExpr{
								pos:  position{line: 560, col: 42, offset: 16185},
								name: "UnixComment",
							},
						},
					},
				},
			},
		},
		{
			name: "LongComment",
			pos:  position{line: 563, col: 1, offset: 16226},
			expr: &actionExpr{
				pos: position{line: 563, col: 15, offset: 16240},
				run: (*parser).callonLongComment1,
				expr: &seqExpr{
					pos: position{line: 563, col: 15, offset: 16240},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 563, col: 15, offset: 16240},
							val:        "/*",
							ignoreCase: false,
							want:       "\"/*\"",
						},
						&ruleRefExpr{
							pos:  position{line: 563, col: 20, offset: 16245},
							name: "LongCommentMatch",
						},
						&litMatcher{
							pos:        position{line: 563, col: 37, offset: 16262},
							val:        "*/",
							ignoreCase: false,
							want:       "\"*/\"",
						},
					},
				},
			},
		},
		{
			name: "LongCommentMatch",
			pos:  position{line: 566, col: 1, offset: 16299},
			expr: &actionExpr{
				pos: position{line: 566, col: 20, offset: 16318},
				run: (*parser).callonLongCommentMatch1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 566, col: 20, offset: 16318},
					expr: &seqExpr{
						pos: position{line: 566, col: 21, offset: 16319},
						exprs: []any{
							&notExpr{
								pos: position{line: 566, col: 21, offset: 16319},
								expr: &litMatcher{
									pos:        position{line: 566, col: 22, offset: 16320},
									val:        "*/",
									ignoreCase: false,
									want:       "\"*/\"",
								},
							},
							&anyMatcher{
								line: 566, col: 27, offset: 16325,
							},
						},
					},
				},
			},
		},
		{
			name: "LineComment",
			pos:  position{line: 570, col: 1, offset: 16362},
			expr: &actionExpr{
				pos: position{line: 570, col: 15, offset: 16376},
				run: (*parser).callonLineComment1,
				expr: &seqExpr{
					pos: position{line: 570, col: 15, offset: 16376},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 570, col: 15, offset: 16376},
							val:        "//",
							ignoreCase: false,
							want:       "\"//\"",
						},
						&ruleRefExpr{
							pos:  position{line: 570, col: 20, offset: 16381},
							name: "LineCommentMatch",
						},
					},
				},
			},
		},
		{
			name: "LineCommentMatch",
			pos:  position{line: 573, col: 1, offset: 16430},
			expr: &actionExpr{
				pos: position{line: 573, col: 20, offset: 16449},
				run: (*parser).callonLineCommentMatch1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 573, col: 20, offset: 16449},
					expr: &seqExpr{
						pos: position{line: 573, col: 21, offset: 16450},
						exprs: []any{
							&notExpr{
								pos: position{line: 573, col: 21, offset: 16450},
								expr: &charClassMatcher{
									pos:        position{line: 573, col: 22, offset: 16451},
									val:        "[\\r\\n]",
									chars:      []rune{'\r', '\n'},
									ignoreCase: false,
									inverted:   false,
								},
							},
							&anyMatcher{
								line: 573, col: 29, offset: 16458,
							},
						},
					},
				},
			},
		},
		{
			name: "UnixComment",
			pos:  position{line: 577, col: 1, offset: 16495},
			expr: &actionExpr{
				pos: position{line: 577, col: 15, offset: 16509},
				run: (*parser).callonUnixComment1,
				expr: &seqExpr{
					pos: position{line: 577, col: 15, offset: 16509},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 577, col: 15, offset: 16509},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
						&ruleRefExpr{
							pos:  position{line: 577, col: 19, offset: 16513},
							name: "UnixCommentMatch",
						},
					},
				},
			},
		},
		{
			name: "UnixCommentMatch",
			pos:  position{line: 580, col: 1, offset: 16562},
			expr: &actionExpr{
				pos: position{line: 580, col: 20, offset: 16581},
				run: (*parser).callonUnixCommentMatch1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 580, col: 20, offset: 16581},
					expr: &seqExpr{
						pos: position{line: 580, col: 21, offset: 16582},
						exprs: []any{
							&notExpr{
								pos: position{line: 580, col: 21, offset: 16582},
								expr: &charClassMatcher{
									pos:        position{line: 580, col: 22, offset: 16583},
									val:        "[\\r\\n]",
									chars:      []rune{'\r', '\n'},
									ignoreCase: false,
									inverted:   false,
								},
							},
							&anyMatcher{
								line: 580, col: 29, offset: 16590,
							},
						},
					},
				},
			},
		},
		{
			name: "BOOL",
			pos:  position{line: 584, col: 1, offset: 16628},
			expr: &actionExpr{
				pos: position{line: 584, col: 15, offset: 16642},
				run: (*parser).callonBOOL1,
				expr: &seqExpr{
					pos: position{line: 584, col: 15, offset: 16642},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 584, col: 15, offset: 16642},
							name: "ReservedComments",
						},
						&labeledExpr{
							pos:   position{line: 584, col: 32, offset: 16659},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 584, col: 34, offset: 16661},
								name: "BOOLToken",
							},
						},
						&notExpr{
							pos: position{line: 584, col: 51, offset: 16678},
							expr: &ruleRefExpr{
								pos:  position{line: 584, col: 52, offset: 16679},
								name: "LetterOrDigit",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 584, col: 67, offset: 16694},
							expr: &ruleRefExpr{
								pos:  position{line: 584, col: 67, offset: 16694},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "BOOLToken",
			pos:  position{line: 587, col: 1, offset: 16733},
			expr: &actionExpr{
				pos: position{line: 587, col: 14, offset: 16746},
				run: (*parser).callonBOOLToken1,
				expr: &litMatcher{
					pos:        position{line: 587, col: 14, offset: 16746},
					val:        "bool",
					ignoreCase: false,
					want:       "\"bool\"",
				},
			},
		},
		{
			name: "BYTE",
			pos:  position{line: 591, col: 1, offset: 16806},
			expr: &actionExpr{
				pos: position{line: 591, col: 15, offset: 16820},
				run: (*parser).callonBYTE1,
				expr: &seqExpr{
					pos: position{line: 591, col: 15, offset: 16820},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 591, col: 15, offset: 16820},
							name: "ReservedComments",
						},
						&labeledExpr{
							pos:   position{line: 591, col: 32, offset: 16837},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 591, col: 34, offset: 16839},
								name: "BYTEToken",
							},
						},
						&notExpr{
							pos: position{line: 591, col: 51, offset: 16856},
							expr: &ruleRefExpr{
								pos:  position{line: 591, col: 52, offset: 16857},
								name: "LetterOrDigit",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 591, col: 67, offset: 16872},
							expr: &ruleRefExpr{
								pos:  position{line: 591, col: 67, offset: 16872},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "BYTEToken",
			pos:  position{line: 594, col: 1, offset: 16911},
			expr: &actionExpr{
				pos: position{line: 594, col: 13, offset: 16923},
				run: (*parser).callonBYTEToken1,
				expr: &litMatcher{
					pos:        position{line: 594, col: 13, offset: 16923},
					val:        "byte",
					ignoreCase: false,
					want:       "\"byte\"",
				},
			},
		},
		{
			name: "I8",
			pos:  position{line: 598, col: 1, offset: 16983},
			expr: &actionExpr{
				pos: position{line: 598, col: 15, offset: 16997},
				run: (*parser).callonI81,
				expr: &seqExpr{
					pos: position{line: 598, col: 15, offset: 16997},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 598, col: 15, offset: 16997},
							name: "ReservedComments",
						},
						&labeledExpr{
							pos:   position{line: 598, col: 32, offset: 17014},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 598, col: 34, offset: 17016},
								name: "I8Token",
							},
						},
						&notExpr{
							pos: position{line: 598, col: 51, offset: 17033},
							expr: &ruleRefExpr{
								pos:  position{line: 598, col: 52, offset: 17034},
								name: "LetterOrDigit",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 598, col: 67, offset: 17049},
							expr: &ruleRefExpr{
								pos:  position{line: 598, col: 67, offset: 17049},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "I8Token",
			pos:  position{line: 601, col: 1, offset: 17088},
			expr: &actionExpr{
				pos: position{line: 601, col: 11, offset: 17098},
				run: (*parser).callonI8Token1,
				expr: &litMatcher{
					pos:        position{line: 601, col: 11, offset: 17098},
					val:        "i8",
					ignoreCase: false,
					want:       "\"i8\"",
				},
			},
		},
		{
			name: "I16",
			pos:  position{line: 606, col: 1, offset: 17157},
			expr: &actionExpr{
				pos: position{line: 606, col: 15, offset: 17171},
				run: (*parser).callonI161,
				expr: &seqExpr{
					pos: position{line: 606, col: 15, offset: 17171},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 606, col: 15, offset: 17171},
							name: "ReservedComments",
						},
						&labeledExpr{
							pos:   position{line: 606, col: 32, offset: 17188},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 606, col: 34, offset: 17190},
								name: "I16Token",
							},
						},
						&notExpr{
							pos: position{line: 606, col: 51, offset: 17207},
							expr: &ruleRefExpr{
								pos:  position{line: 606, col: 52, offset: 17208},
								name: "LetterOrDigit",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 606, col: 67, offset: 17223},
							expr: &ruleRefExpr{
								pos:  position{line: 606, col: 67, offset: 17223},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "I16Token",
			pos:  position{line: 609, col: 1, offset: 17262},
			expr: &actionExpr{
				pos: position{line: 609, col: 12, offset: 17273},
				run: (*parser).callonI16Token1,
				expr: &litMatcher{
					pos:        position{line: 609, col: 12, offset: 17273},
					val:        "i16",
					ignoreCase: false,
					want:       "\"i16\"",
				},
			},
		},
		{
			name: "I32",
			pos:  position{line: 613, col: 1, offset: 17332},
			expr: &actionExpr{
				pos: position{line: 613, col: 15, offset: 17346},
				run: (*parser).callonI321,
				expr: &seqExpr{
					pos: position{line: 613, col: 15, offset: 17346},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 613, col: 15, offset: 17346},
							name: "ReservedComments",
						},
						&labeledExpr{
							pos:   position{line: 613, col: 32, offset: 17363},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 613, col: 34, offset: 17365},
								name: "I32Token",
							},
						},
						&notExpr{
							pos: position{line: 613, col: 51, offset: 17382},
							expr: &ruleRefExpr{
								pos:  position{line: 613, col: 52, offset: 17383},
								name: "LetterOrDigit",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 613, col: 67, offset: 17398},
							expr: &ruleRefExpr{
								pos:  position{line: 613, col: 67, offset: 17398},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "I32Token",
			pos:  position{line: 616, col: 1, offset: 17437},
			expr: &actionExpr{
				pos: position{line: 616, col: 12, offset: 17448},
				run: (*parser).callonI32Token1,
				expr: &litMatcher{
					pos:        position{line: 616, col: 12, offset: 17448},
					val:        "i32",
					ignoreCase: false,
					want:       "\"i32\"",
				},
			},
		},
		{
			name: "I64",
			pos:  position{line: 620, col: 1, offset: 17507},
			expr: &actionExpr{
				pos: position{line: 620, col: 15, offset: 17521},
				run: (*parser).callonI641,
				expr: &seqExpr{
					pos: position{line: 620, col: 15, offset: 17521},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 620, col: 15, offset: 17521},
							name: "ReservedComments",
						},
						&labeledExpr{
							pos:   position{line: 620, col: 32, offset: 17538},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 620, col: 34, offset: 17540},
								name: "I64Token",
							},
						},
						&notExpr{
							pos: position{line: 620, col: 51, offset: 17557},
							expr: &ruleRefExpr{
								pos:  position{line: 620, col: 52, offset: 17558},
								name: "LetterOrDigit",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 620, col: 67, offset: 17573},
							expr: &ruleRefExpr{
								pos:  position{line: 620, col: 67, offset: 17573},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "I64Token",
			pos:  position{line: 623, col: 1, offset: 17612},
			expr: &actionExpr{
				pos: position{line: 623, col: 12, offset: 17623},
				run: (*parser).callonI64Token1,
				expr: &litMatcher{
					pos:        position{line: 623, col: 12, offset: 17623},
					val:        "i64",
					ignoreCase: false,
					want:       "\"i64\"",
				},
			},
		},
		{
			name: "DOUBLE",
			pos:  position{line: 627, col: 1, offset: 17682},
			expr: &actionExpr{
				pos: position{line: 627, col: 15, offset: 17696},
				run: (*parser).callonDOUBLE1,
				expr: &seqExpr{
					pos: position{line: 627, col: 15, offset: 17696},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 627, col: 15, offset: 17696},
							name: "ReservedComments",
						},
						&labeledExpr{
							pos:   position{line: 627, col: 32, offset: 17713},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 627, col: 34, offset: 17715},
								name: "DOUBLEToken",
							},
						},
						&notExpr{
							pos: position{line: 627, col: 51, offset: 17732},
							expr: &ruleRefExpr{
								pos:  position{line: 627, col: 52, offset: 17733},
								name: "LetterOrDigit",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 627, col: 67, offset: 17748},
							expr: &ruleRefExpr{
								pos:  position{line: 627, col: 67, offset: 17748},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "DOUBLEToken",
			pos:  position{line: 630, col: 1, offset: 17787},
			expr: &actionExpr{
				pos: position{line: 630, col: 15, offset: 17801},
				run: (*parser).callonDOUBLEToken1,
				expr: &litMatcher{
					pos:        position{line: 630, col: 15, offset: 17801},
					val:        "double",
					ignoreCase: false,
					want:       "\"double\"",
				},
			},
		},
		{
			name: "STRING",
			pos:  position{line: 634, col: 1, offset: 17863},
			expr: &actionExpr{
				pos: position{line: 634, col: 15, offset: 17877},
				run: (*parser).callonSTRING1,
				expr: &seqExpr{
					pos: position{line: 634, col: 15, offset: 17877},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 634, col: 15, offset: 17877},
							name: "ReservedComments",
						},
						&labeledExpr{
							pos:   position{line: 634, col: 32, offset: 17894},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 634, col: 34, offset: 17896},
								name: "STRINGToken",
							},
						},
						&notExpr{
							pos: position{line: 634, col: 51, offset: 17913},
							expr: &ruleRefExpr{
								pos:  position{line: 634, col: 52, offset: 17914},
								name: "LetterOrDigit",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 634, col: 67, offset: 17929},
							expr: &ruleRefExpr{
								pos:  position{line: 634, col: 67, offset: 17929},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "STRINGToken",
			pos:  position{line: 637, col: 1, offset: 17968},
			expr: &actionExpr{
				pos: position{line: 637, col: 15, offset: 17982},
				run: (*parser).callonSTRINGToken1,
				expr: &litMatcher{
					pos:        position{line: 637, col: 15, offset: 17982},
					val:        "string",
					ignoreCase: false,
					want:       "\"string\"",
				},
			},
		},
		{
			name: "BINARY",
			pos:  position{line: 641, col: 1, offset: 18044},
			expr: &actionExpr{
				pos: position{line: 641, col: 15, offset: 18058},
				run: (*parser).callonBINARY1,
				expr: &seqExpr{
					pos: position{line: 641, col: 15, offset: 18058},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 641, col: 15, offset: 18058},
							name: "ReservedComments",
						},
						&labeledExpr{
							pos:   position{line: 641, col: 32, offset: 18075},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 641, col: 34, offset: 18077},
								name: "BINARYToken",
							},
						},
						&notExpr{
							pos: position{line: 641, col: 51, offset: 18094},
							expr: &ruleRefExpr{
								pos:  position{line: 641, col: 52, offset: 18095},
								name: "LetterOrDigit",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 641, col: 67, offset: 18110},
							expr: &ruleRefExpr{
								pos:  position{line: 641, col: 67, offset: 18110},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "BINARYToken",
			pos:  position{line: 644, col: 1, offset: 18149},
			expr: &actionExpr{
				pos: position{line: 644, col: 15, offset: 18163},
				run: (*parser).callonBINARYToken1,
				expr: &litMatcher{
					pos:        position{line: 644, col: 15, offset: 18163},
					val:        "binary",
					ignoreCase: false,
					want:       "\"binary\"",
				},
			},
		},
		{
			name: "CONST",
			pos:  position{line: 648, col: 1, offset: 18225},
			expr: &actionExpr{
				pos: position{line: 648, col: 15, offset: 18239},
				run: (*parser).callonCONST1,
				expr: &seqExpr{
					pos: position{line: 648, col: 15, offset: 18239},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 648, col: 15, offset: 18239},
							name: "ReservedComments",
						},
						&labeledExpr{
							pos:   position{line: 648, col: 32, offset: 18256},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 648, col: 34, offset: 18258},
								name: "CONSTToken",
							},
						},
						&notExpr{
							pos: position{line: 648, col: 53, offset: 18277},
							expr: &ruleRefExpr{
								pos:  position{line: 648, col: 54, offset: 18278},
								name: "LetterOrDigit",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 648, col: 69, offset: 18293},
							expr: &ruleRefExpr{
								pos:  position{line: 648, col: 69, offset: 18293},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "CONSTToken",
			pos:  position{line: 651, col: 1, offset: 18332},
			expr: &actionExpr{
				pos: position{line: 651, col: 14, offset: 18345},
				run: (*parser).callonCONSTToken1,
				expr: &litMatcher{
					pos:        position{line: 651, col: 14, offset: 18345},
					val:        "const",
					ignoreCase: false,
					want:       "\"const\"",
				},
			},
		},
		{
			name: "ONEWAY",
			pos:  position{line: 655, col: 1, offset: 18406},
			expr: &actionExpr{
				pos: position{line: 655, col: 15, offset: 18420},
				run: (*parser).callonONEWAY1,
				expr: &seqExpr{
					pos: position{line: 655, col: 15, offset: 18420},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 655, col: 15, offset: 18420},
							name: "ReservedComments",
						},
						&labeledExpr{
							pos:   position{line: 655, col: 32, offset: 18437},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 655, col: 34, offset: 18439},
								name: "ONEWAYToken",
							},
						},
						&notExpr{
							pos: position{line: 655, col: 53, offset: 18458},
							expr: &ruleRefExpr{
								pos:  position{line: 655, col: 54, offset: 18459},
								name: "LetterOrDigit",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 655, col: 69, offset: 18474},
							expr: &ruleRefExpr{
								pos:  position{line: 655, col: 69, offset: 18474},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "ONEWAYToken",
			pos:  position{line: 658, col: 1, offset: 18513},
			expr: &actionExpr{
				pos: position{line: 658, col: 15, offset: 18527},
				run: (*parser).callonONEWAYToken1,
				expr: &litMatcher{
					pos:        position{line: 658, col: 15, offset: 18527},
					val:        "oneway",
					ignoreCase: false,
					want:       "\"oneway\"",
				},
			},
		},
		{
			name: "TYPEDEF",
			pos:  position{line: 662, col: 1, offset: 18589},
			expr: &actionExpr{
				pos: position{line: 662, col: 15, offset: 18603},
				run: (*parser).callonTYPEDEF1,
				expr: &seqExpr{
					pos: position{line: 662, col: 15, offset: 18603},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 662, col: 15, offset: 18603},
							name: "ReservedComments",
						},
						&litMatcher{
							pos:        position{line: 662, col: 32, offset: 18620},
							val:        "typedef",
							ignoreCase: false,
							want:       "\"typedef\"",
						},
						&notExpr{
							pos: position{line: 662, col: 48, offset: 18636},
							expr: &ruleRefExpr{
								pos:  position{line: 662, col: 49, offset: 18637},
								name: "LetterOrDigit",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 662, col: 64, offset: 18652},
							expr: &ruleRefExpr{
								pos:  position{line: 662, col: 64, offset: 18652},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "MAP",
			pos:  position{line: 665, col: 1, offset: 18687},
			expr: &actionExpr{
				pos: position{line: 665, col: 15, offset: 18701},
				run: (*parser).callonMAP1,
				expr: &seqExpr{
					pos: position{line: 665, col: 15, offset: 18701},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 665, col: 15, offset: 18701},
							name: "ReservedComments",
						},
						&labeledExpr{
							pos:   position{line: 665, col: 32, offset: 18718},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 665, col: 34, offset: 18720},
								name: "MAPToken",
							},
						},
						&notExpr{
							pos: position{line: 665, col: 53, offset: 18739},
							expr: &ruleRefExpr{
								pos:  position{line: 665, col: 54, offset: 18740},
								name: "LetterOrDigit",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 665, col: 69, offset: 18755},
							expr: &ruleRefExpr{
								pos:  position{line: 665, col: 69, offset: 18755},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "MAPToken",
			pos:  position{line: 668, col: 1, offset: 18794},
			expr: &actionExpr{
				pos: position{line: 668, col: 12, offset: 18805},
				run: (*parser).callonMAPToken1,
				expr: &litMatcher{
					pos:        position{line: 668, col: 12, offset: 18805},
					val:        "map",
					ignoreCase: false,
					want:       "\"map\"",
				},
			},
		},
		{
			name: "SET",
			pos:  position{line: 672, col: 1, offset: 18864},
			expr: &actionExpr{
				pos: position{line: 672, col: 15, offset: 18878},
				run: (*parser).callonSET1,
				expr: &seqExpr{
					pos: position{line: 672, col: 15, offset: 18878},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 672, col: 15, offset: 18878},
							name: "ReservedComments",
						},
						&labeledExpr{
							pos:   position{line: 672, col: 32, offset: 18895},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 672, col: 34, offset: 18897},
								name: "SETToken",
							},
						},
						&notExpr{
							pos: position{line: 672, col: 53, offset: 18916},
							expr: &ruleRefExpr{
								pos:  position{line: 672, col: 54, offset: 18917},
								name: "LetterOrDigit",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 672, col: 69, offset: 18932},
							expr: &ruleRefExpr{
								pos:  position{line: 672, col: 69, offset: 18932},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "SETToken",
			pos:  position{line: 675, col: 1, offset: 18971},
			expr: &actionExpr{
				pos: position{line: 675, col: 12, offset: 18982},
				run: (*parser).callonSETToken1,
				expr: &litMatcher{
					pos:        position{line: 675, col: 12, offset: 18982},
					val:        "set",
					ignoreCase: false,
					want:       "\"set\"",
				},
			},
		},
		{
			name: "LIST",
			pos:  position{line: 679, col: 1, offset: 19041},
			expr: &actionExpr{
				pos: position{line: 679, col: 15, offset: 19055},
				run: (*parser).callonLIST1,
				expr: &seqExpr{
					pos: position{line: 679, col: 15, offset: 19055},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 679, col: 15, offset: 19055},
							name: "ReservedComments",
						},
						&labeledExpr{
							pos:   position{line: 679, col: 32, offset: 19072},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 679, col: 34, offset: 19074},
								name: "ListToken",
							},
						},
						&notExpr{
							pos: position{line: 679, col: 53, offset: 19093},
							expr: &ruleRefExpr{
								pos:  position{line: 679, col: 54, offset: 19094},
								name: "LetterOrDigit",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 679, col: 69, offset: 19109},
							expr: &ruleRefExpr{
								pos:  position{line: 679, col: 69, offset: 19109},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "ListToken",
			pos:  position{line: 682, col: 1, offset: 19148},
			expr: &actionExpr{
				pos: position{line: 682, col: 13, offset: 19160},
				run: (*parser).callonListToken1,
				expr: &litMatcher{
					pos:        position{line: 682, col: 13, offset: 19160},
					val:        "list",
					ignoreCase: false,
					want:       "\"list\"",
				},
			},
		},
		{
			name: "VOID",
			pos:  position{line: 686, col: 1, offset: 19220},
			expr: &actionExpr{
				pos: position{line: 686, col: 15, offset: 19234},
				run: (*parser).callonVOID1,
				expr: &seqExpr{
					pos: position{line: 686, col: 15, offset: 19234},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 686, col: 15, offset: 19234},
							name: "ReservedComments",
						},
						&litMatcher{
							pos:        position{line: 686, col: 32, offset: 19251},
							val:        "void",
							ignoreCase: false,
							want:       "\"void\"",
						},
						&notExpr{
							pos: position{line: 686, col: 48, offset: 19267},
							expr: &ruleRefExpr{
								pos:  position{line: 686, col: 49, offset: 19268},
								name: "LetterOrDigit",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 686, col: 64, offset: 19283},
							expr: &ruleRefExpr{
								pos:  position{line: 686, col: 64, offset: 19283},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "THROWS",
			pos:  position{line: 689, col: 1, offset: 19315},
			expr: &actionExpr{
				pos: position{line: 689, col: 15, offset: 19329},
				run: (*parser).callonTHROWS1,
				expr: &seqExpr{
					pos: position{line: 689, col: 15, offset: 19329},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 689, col: 15, offset: 19329},
							name: "ReservedComments",
						},
						&litMatcher{
							pos:        position{line: 689, col: 32, offset: 19346},
							val:        "throws",
							ignoreCase: false,
							want:       "\"throws\"",
						},
						&notExpr{
							pos: position{line: 689, col: 48, offset: 19362},
							expr: &ruleRefExpr{
								pos:  position{line: 689, col: 49, offset: 19363},
								name: "LetterOrDigit",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 689, col: 64, offset: 19378},
							expr: &ruleRefExpr{
								pos:  position{line: 689, col: 64, offset: 19378},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "EXCEPTION",
			pos:  position{line: 692, col: 1, offset: 19412},
			expr: &actionExpr{
				pos: position{line: 692, col: 15, offset: 19426},
				run: (*parser).callonEXCEPTION1,
				expr: &seqExpr{
					pos: position{line: 692, col: 15, offset: 19426},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 692, col: 15, offset: 19426},
							name: "ReservedComments",
						},
						&litMatcher{
							pos:        position{line: 692, col: 32, offset: 19443},
							val:        "exception",
							ignoreCase: false,
							want:       "\"exception\"",
						},
						&notExpr{
							pos: position{line: 692, col: 48, offset: 19459},
							expr: &ruleRefExpr{
								pos:  position{line: 692, col: 49, offset: 19460},
								name: "LetterOrDigit",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 692, col: 64, offset: 19475},
							expr: &ruleRefExpr{
								pos:  position{line: 692, col: 64, offset: 19475},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "EXTENDS",
			pos:  position{line: 695, col: 1, offset: 19512},
			expr: &actionExpr{
				pos: position{line: 695, col: 15, offset: 19526},
				run: (*parser).callonEXTENDS1,
				expr: &seqExpr{
					pos: position{line: 695, col: 15, offset: 19526},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 695, col: 15, offset: 19526},
							name: "ReservedComments",
						},
						&litMatcher{
							pos:        position{line: 695, col: 32, offset: 19543},
							val:        "extends",
							ignoreCase: false,
							want:       "\"extends\"",
						},
						&notExpr{
							pos: position{line: 695, col: 48, offset: 19559},
							expr: &ruleRefExpr{
								pos:  position{line: 695, col: 49, offset: 19560},
								name: "LetterOrDigit",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 695, col: 64, offset: 19575},
							expr: &ruleRefExpr{
								pos:  position{line: 695, col: 64, offset: 19575},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "SERVICE",
			pos:  position{line: 698, col: 1, offset: 19610},
			expr: &actionExpr{
				pos: position{line: 698, col: 15, offset: 19624},
				run: (*parser).callonSERVICE1,
				expr: &seqExpr{
					pos: position{line: 698, col: 15, offset: 19624},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 698, col: 15, offset: 19624},
							name: "ReservedComments",
						},
						&litMatcher{
							pos:        position{line: 698, col: 32, offset: 19641},
							val:        "service",
							ignoreCase: false,
							want:       "\"service\"",
						},
						&notExpr{
							pos: position{line: 698, col: 48, offset: 19657},
							expr: &ruleRefExpr{
								pos:  position{line: 698, col: 49, offset: 19658},
								name: "LetterOrDigit",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 698, col: 64, offset: 19673},
							expr: &ruleRefExpr{
								pos:  position{line: 698, col: 64, offset: 19673},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "STRUCT",
			pos:  position{line: 701, col: 1, offset: 19708},
			expr: &actionExpr{
				pos: position{line: 701, col: 15, offset: 19722},
				run: (*parser).callonSTRUCT1,
				expr: &seqExpr{
					pos: position{line: 701, col: 15, offset: 19722},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 701, col: 15, offset: 19722},
							name: "ReservedComments",
						},
						&litMatcher{
							pos:        position{line: 701, col: 32, offset: 19739},
							val:        "struct",
							ignoreCase: false,
							want:       "\"struct\"",
						},
						&notExpr{
							pos: position{line: 701, col: 48, offset: 19755},
							expr: &ruleRefExpr{
								pos:  position{line: 701, col: 49, offset: 19756},
								name: "LetterOrDigit",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 701, col: 64, offset: 19771},
							expr: &ruleRefExpr{
								pos:  position{line: 701, col: 64, offset: 19771},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "UNION",
			pos:  position{line: 704, col: 1, offset: 19805},
			expr: &actionExpr{
				pos: position{line: 704, col: 15, offset: 19819},
				run: (*parser).callonUNION1,
				expr: &seqExpr{
					pos: position{line: 704, col: 15, offset: 19819},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 704, col: 15, offset: 19819},
							name: "ReservedComments",
						},
						&litMatcher{
							pos:        position{line: 704, col: 32, offset: 19836},
							val:        "union",
							ignoreCase: false,
							want:       "\"union\"",
						},
						&notExpr{
							pos: position{line: 704, col: 48, offset: 19852},
							expr: &ruleRefExpr{
								pos:  position{line: 704, col: 49, offset: 19853},
								name: "LetterOrDigit",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 704, col: 64, offset: 19868},
							expr: &ruleRefExpr{
								pos:  position{line: 704, col: 64, offset: 19868},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "ENUM",
			pos:  position{line: 707, col: 1, offset: 19901},
			expr: &actionExpr{
				pos: position{line: 707, col: 15, offset: 19915},
				run: (*parser).callonENUM1,
				expr: &seqExpr{
					pos: position{line: 707, col: 15, offset: 19915},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 707, col: 15, offset: 19915},
							name: "ReservedComments",
						},
						&litMatcher{
							pos:        position{line: 707, col: 32, offset: 19932},
							val:        "enum",
							ignoreCase: false,
							want:       "\"enum\"",
						},
						&notExpr{
							pos: position{line: 707, col: 48, offset: 19948},
							expr: &ruleRefExpr{
								pos:  position{line: 707, col: 49, offset: 19949},
								name: "LetterOrDigit",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 707, col: 64, offset: 19964},
							expr: &ruleRefExpr{
								pos:  position{line: 707, col: 64, offset: 19964},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "INCLUDE",
			pos:  position{line: 710, col: 1, offset: 19996},
			expr: &actionExpr{
				pos: position{line: 710, col: 15, offset: 20010},
				run: (*parser).callonINCLUDE1,
				expr: &seqExpr{
					pos: position{line: 710, col: 15, offset: 20010},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 710, col: 15, offset: 20010},
							name: "ReservedComments",
						},
						&litMatcher{
							pos:        position{line: 710, col: 32, offset: 20027},
							val:        "include",
							ignoreCase: false,
							want:       "\"include\"",
						},
						&notExpr{
							pos: position{line: 710, col: 48, offset: 20043},
							expr: &ruleRefExpr{
								pos:  position{line: 710, col: 49, offset: 20044},
								name: "LetterOrDigit",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 710, col: 64, offset: 20059},
							expr: &ruleRefExpr{
								pos:  position{line: 710, col: 64, offset: 20059},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "CPPINCLUDE",
			pos:  position{line: 713, col: 1, offset: 20094},
			expr: &actionExpr{
				pos: position{line: 713, col: 15, offset: 20108},
				run: (*parser).callonCPPINCLUDE1,
				expr: &seqExpr{
					pos: position{line: 713, col: 15, offset: 20108},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 713, col: 15, offset: 20108},
							name: "ReservedComments",
						},
						&litMatcher{
							pos:        position{line: 713, col: 32, offset: 20125},
							val:        "cpp_include",
							ignoreCase: false,
							want:       "\"cpp_include\"",
						},
						&notExpr{
							pos: position{line: 713, col: 48, offset: 20141},
							expr: &ruleRefExpr{
								pos:  position{line: 713, col: 49, offset: 20142},
								name: "LetterOrDigit",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 713, col: 64, offset: 20157},
							expr: &ruleRefExpr{
								pos:  position{line: 713, col: 64, offset: 20157},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "NAMESPACE",
			pos:  position{line: 716, col: 1, offset: 20196},
			expr: &actionExpr{
				pos: position{line: 716, col: 15, offset: 20210},
				run: (*parser).callonNAMESPACE1,
				expr: &seqExpr{
					pos: position{line: 716, col: 15, offset: 20210},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 716, col: 15, offset: 20210},
							name: "ReservedComments",
						},
						&litMatcher{
							pos:        position{line: 716, col: 32, offset: 20227},
							val:        "namespace",
							ignoreCase: false,
							want:       "\"namespace\"",
						},
						&notExpr{
							pos: position{line: 716, col: 48, offset: 20243},
							expr: &ruleRefExpr{
								pos:  position{line: 716, col: 49, offset: 20244},
								name: "LetterOrDigit",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 716, col: 64, offset: 20259},
							expr: &ruleRefExpr{
								pos:  position{line: 716, col: 64, offset: 20259},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "CPPTYPE",
			pos:  position{line: 719, col: 1, offset: 20296},
			expr: &actionExpr{
				pos: position{line: 719, col: 15, offset: 20310},
				run: (*parser).callonCPPTYPE1,
				expr: &seqExpr{
					pos: position{line: 719, col: 15, offset: 20310},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 719, col: 15, offset: 20310},
							name: "ReservedComments",
						},
						&litMatcher{
							pos:        position{line: 719, col: 32, offset: 20327},
							val:        "cpp_type",
							ignoreCase: false,
							want:       "\"cpp_type\"",
						},
						&notExpr{
							pos: position{line: 719, col: 48, offset: 20343},
							expr: &ruleRefExpr{
								pos:  position{line: 719, col: 49, offset: 20344},
								name: "LetterOrDigit",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 719, col: 64, offset: 20359},
							expr: &ruleRefExpr{
								pos:  position{line: 719, col: 64, offset: 20359},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "LBRK",
			pos:  position{line: 722, col: 1, offset: 20395},
			expr: &actionExpr{
				pos: position{line: 722, col: 15, offset: 20409},
				run: (*parser).callonLBRK1,
				expr: &seqExpr{
					pos: position{line: 722, col: 15, offset: 20409},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 722, col: 15, offset: 20409},
							name: "ReservedComments",
						},
						&litMatcher{
							pos:        position{line: 722, col: 32, offset: 20426},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 722, col: 40, offset: 20434},
							expr: &ruleRefExpr{
								pos:  position{line: 722, col: 40, offset: 20434},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "RBRK",
			pos:  position{line: 725, col: 1, offset: 20463},
			expr: &actionExpr{
				pos: position{line: 725, col: 15, offset: 20477},
				run: (*parser).callonRBRK1,
				expr: &seqExpr{
					pos: position{line: 725, col: 15, offset: 20477},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 725, col: 15, offset: 20477},
							name: "ReservedComments",
						},
						&litMatcher{
							pos:        position{line: 725, col: 32, offset: 20494},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 725, col: 40, offset: 20502},
							expr: &ruleRefExpr{
								pos:  position{line: 725, col: 40, offset: 20502},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "LCUR",
			pos:  position{line: 728, col: 1, offset: 20531},
			expr: &actionExpr{
				pos: position{line: 728, col: 14, offset: 20544},
				run: (*parser).callonLCUR1,
				expr: &seqExpr{
					pos: position{line: 728, col: 14, offset: 20544},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 728, col: 14, offset: 20544},
							name: "ReservedComments",
						},
						&labeledExpr{
							pos:   position{line: 728, col: 31, offset: 20561},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 728, col: 33, offset: 20563},
								name: "LCURToken",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 728, col: 47, offset: 20577},
							expr: &ruleRefExpr{
								pos:  position{line: 728, col: 47, offset: 20577},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "RCUR",
			pos:  position{line: 731, col: 1, offset: 20613},
			expr: &actionExpr{
				pos: position{line: 731, col: 14, offset: 20626},
				run: (*parser).callonRCUR1,
				expr: &seqExpr{
					pos: position{line: 731, col: 14, offset: 20626},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 731, col: 14, offset: 20626},
							name: "ReservedComments",
						},
						&labeledExpr{
							pos:   position{line: 731, col: 31, offset: 20643},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 731, col: 33, offset: 20645},
								name: "RCURToken",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 731, col: 47, offset: 20659},
							expr: &ruleRefExpr{
								pos:  position{line: 731, col: 47, offset: 20659},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "LCURToken",
			pos:  position{line: 734, col: 1, offset: 20695},
			expr: &actionExpr{
				pos: position{line: 734, col: 13, offset: 20707},
				run: (*parser).callonLCURToken1,
				expr: &litMatcher{
					pos:        position{line: 734, col: 13, offset: 20707},
					val:        "{",
					ignoreCase: false,
					want:       "\"{\"",
				},
			},
		},
		{
			name: "RCURToken",
			pos:  position{line: 737, col: 1, offset: 20743},
			expr: &choiceExpr{
				pos: position{line: 737, col: 13, offset: 20755},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 737, col: 13, offset: 20755},
						run: (*parser).callonRCURToken2,
						expr: &litMatcher{
							pos:        position{line: 737, col: 13, offset: 20755},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
					&throwExpr{
						pos:   position{line: 739, col: 5, offset: 20793},
						label: "errRCUR",
					},
				},
			},
		},
		{
			name: "EQUAL",
			pos:  position{line: 740, col: 1, offset: 20804},
			expr: &actionExpr{
				pos: position{line: 740, col: 9, offset: 20812},
				run: (*parser).callonEQUAL1,
				expr: &seqExpr{
					pos: position{line: 740, col: 9, offset: 20812},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 740, col: 9, offset: 20812},
							name: "ReservedComments",
						},
						&litMatcher{
							pos:        position{line: 740, col: 26, offset: 20829},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 740, col: 34, offset: 20837},
							expr: &ruleRefExpr{
								pos:  position{line: 740, col: 34, offset: 20837},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "LPOINT",
			pos:  position{line: 743, col: 1, offset: 20866},
			expr: &actionExpr{
				pos: position{line: 743, col: 15, offset: 20880},
				run: (*parser).callonLPOINT1,
				expr: &seqExpr{
					pos: position{line: 743, col: 15, offset: 20880},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 743, col: 15, offset: 20880},
							name: "ReservedComments",
						},
						&litMatcher{
							pos:        position{line: 743, col: 32, offset: 20897},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 743, col: 40, offset: 20905},
							expr: &ruleRefExpr{
								pos:  position{line: 743, col: 40, offset: 20905},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "RPOINT",
			pos:  position{line: 746, col: 1, offset: 20934},
			expr: &actionExpr{
				pos: position{line: 746, col: 15, offset: 20948},
				run: (*parser).callonRPOINT1,
				expr: &seqExpr{
					pos: position{line: 746, col: 15, offset: 20948},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 746, col: 15, offset: 20948},
							name: "ReservedComments",
						},
						&litMatcher{
							pos:        position{line: 746, col: 32, offset: 20965},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 746, col: 40, offset: 20973},
							expr: &ruleRefExpr{
								pos:  position{line: 746, col: 40, offset: 20973},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "COMMA",
			pos:  position{line: 749, col: 1, offset: 21002},
			expr: &actionExpr{
				pos: position{line: 749, col: 15, offset: 21016},
				run: (*parser).callonCOMMA1,
				expr: &seqExpr{
					pos: position{line: 749, col: 15, offset: 21016},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 749, col: 15, offset: 21016},
							name: "ReservedComments",
						},
						&litMatcher{
							pos:        position{line: 749, col: 32, offset: 21033},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 749, col: 40, offset: 21041},
							expr: &ruleRefExpr{
								pos:  position{line: 749, col: 40, offset: 21041},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "LPAR",
			pos:  position{line: 752, col: 1, offset: 21070},
			expr: &actionExpr{
				pos: position{line: 752, col: 15, offset: 21084},
				run: (*parser).callonLPAR1,
				expr: &seqExpr{
					pos: position{line: 752, col: 15, offset: 21084},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 752, col: 15, offset: 21084},
							name: "ReservedComments",
						},
						&litMatcher{
							pos:        position{line: 752, col: 32, offset: 21101},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 752, col: 40, offset: 21109},
							expr: &ruleRefExpr{
								pos:  position{line: 752, col: 40, offset: 21109},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "RPAR",
			pos:  position{line: 755, col: 1, offset: 21138},
			expr: &actionExpr{
				pos: position{line: 755, col: 15, offset: 21152},
				run: (*parser).callonRPAR1,
				expr: &seqExpr{
					pos: position{line: 755, col: 15, offset: 21152},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 755, col: 15, offset: 21152},
							name: "ReservedComments",
						},
						&litMatcher{
							pos:        position{line: 755, col: 32, offset: 21169},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 755, col: 40, offset: 21177},
							expr: &ruleRefExpr{
								pos:  position{line: 755, col: 40, offset: 21177},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "COLON",
			pos:  position{line: 758, col: 1, offset: 21206},
			expr: &actionExpr{
				pos: position{line: 758, col: 15, offset: 21220},
				run: (*parser).callonCOLON1,
				expr: &seqExpr{
					pos: position{line: 758, col: 15, offset: 21220},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 758, col: 15, offset: 21220},
							name: "ReservedComments",
						},
						&litMatcher{
							pos:        position{line: 758, col: 32, offset: 21237},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 758, col: 40, offset: 21245},
							expr: &ruleRefExpr{
								pos:  position{line: 758, col: 40, offset: 21245},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "DefinitionStart",
			pos:  position{line: 762, col: 1, offset: 21275},
			expr: &choiceExpr{
				pos: position{line: 762, col: 19, offset: 21293},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 762, col: 19, offset: 21293},
						name: "STRUCT",
					},
					&ruleRefExpr{
						pos:  position{line: 762, col: 28, offset: 21302},
						name: "UNION",
					},
					&ruleRefExpr{
						pos:  position{line: 762, col: 36, offset: 21310},
						name: "EXCEPTION",
					},
					&ruleRefExpr{
						pos:  position{line: 762, col: 48, offset: 21322},
						name: "ENUM",
					},
					&ruleRefExpr{
						pos:  position{line: 762, col: 55, offset: 21329},
						name: "SERVICE",
					},
					&ruleRefExpr{
						pos:  position{line: 762, col: 65, offset: 21339},
						name: "CONST",
					},
					&ruleRefExpr{
						pos:  position{line: 762, col: 73, offset: 21347},
						name: "TYPEDEF",
					},
				},
			},
		},
		{
			name: "ErrFieldIndex",
			pos:  position{line: 764, col: 1, offset: 21356},
			expr: &actionExpr{
				pos: position{line: 764, col: 17, offset: 21372},
				run: (*parser).callonErrFieldIndex1,
				expr: &seqExpr{
					pos: position{line: 764, col: 17, offset: 21372},
					exprs: []any{
						&stateCodeExpr{
							pos: position{line: 764, col: 17, offset: 21372},
							run: (*parser).callonErrFieldIndex3,
						},
						&zeroOrMoreExpr{
							pos: position{line: 766, col: 3, offset: 21408},
							expr: &seqExpr{
								pos: position{line: 766, col: 4, offset: 21409},
								exprs: []any{
									&notExpr{
										pos: position{line: 766, col: 4, offset: 21409},
										expr: &charClassMatcher{
											pos:        position{line: 766, col: 6, offset: 21411},
											val:        "[:\\r\\n]",
											chars:      []rune{':', '\r', '\n'},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&anyMatcher{
										line: 766, col: 15, offset: 21420,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ErrStructField",
			pos:  position{line: 772, col: 1, offset: 21531},
			expr: &actionExpr{
				pos: position{line: 772, col: 18, offset: 21548},
				run: (*parser).callonErrStructField1,
				expr: &seqExpr{
					pos: position{line: 772, col: 18, offset: 21548},
					exprs: []any{
						&stateCodeExpr{
							pos: position{line: 772, col: 18, offset: 21548},
							run: (*parser).callonErrStructField3,
						},
						&zeroOrMoreExpr{
							pos: position{line: 774, col: 3, offset: 21585},
							expr: &seqExpr{
								pos: position{line: 774, col: 5, offset: 21587},
								exprs: []any{
									&notExpr{
										pos: position{line: 774, col: 5, offset: 21587},
										expr: &choiceExpr{
											pos: position{line: 774, col: 7, offset: 21589},
											alternatives: []any{
												&ruleRefExpr{
													pos:  position{line: 774, col: 7, offset: 21589},
													name: "Field",
												},
												&seqExpr{
													pos: position{line: 774, col: 16, offset: 21598},
													exprs: []any{
														&ruleRefExpr{
															pos:  position{line: 774, col: 16, offset: 21598},
															name: "ReservedComments",
														},
														&litMatcher{
															pos:        position{line: 774, col: 33, offset: 21615},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
														&zeroOrMoreExpr{
															pos: position{line: 774, col: 37, offset: 21619},
															expr: &ruleRefExpr{
																pos:  position{line: 774, col: 37, offset: 21619},
																name: "Indent",
															},
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 774, col: 48, offset: 21630},
													name: "DefinitionStart",
												},
											},
										},
									},
									&anyMatcher{
										line: 774, col: 66, offset: 21648,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ErrStructIdentifier",
			pos:  position{line: 778, col: 1, offset: 21740},
			expr: &actionExpr{
				pos: position{line: 778, col: 23, offset: 21762},
				run: (*parser).callonErrStructIdentifier1,
				expr: &seqExpr{
					pos: position{line: 778, col: 23, offset: 21762},
					exprs: []any{
						&stateCodeExpr{
							pos: position{line: 778, col: 23, offset: 21762},
							run: (*parser).callonErrStructIdentifier3,
						},
						&zeroOrMoreExpr{
							pos: position{line: 780, col: 3, offset: 21804},
							expr: &seqExpr{
								pos: position{line: 780, col: 5, offset: 21806},
								exprs: []any{
									&notExpr{
										pos: position{line: 780, col: 5, offset: 21806},
										expr: &litMatcher{
											pos:        position{line: 780, col: 6, offset: 21807},
											val:        "{",
											ignoreCase: false,
											want:       "\"{\"",
										},
									},
									&anyMatcher{
										line: 780, col: 10, offset: 21811,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ErrStructRCUR",
			pos:  position{line: 787, col: 1, offset: 21995},
			expr: &actionExpr{
				pos: position{line: 787, col: 17, offset: 22011},
				run: (*parser).callonErrStructRCUR1,
				expr: &seqExpr{
					pos: position{line: 787, col: 17, offset: 22011},
					exprs: []any{
						&stateCodeExpr{
							pos: position{line: 787, col: 17, offset: 22011},
							run: (*parser).callonErrStructRCUR3,
						},
						&zeroOrMoreExpr{
							pos: position{line: 789, col: 3, offset: 22052},
							expr: &seqExpr{
								pos: position{line: 789, col: 5, offset: 22054},
								exprs: []any{
									&notExpr{
										pos: position{line: 789, col: 5, offset: 22054},
										expr: &ruleRefExpr{
											pos:  position{line: 789, col: 6, offset: 22055},
											name: "DefinitionStart",
										},
									},
									&anyMatcher{
										line: 789, col: 22, offset: 22071,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ErrStructLCUR",
			pos:  position{line: 793, col: 1, offset: 22232},
			expr: &actionExpr{
				pos: position{line: 793, col: 17, offset: 22248},
				run: (*parser).callonErrStructLCUR1,
				expr: &seqExpr{
					pos: position{line: 793, col: 17, offset: 22248},
					exprs: []any{
						&stateCodeExpr{
							pos: position{line: 793, col: 17, offset: 22248},
							run: (*parser).callonErrStructLCUR3,
						},
						&zeroOrMoreExpr{
							pos: position{line: 795, col: 3, offset: 22289},
							expr: &seqExpr{
								pos: position{line: 795, col: 5, offset: 22291},
								exprs: []any{
									&notExpr{
										pos: position{line: 795, col: 5, offset: 22291},
										expr: &litMatcher{
											pos:        position{line: 795, col: 6, offset: 22292},
											val:        "}",
											ignoreCase: false,
											want:       "\"}\"",
										},
									},
									&anyMatcher{
										line: 795, col: 10, offset: 22296,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ErrUnionIdentifier",
			pos:  position{line: 801, col: 1, offset: 22405},
			expr: &actionExpr{
				pos: position{line: 801, col: 22, offset: 22426},
				run: (*parser).callonErrUnionIdentifier1,
				expr: &seqExpr{
					pos: position{line: 801, col: 22, offset: 22426},
					exprs: []any{
						&stateCodeExpr{
							pos: position{line: 801, col: 22, offset: 22426},
							run: (*parser).callonErrUnionIdentifier3,
						},
						&zeroOrMoreExpr{
							pos: position{line: 803, col: 3, offset: 22467},
							expr: &seqExpr{
								pos: position{line: 803, col: 5, offset: 22469},
								exprs: []any{
									&notExpr{
										pos: position{line: 803, col: 5, offset: 22469},
										expr: &litMatcher{
											pos:        position{line: 803, col: 6, offset: 22470},
											val:        "{",
											ignoreCase: false,
											want:       "\"{\"",
										},
									},
									&anyMatcher{
										line: 803, col: 10, offset: 22474,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ErrUnionRCUR",
			pos:  position{line: 810, col: 1, offset: 22618},
			expr: &actionExpr{
				pos: position{line: 810, col: 16, offset: 22633},
				run: (*parser).callonErrUnionRCUR1,
				expr: &seqExpr{
					pos: position{line: 810, col: 16, offset: 22633},
					exprs: []any{
						&stateCodeExpr{
							pos: position{line: 810, col: 16, offset: 22633},
							run: (*parser).callonErrUnionRCUR3,
						},
						&zeroOrMoreExpr{
							pos: position{line: 812, col: 3, offset: 22673},
							expr: &seqExpr{
								pos: position{line: 812, col: 5, offset: 22675},
								exprs: []any{
									&notExpr{
										pos: position{line: 812, col: 5, offset: 22675},
										expr: &ruleRefExpr{
											pos:  position{line: 812, col: 6, offset: 22676},
											name: "DefinitionStart",
										},
									},
									&anyMatcher{
										line: 812, col: 22, offset: 22692,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ErrUnionLCUR",
			pos:  position{line: 816, col: 1, offset: 22718},
			expr: &actionExpr{
				pos: position{line: 816, col: 16, offset: 22733},
				run: (*parser).callonErrUnionLCUR1,
				expr: &seqExpr{
					pos: position{line: 816, col: 16, offset: 22733},
					exprs: []any{
						&stateCodeExpr{
							pos: position{line: 816, col: 16, offset: 22733},
							run: (*parser).callonErrUnionLCUR3,
						},
						&zeroOrMoreExpr{
							pos: position{line: 818, col: 3, offset: 22773},
							expr: &seqExpr{
								pos: position{line: 818, col: 5, offset: 22775},
								exprs: []any{
									&notExpr{
										pos: position{line: 818, col: 5, offset: 22775},
										expr: &litMatcher{
											pos:        position{line: 818, col: 6, offset: 22776},
											val:        "}",
											ignoreCase: false,
											want:       "\"}\"",
										},
									},
									&anyMatcher{
										line: 818, col: 10, offset: 22780,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ErrUnionField",
			pos:  position{line: 822, col: 1, offset: 22879},
			expr: &actionExpr{
				pos: position{line: 822, col: 17, offset: 22895},
				run: (*parser).callonErrUnionField1,
				expr: &seqExpr{
					pos: position{line: 822, col: 17, offset: 22895},
					exprs: []any{
						&stateCodeExpr{
							pos: position{line: 822, col: 17, offset: 22895},
							run: (*parser).callonErrUnionField3,
						},
						&zeroOrMoreExpr{
							pos: position{line: 824, col: 3, offset: 22931},
							expr: &seqExpr{
								pos: position{line: 824, col: 5, offset: 22933},
								exprs: []any{
									&notExpr{
										pos: position{line: 824, col: 5, offset: 22933},
										expr: &choiceExpr{
											pos: position{line: 824, col: 7, offset: 22935},
											alternatives: []any{
												&ruleRefExpr{
													pos:  position{line: 824, col: 7, offset: 22935},
													name: "Field",
												},
												&seqExpr{
													pos: position{line: 824, col: 16, offset: 22944},
													exprs: []any{
														&ruleRefExpr{
															pos:  position{line: 824, col: 16, offset: 22944},
															name: "ReservedComments",
														},
														&litMatcher{
															pos:        position{line: 824, col: 33, offset: 22961},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
														&zeroOrMoreExpr{
															pos: position{line: 824, col: 37, offset: 22965},
															expr: &ruleRefExpr{
																pos:  position{line: 824, col: 37, offset: 22965},
																name: "Indent",
															},
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 824, col: 48, offset: 22976},
													name: "DefinitionStart",
												},
											},
										},
									},
									&anyMatcher{
										line: 824, col: 66, offset: 22994,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ErrExceptionIdentifier",
			pos:  position{line: 830, col: 1, offset: 23100},
			expr: &actionExpr{
				pos: position{line: 830, col: 26, offset: 23125},
				run: (*parser).callonErrExceptionIdentifier1,
				expr: &seqExpr{
					pos: position{line: 830, col: 26, offset: 23125},
					exprs: []any{
						&stateCodeExpr{
							pos: position{line: 830, col: 26, offset: 23125},
							run: (*parser).callonErrExceptionIdentifier3,
						},
						&zeroOrMoreExpr{
							pos: position{line: 832, col: 3, offset: 23170},
							expr: &seqExpr{
								pos: position{line: 832, col: 5, offset: 23172},
								exprs: []any{
									&notExpr{
										pos: position{line: 832, col: 5, offset: 23172},
										expr: &litMatcher{
											pos:        position{line: 832, col: 6, offset: 23173},
											val:        "{",
											ignoreCase: false,
											want:       "\"{\"",
										},
									},
									&anyMatcher{
										line: 832, col: 10, offset: 23177,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ErrExceptionRCUR",
			pos:  position{line: 839, col: 1, offset: 23321},
			expr: &actionExpr{
				pos: position{line: 839, col: 20, offset: 23340},
				run: (*parser).callonErrExceptionRCUR1,
				expr: &seqExpr{
					pos: position{line: 839, col: 20, offset: 23340},
					exprs: []any{
						&stateCodeExpr{
							pos: position{line: 839, col: 20, offset: 23340},
							run: (*parser).callonErrExceptionRCUR3,
						},
						&zeroOrMoreExpr{
							pos: position{line: 841, col: 3, offset: 23384},
							expr: &seqExpr{
								pos: position{line: 841, col: 5, offset: 23386},
								exprs: []any{
									&notExpr{
										pos: position{line: 841, col: 5, offset: 23386},
										expr: &ruleRefExpr{
											pos:  position{line: 841, col: 6, offset: 23387},
											name: "DefinitionStart",
										},
									},
									&anyMatcher{
										line: 841, col: 22, offset: 23403,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ErrExceptionLCUR",
			pos:  position{line: 845, col: 1, offset: 23429},
			expr: &actionExpr{
				pos: position{line: 845, col: 20, offset: 23448},
				run: (*parser).callonErrExceptionLCUR1,
				expr: &seqExpr{
					pos: position{line: 845, col: 20, offset: 23448},
					exprs: []any{
						&stateCodeExpr{
							pos: position{line: 845, col: 20, offset: 23448},
							run: (*parser).callonErrExceptionLCUR3,
						},
						&zeroOrMoreExpr{
							pos: position{line: 847, col: 3, offset: 23492},
							expr: &seqExpr{
								pos: position{line: 847, col: 5, offset: 23494},
								exprs: []any{
									&notExpr{
										pos: position{line: 847, col: 5, offset: 23494},
										expr: &litMatcher{
											pos:        position{line: 847, col: 6, offset: 23495},
											val:        "}",
											ignoreCase: false,
											want:       "\"}\"",
										},
									},
									&anyMatcher{
										line: 847, col: 10, offset: 23499,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ErrExceptionField",
			pos:  position{line: 851, col: 1, offset: 23598},
			expr: &actionExpr{
				pos: position{line: 851, col: 21, offset: 23618},
				run: (*parser).callonErrExceptionField1,
				expr: &seqExpr{
					pos: position{line: 851, col: 21, offset: 23618},
					exprs: []any{
						&stateCodeExpr{
							pos: position{line: 851, col: 21, offset: 23618},
							run: (*parser).callonErrExceptionField3,
						},
						&zeroOrMoreExpr{
							pos: position{line: 853, col: 3, offset: 23658},
							expr: &seqExpr{
								pos: position{line: 853, col: 5, offset: 23660},
								exprs: []any{
									&notExpr{
										pos: position{line: 853, col: 5, offset: 23660},
										expr: &choiceExpr{
											pos: position{line: 853, col: 7, offset: 23662},
											alternatives: []any{
												&ruleRefExpr{
													pos:  position{line: 853, col: 7, offset: 23662},
													name: "Field",
												},
												&seqExpr{
													pos: position{line: 853, col: 16, offset: 23671},
													exprs: []any{
														&ruleRefExpr{
															pos:  position{line: 853, col: 16, offset: 23671},
															name: "ReservedComments",
														},
														&litMatcher{
															pos:        position{line: 853, col: 33, offset: 23688},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
														&zeroOrMoreExpr{
															pos: position{line: 853, col: 37, offset: 23692},
															expr: &ruleRefExpr{
																pos:  position{line: 853, col: 37, offset: 23692},
																name: "Indent",
															},
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 853, col: 48, offset: 23703},
													name: "DefinitionStart",
												},
											},
										},
									},
									&anyMatcher{
										line: 853, col: 66, offset: 23721,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ErrEnumIdentifier",
			pos:  position{line: 859, col: 1, offset: 23822},
			expr: &actionExpr{
				pos: position{line: 859, col: 21, offset: 23842},
				run: (*parser).callonErrEnumIdentifier1,
				expr: &seqExpr{
					pos: position{line: 859, col: 21, offset: 23842},
					exprs: []any{
						&stateCodeExpr{
							pos: position{line: 859, col: 21, offset: 23842},
							run: (*parser).callonErrEnumIdentifier3,
						},
						&zeroOrMoreExpr{
							pos: position{line: 861, col: 3, offset: 23882},
							expr: &seqExpr{
								pos: position{line: 861, col: 5, offset: 23884},
								exprs: []any{
									&notExpr{
										pos: position{line: 861, col: 5, offset: 23884},
										expr: &litMatcher{
											pos:        position{line: 861, col: 6, offset: 23885},
											val:        "{",
											ignoreCase: false,
											want:       "\"{\"",
										},
									},
									&anyMatcher{
										line: 861, col: 10, offset: 23889,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ErrEnumRCUR",
			pos:  position{line: 868, col: 1, offset: 24038},
			expr: &actionExpr{
				pos: position{line: 868, col: 15, offset: 24052},
				run: (*parser).callonErrEnumRCUR1,
				expr: &seqExpr{
					pos: position{line: 868, col: 15, offset: 24052},
					exprs: []any{
						&stateCodeExpr{
							pos: position{line: 868, col: 15, offset: 24052},
							run: (*parser).callonErrEnumRCUR3,
						},
						&zeroOrMoreExpr{
							pos: position{line: 870, col: 3, offset: 24091},
							expr: &seqExpr{
								pos: position{line: 870, col: 5, offset: 24093},
								exprs: []any{
									&notExpr{
										pos: position{line: 870, col: 5, offset: 24093},
										expr: &ruleRefExpr{
											pos:  position{line: 870, col: 6, offset: 24094},
											name: "DefinitionStart",
										},
									},
									&anyMatcher{
										line: 870, col: 22, offset: 24110,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ErrEnumLCUR",
			pos:  position{line: 874, col: 1, offset: 24136},
			expr: &actionExpr{
				pos: position{line: 874, col: 15, offset: 24150},
				run: (*parser).callonErrEnumLCUR1,
				expr: &seqExpr{
					pos: position{line: 874, col: 15, offset: 24150},
					exprs: []any{
						&stateCodeExpr{
							pos: position{line: 874, col: 15, offset: 24150},
							run: (*parser).callonErrEnumLCUR3,
						},
						&zeroOrMoreExpr{
							pos: position{line: 876, col: 3, offset: 24189},
							expr: &seqExpr{
								pos: position{line: 876, col: 5, offset: 24191},
								exprs: []any{
									&notExpr{
										pos: position{line: 876, col: 5, offset: 24191},
										expr: &litMatcher{
											pos:        position{line: 876, col: 6, offset: 24192},
											val:        "}",
											ignoreCase: false,
											want:       "\"}\"",
										},
									},
									&anyMatcher{
										line: 876, col: 10, offset: 24196,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ErrEnumValue",
			pos:  position{line: 880, col: 1, offset: 24295},
			expr: &actionExpr{
				pos: position{line: 880, col: 16, offset: 24310},
				run: (*parser).callonErrEnumValue1,
				expr: &seqExpr{
					pos: position{line: 880, col: 16, offset: 24310},
					exprs: []any{
						&stateCodeExpr{
							pos: position{line: 880, col: 16, offset: 24310},
							run: (*parser).callonErrEnumValue3,
						},
						&zeroOrMoreExpr{
							pos: position{line: 882, col: 3, offset: 24345},
							expr: &seqExpr{
								pos: position{line: 882, col: 5, offset: 24347},
								exprs: []any{
									&notExpr{
										pos: position{line: 882, col: 5, offset: 24347},
										expr: &choiceExpr{
											pos: position{line: 882, col: 7, offset: 24349},
											alternatives: []any{
												&ruleRefExpr{
													pos:  position{line: 882, col: 7, offset: 24349},
													name: "Field",
												},
												&seqExpr{
													pos: position{line: 882, col: 16, offset: 24358},
													exprs: []any{
														&ruleRefExpr{
															pos:  position{line: 882, col: 16, offset: 24358},
															name: "ReservedComments",
														},
														&litMatcher{
															pos:        position{line: 882, col: 33, offset: 24375},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
														&zeroOrMoreExpr{
															pos: position{line: 882, col: 37, offset: 24379},
															expr: &ruleRefExpr{
																pos:  position{line: 882, col: 37, offset: 24379},
																name: "Indent",
															},
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 882, col: 48, offset: 24390},
													name: "DefinitionStart",
												},
											},
										},
									},
									&anyMatcher{
										line: 882, col: 66, offset: 24408,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ErrEnumValueIntConstant",
			pos:  position{line: 886, col: 1, offset: 24474},
			expr: &actionExpr{
				pos: position{line: 886, col: 27, offset: 24500},
				run: (*parser).callonErrEnumValueIntConstant1,
				expr: &seqExpr{
					pos: position{line: 886, col: 27, offset: 24500},
					exprs: []any{
						&stateCodeExpr{
							pos: position{line: 886, col: 27, offset: 24500},
							run: (*parser).callonErrEnumValueIntConstant3,
						},
						&zeroOrMoreExpr{
							pos: position{line: 888, col: 3, offset: 24546},
							expr: &seqExpr{
								pos: position{line: 888, col: 5, offset: 24548},
								exprs: []any{
									&notExpr{
										pos: position{line: 888, col: 5, offset: 24548},
										expr: &ruleRefExpr{
											pos:  position{line: 888, col: 7, offset: 24550},
											name: "CarriageReturnLineFeed",
										},
									},
									&anyMatcher{
										line: 888, col: 32, offset: 24575,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ErrTypedefIdentifier",
			pos:  position{line: 894, col: 1, offset: 24658},
			expr: &actionExpr{
				pos: position{line: 894, col: 24, offset: 24681},
				run: (*parser).callonErrTypedefIdentifier1,
				expr: &seqExpr{
					pos: position{line: 894, col: 24, offset: 24681},
					exprs: []any{
						&stateCodeExpr{
							pos: position{line: 894, col: 24, offset: 24681},
							run: (*parser).callonErrTypedefIdentifier3,
						},
						&zeroOrMoreExpr{
							pos: position{line: 896, col: 3, offset: 24724},
							expr: &seqExpr{
								pos: position{line: 896, col: 5, offset: 24726},
								exprs: []any{
									&notExpr{
										pos: position{line: 896, col: 5, offset: 24726},
										expr: &ruleRefExpr{
											pos:  position{line: 896, col: 7, offset: 24728},
											name: "CarriageReturnLineFeed",
										},
									},
									&anyMatcher{
										line: 896, col: 31, offset: 24752,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ErrConstIdentifier",
			pos:  position{line: 905, col: 1, offset: 24836},
			expr: &actionExpr{
				pos: position{line: 905, col: 22, offset: 24857},
				run: (*parser).callonErrConstIdentifier1,
				expr: &seqExpr{
					pos: position{line: 905, col: 22, offset: 24857},
					exprs: []any{
						&stateCodeExpr{
							pos: position{line: 905, col: 22, offset: 24857},
							run: (*parser).callonErrConstIdentifier3,
						},
						&zeroOrMoreExpr{
							pos: position{line: 907, col: 3, offset: 24898},
							expr: &seqExpr{
								pos: position{line: 907, col: 4, offset: 24899},
								exprs: []any{
									&notExpr{
										pos: position{line: 907, col: 4, offset: 24899},
										expr: &ruleRefExpr{
											pos:  position{line: 907, col: 5, offset: 24900},
											name: "EQUAL",
										},
									},
									&anyMatcher{
										line: 907, col: 11, offset: 24906,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ErrConstMissingValue",
			pos:  position{line: 914, col: 1, offset: 24980},
			expr: &actionExpr{
				pos: position{line: 914, col: 24, offset: 25003},
				run: (*parser).callonErrConstMissingValue1,
				expr: &seqExpr{
					pos: position{line: 914, col: 24, offset: 25003},
					exprs: []any{
						&stateCodeExpr{
							pos: position{line: 914, col: 24, offset: 25003},
							run: (*parser).callonErrConstMissingValue3,
						},
						&zeroOrMoreExpr{
							pos: position{line: 916, col: 3, offset: 25046},
							expr: &seqExpr{
								pos: position{line: 916, col: 4, offset: 25047},
								exprs: []any{
									&notExpr{
										pos: position{line: 916, col: 4, offset: 25047},
										expr: &charClassMatcher{
											pos:        position{line: 916, col: 5, offset: 25048},
											val:        "[\\r\\n]",
											chars:      []rune{'\r', '\n'},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&anyMatcher{
										line: 916, col: 12, offset: 25055,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ErrConstConstValue",
			pos:  position{line: 920, col: 1, offset: 25121},
			expr: &actionExpr{
				pos: position{line: 920, col: 22, offset: 25142},
				run: (*parser).callonErrConstConstValue1,
				expr: &seqExpr{
					pos: position{line: 920, col: 22, offset: 25142},
					exprs: []any{
						&stateCodeExpr{
							pos: position{line: 920, col: 22, offset: 25142},
							run: (*parser).callonErrConstConstValue3,
						},
						&zeroOrMoreExpr{
							pos: position{line: 922, col: 3, offset: 25183},
							expr: &seqExpr{
								pos: position{line: 922, col: 4, offset: 25184},
								exprs: []any{
									&notExpr{
										pos: position{line: 922, col: 4, offset: 25184},
										expr: &charClassMatcher{
											pos:        position{line: 922, col: 5, offset: 25185},
											val:        "[\\r\\n]",
											chars:      []rune{'\r', '\n'},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&anyMatcher{
										line: 922, col: 12, offset: 25192,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ErrServiceIdentifier",
			pos:  position{line: 928, col: 1, offset: 25270},
			expr: &actionExpr{
				pos: position{line: 928, col: 24, offset: 25293},
				run: (*parser).callonErrServiceIdentifier1,
				expr: &seqExpr{
					pos: position{line: 928, col: 24, offset: 25293},
					exprs: []any{
						&stateCodeExpr{
							pos: position{line: 928, col: 24, offset: 25293},
							run: (*parser).callonErrServiceIdentifier3,
						},
						&zeroOrMoreExpr{
							pos: position{line: 930, col: 3, offset: 25336},
							expr: &seqExpr{
								pos: position{line: 930, col: 5, offset: 25338},
								exprs: []any{
									&notExpr{
										pos: position{line: 930, col: 5, offset: 25338},
										expr: &litMatcher{
											pos:        position{line: 930, col: 6, offset: 25339},
											val:        "{",
											ignoreCase: false,
											want:       "\"{\"",
										},
									},
									&anyMatcher{
										line: 930, col: 10, offset: 25343,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ErrServiceRCUR",
			pos:  position{line: 937, col: 1, offset: 25487},
			expr: &actionExpr{
				pos: position{line: 937, col: 18, offset: 25504},
				run: (*parser).callonErrServiceRCUR1,
				expr: &seqExpr{
					pos: position{line: 937, col: 18, offset: 25504},
					exprs: []any{
						&stateCodeExpr{
							pos: position{line: 937, col: 18, offset: 25504},
							run: (*parser).callonErrServiceRCUR3,
						},
						&zeroOrMoreExpr{
							pos: position{line: 939, col: 3, offset: 25546},
							expr: &seqExpr{
								pos: position{line: 939, col: 5, offset: 25548},
								exprs: []any{
									&notExpr{
										pos: position{line: 939, col: 5, offset: 25548},
										expr: &ruleRefExpr{
											pos:  position{line: 939, col: 6, offset: 25549},
											name: "DefinitionStart",
										},
									},
									&anyMatcher{
										line: 939, col: 22, offset: 25565,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ErrServiceFunction",
			pos:  position{line: 943, col: 1, offset: 25591},
			expr: &actionExpr{
				pos: position{line: 943, col: 23, offset: 25613},
				run: (*parser).callonErrServiceFunction1,
				expr: &seqExpr{
					pos: position{line: 943, col: 23, offset: 25613},
					exprs: []any{
						&stateCodeExpr{
							pos: position{line: 943, col: 23, offset: 25613},
							run: (*parser).callonErrServiceFunction3,
						},
						&zeroOrMoreExpr{
							pos: position{line: 945, col: 3, offset: 25654},
							expr: &seqExpr{
								pos: position{line: 945, col: 5, offset: 25656},
								exprs: []any{
									&notExpr{
										pos: position{line: 945, col: 5, offset: 25656},
										expr: &charClassMatcher{
											pos:        position{line: 945, col: 6, offset: 25657},
											val:        "[\\r\\n]",
											chars:      []rune{'\r', '\n'},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&anyMatcher{
										line: 945, col: 13, offset: 25664,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ErrFunctionIdentifier",
			pos:  position{line: 950, col: 1, offset: 25740},
			expr: &actionExpr{
				pos: position{line: 950, col: 25, offset: 25764},
				run: (*parser).callonErrFunctionIdentifier1,
				expr: &seqExpr{
					pos: position{line: 950, col: 25, offset: 25764},
					exprs: []any{
						&stateCodeExpr{
							pos: position{line: 950, col: 25, offset: 25764},
							run: (*parser).callonErrFunctionIdentifier3,
						},
						&zeroOrMoreExpr{
							pos: position{line: 952, col: 3, offset: 25808},
							expr: &seqExpr{
								pos: position{line: 952, col: 5, offset: 25810},
								exprs: []any{
									&notExpr{
										pos: position{line: 952, col: 5, offset: 25810},
										expr: &litMatcher{
											pos:        position{line: 952, col: 6, offset: 25811},
											val:        "(",
											ignoreCase: false,
											want:       "\"(\"",
										},
									},
									&anyMatcher{
										line: 952, col: 10, offset: 25815,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ErrFunctionArgument",
			pos:  position{line: 959, col: 1, offset: 25992},
			expr: &actionExpr{
				pos: position{line: 959, col: 23, offset: 26014},
				run: (*parser).callonErrFunctionArgument1,
				expr: &seqExpr{
					pos: position{line: 959, col: 23, offset: 26014},
					exprs: []any{
						&stateCodeExpr{
							pos: position{line: 959, col: 23, offset: 26014},
							run: (*parser).callonErrFunctionArgument3,
						},
						&zeroOrMoreExpr{
							pos: position{line: 961, col: 3, offset: 26056},
							expr: &seqExpr{
								pos: position{line: 961, col: 5, offset: 26058},
								exprs: []any{
									&notExpr{
										pos: position{line: 961, col: 5, offset: 26058},
										expr: &charClassMatcher{
											pos:        position{line: 961, col: 6, offset: 26059},
											val:        "[,;)\\r\\n]",
											chars:      []rune{',', ';', ')', '\r', '\n'},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&anyMatcher{
										line: 961, col: 16, offset: 26069,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ErrLiteral1MissingRight",
			pos:  position{line: 968, col: 1, offset: 26179},
			expr: &actionExpr{
				pos: position{line: 968, col: 27, offset: 26205},
				run: (*parser).callonErrLiteral1MissingRight1,
				expr: &seqExpr{
					pos: position{line: 968, col: 27, offset: 26205},
					exprs: []any{
						&stateCodeExpr{
							pos: position{line: 968, col: 27, offset: 26205},
							run: (*parser).callonErrLiteral1MissingRight3,
						},
						&zeroOrMoreExpr{
							pos: position{line: 970, col: 3, offset: 26251},
							expr: &seqExpr{
								pos: position{line: 970, col: 5, offset: 26253},
								exprs: []any{
									&notExpr{
										pos: position{line: 970, col: 5, offset: 26253},
										expr: &charClassMatcher{
											pos:        position{line: 970, col: 6, offset: 26254},
											val:        "[\\r\\n]",
											chars:      []rune{'\r', '\n'},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&anyMatcher{
										line: 970, col: 13, offset: 26261,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ErrLiteral1",
			pos:  position{line: 974, col: 1, offset: 26380},
			expr: &actionExpr{
				pos: position{line: 974, col: 15, offset: 26394},
				run: (*parser).callonErrLiteral11,
				expr: &seqExpr{
					pos: position{line: 974, col: 15, offset: 26394},
					exprs: []any{
						&stateCodeExpr{
							pos: position{line: 974, col: 15, offset: 26394},
							run: (*parser).callonErrLiteral13,
						},
						&zeroOrMoreExpr{
							pos: position{line: 976, col: 3, offset: 26428},
							expr: &seqExpr{
								pos: position{line: 976, col: 5, offset: 26430},
								exprs: []any{
									&notExpr{
										pos: position{line: 976, col: 5, offset: 26430},
										expr: &charClassMatcher{
											pos:        position{line: 976, col: 6, offset: 26431},
											val:        "[\\r\\n]",
											chars:      []rune{'\r', '\n'},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&anyMatcher{
										line: 976, col: 13, offset: 26438,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ErrLiteral2MissingRight",
			pos:  position{line: 980, col: 1, offset: 26557},
			expr: &actionExpr{
				pos: position{line: 980, col: 27, offset: 26583},
				run: (*parser).callonErrLiteral2MissingRight1,
				expr: &seqExpr{
					pos: position{line: 980, col: 27, offset: 26583},
					exprs: []any{
						&stateCodeExpr{
							pos: position{line: 980, col: 27, offset: 26583},
							run: (*parser).callonErrLiteral2MissingRight3,
						},
						&zeroOrMoreExpr{
							pos: position{line: 982, col: 3, offset: 26629},
							expr: &seqExpr{
								pos: position{line: 982, col: 5, offset: 26631},
								exprs: []any{
									&notExpr{
										pos: position{line: 982, col: 5, offset: 26631},
										expr: &charClassMatcher{
											pos:        position{line: 982, col: 6, offset: 26632},
											val:        "[\\r\\n]",
											chars:      []rune{'\r', '\n'},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&anyMatcher{
										line: 982, col: 13, offset: 26639,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ErrLiteral2",
			pos:  position{line: 986, col: 1, offset: 26758},
			expr: &actionExpr{
				pos: position{line: 986, col: 15, offset: 26772},
				run: (*parser).callonErrLiteral21,
				expr: &seqExpr{
					pos: position{line: 986, col: 15, offset: 26772},
					exprs: []any{
						&stateCodeExpr{
							pos: position{line: 986, col: 15, offset: 26772},
							run: (*parser).callonErrLiteral23,
						},
						&zeroOrMoreExpr{
							pos: position{line: 988, col: 3, offset: 26806},
							expr: &seqExpr{
								pos: position{line: 988, col: 5, offset: 26808},
								exprs: []any{
									&notExpr{
										pos: position{line: 988, col: 5, offset: 26808},
										expr: &charClassMatcher{
											pos:        position{line: 988, col: 6, offset: 26809},
											val:        "[\\r\\n]",
											chars:      []rune{'\r', '\n'},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&anyMatcher{
										line: 988, col: 13, offset: 26816,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ErrConst",
			pos:  position{line: 992, col: 1, offset: 26935},
			expr: &actionExpr{
				pos: position{line: 992, col: 12, offset: 26946},
				run: (*parser).callonErrConst1,
				expr: &seqExpr{
					pos: position{line: 992, col: 12, offset: 26946},
					exprs: []any{
						&stateCodeExpr{
							pos: position{line: 992, col: 12, offset: 26946},
							run: (*parser).callonErrConst3,
						},
						&zeroOrMoreExpr{
							pos: position{line: 994, col: 3, offset: 26977},
							expr: &seqExpr{
								pos: position{line: 994, col: 4, offset: 26978},
								exprs: []any{
									&notExpr{
										pos: position{line: 994, col: 4, offset: 26978},
										expr: &charClassMatcher{
											pos:        position{line: 994, col: 5, offset: 26979},
											val:        "[\\r\\n]",
											chars:      []rune{'\r', '\n'},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&anyMatcher{
										line: 994, col: 12, offset: 26986,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ErrTypedef",
			pos:  position{line: 998, col: 1, offset: 27087},
			expr: &actionExpr{
				pos: position{line: 998, col: 14, offset: 27100},
				run: (*parser).callonErrTypedef1,
				expr: &seqExpr{
					pos: position{line: 998, col: 14, offset: 27100},
					exprs: []any{
						&stateCodeExpr{
							pos: position{line: 998, col: 14, offset: 27100},
							run: (*parser).callonErrTypedef3,
						},
						&zeroOrMoreExpr{
							pos: position{line: 1000, col: 3, offset: 27133},
							expr: &seqExpr{
								pos: position{line: 1000, col: 4, offset: 27134},
								exprs: []any{
									&notExpr{
										pos: position{line: 1000, col: 4, offset: 27134},
										expr: &charClassMatcher{
											pos:        position{line: 1000, col: 5, offset: 27135},
											val:        "[\\r\\n]",
											chars:      []rune{'\r', '\n'},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&anyMatcher{
										line: 1000, col: 12, offset: 27142,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ErrEnum",
			pos:  position{line: 1005, col: 1, offset: 27285},
			expr: &actionExpr{
				pos: position{line: 1005, col: 11, offset: 27295},
				run: (*parser).callonErrEnum1,
				expr: &seqExpr{
					pos: position{line: 1005, col: 11, offset: 27295},
					exprs: []any{
						&stateCodeExpr{
							pos: position{line: 1005, col: 11, offset: 27295},
							run: (*parser).callonErrEnum3,
						},
						&zeroOrMoreExpr{
							pos: position{line: 1007, col: 3, offset: 27325},
							expr: &seqExpr{
								pos: position{line: 1007, col: 4, offset: 27326},
								exprs: []any{
									&notExpr{
										pos: position{line: 1007, col: 4, offset: 27326},
										expr: &charClassMatcher{
											pos:        position{line: 1007, col: 5, offset: 27327},
											val:        "[\\r\\n]",
											chars:      []rune{'\r', '\n'},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&anyMatcher{
										line: 1007, col: 12, offset: 27334,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ErrService",
			pos:  position{line: 1011, col: 1, offset: 27435},
			expr: &actionExpr{
				pos: position{line: 1011, col: 14, offset: 27448},
				run: (*parser).callonErrService1,
				expr: &seqExpr{
					pos: position{line: 1011, col: 14, offset: 27448},
					exprs: []any{
						&stateCodeExpr{
							pos: position{line: 1011, col: 14, offset: 27448},
							run: (*parser).callonErrService3,
						},
						&zeroOrMoreExpr{
							pos: position{line: 1013, col: 3, offset: 27481},
							expr: &seqExpr{
								pos: position{line: 1013, col: 4, offset: 27482},
								exprs: []any{
									&notExpr{
										pos: position{line: 1013, col: 4, offset: 27482},
										expr: &charClassMatcher{
											pos:        position{line: 1013, col: 5, offset: 27483},
											val:        "[\\r\\n]",
											chars:      []rune{'\r', '\n'},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&anyMatcher{
										line: 1013, col: 12, offset: 27490,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ErrStruct",
			pos:  position{line: 1017, col: 1, offset: 27594},
			expr: &actionExpr{
				pos: position{line: 1017, col: 13, offset: 27606},
				run: (*parser).callonErrStruct1,
				expr: &seqExpr{
					pos: position{line: 1017, col: 13, offset: 27606},
					exprs: []any{
						&stateCodeExpr{
							pos: position{line: 1017, col: 13, offset: 27606},
							run: (*parser).callonErrStruct3,
						},
						&zeroOrMoreExpr{
							pos: position{line: 1019, col: 3, offset: 27638},
							expr: &seqExpr{
								pos: position{line: 1019, col: 4, offset: 27639},
								exprs: []any{
									&notExpr{
										pos: position{line: 1019, col: 4, offset: 27639},
										expr: &charClassMatcher{
											pos:        position{line: 1019, col: 5, offset: 27640},
											val:        "[\\r\\n]",
											chars:      []rune{'\r', '\n'},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&anyMatcher{
										line: 1019, col: 12, offset: 27647,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ErrUnion",
			pos:  position{line: 1023, col: 1, offset: 27750},
			expr: &actionExpr{
				pos: position{line: 1023, col: 12, offset: 27761},
				run: (*parser).callonErrUnion1,
				expr: &seqExpr{
					pos: position{line: 1023, col: 12, offset: 27761},
					exprs: []any{
						&stateCodeExpr{
							pos: position{line: 1023, col: 12, offset: 27761},
							run: (*parser).callonErrUnion3,
						},
						&zeroOrMoreExpr{
							pos: position{line: 1025, col: 3, offset: 27792},
							expr: &seqExpr{
								pos: position{line: 1025, col: 4, offset: 27793},
								exprs: []any{
									&notExpr{
										pos: position{line: 1025, col: 4, offset: 27793},
										expr: &charClassMatcher{
											pos:        position{line: 1025, col: 5, offset: 27794},
											val:        "[\\r\\n]",
											chars:      []rune{'\r', '\n'},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&anyMatcher{
										line: 1025, col: 12, offset: 27801,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ErrException",
			pos:  position{line: 1029, col: 1, offset: 27903},
			expr: &actionExpr{
				pos: position{line: 1029, col: 16, offset: 27918},
				run: (*parser).callonErrException1,
				expr: &seqExpr{
					pos: position{line: 1029, col: 16, offset: 27918},
					exprs: []any{
						&stateCodeExpr{
							pos: position{line: 1029, col: 16, offset: 27918},
							run: (*parser).callonErrException3,
						},
						&zeroOrMoreExpr{
							pos: position{line: 1031, col: 3, offset: 27953},
							expr: &seqExpr{
								pos: position{line: 1031, col: 4, offset: 27954},
								exprs: []any{
									&notExpr{
										pos: position{line: 1031, col: 4, offset: 27954},
										expr: &charClassMatcher{
											pos:        position{line: 1031, col: 5, offset: 27955},
											val:        "[\\r\\n]",
											chars:      []rune{'\r', '\n'},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&anyMatcher{
										line: 1031, col: 12, offset: 27962,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ErrDefinition",
			pos:  position{line: 1035, col: 1, offset: 28068},
			expr: &actionExpr{
				pos: position{line: 1035, col: 17, offset: 28084},
				run: (*parser).callonErrDefinition1,
				expr: &seqExpr{
					pos: position{line: 1035, col: 17, offset: 28084},
					exprs: []any{
						&stateCodeExpr{
							pos: position{line: 1035, col: 17, offset: 28084},
							run: (*parser).callonErrDefinition3,
						},
						&zeroOrMoreExpr{
							pos: position{line: 1037, col: 3, offset: 28120},
							expr: &seqExpr{
								pos: position{line: 1037, col: 4, offset: 28121},
								exprs: []any{
									&notExpr{
										pos: position{line: 1037, col: 4, offset: 28121},
										expr: &charClassMatcher{
											pos:        position{line: 1037, col: 5, offset: 28122},
											val:        "[\\r\\n]",
											chars:      []rune{'\r', '\n'},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&anyMatcher{
										line: 1037, col: 12, offset: 28129,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ErrInclude",
			pos:  position{line: 1041, col: 1, offset: 28235},
			expr: &actionExpr{
				pos: position{line: 1041, col: 14, offset: 28248},
				run: (*parser).callonErrInclude1,
				expr: &seqExpr{
					pos: position{line: 1041, col: 14, offset: 28248},
					exprs: []any{
						&stateCodeExpr{
							pos: position{line: 1041, col: 14, offset: 28248},
							run: (*parser).callonErrInclude3,
						},
						&zeroOrMoreExpr{
							pos: position{line: 1043, col: 3, offset: 28281},
							expr: &seqExpr{
								pos: position{line: 1043, col: 4, offset: 28282},
								exprs: []any{
									&notExpr{
										pos: position{line: 1043, col: 4, offset: 28282},
										expr: &charClassMatcher{
											pos:        position{line: 1043, col: 5, offset: 28283},
											val:        "[\\r\\n]",
											chars:      []rune{'\r', '\n'},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&anyMatcher{
										line: 1043, col: 12, offset: 28290,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ErrCppInclude",
			pos:  position{line: 1047, col: 1, offset: 28393},
			expr: &actionExpr{
				pos: position{line: 1047, col: 17, offset: 28409},
				run: (*parser).callonErrCppInclude1,
				expr: &seqExpr{
					pos: position{line: 1047, col: 17, offset: 28409},
					exprs: []any{
						&stateCodeExpr{
							pos: position{line: 1047, col: 17, offset: 28409},
							run: (*parser).callonErrCppInclude3,
						},
						&zeroOrMoreExpr{
							pos: position{line: 1049, col: 3, offset: 28445},
							expr: &seqExpr{
								pos: position{line: 1049, col: 4, offset: 28446},
								exprs: []any{
									&notExpr{
										pos: position{line: 1049, col: 4, offset: 28446},
										expr: &charClassMatcher{
											pos:        position{line: 1049, col: 5, offset: 28447},
											val:        "[\\r\\n]",
											chars:      []rune{'\r', '\n'},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&anyMatcher{
										line: 1049, col: 12, offset: 28454,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ErrNamespace",
			pos:  position{line: 1053, col: 1, offset: 28560},
			expr: &actionExpr{
				pos: position{line: 1053, col: 16, offset: 28575},
				run: (*parser).callonErrNamespace1,
				expr: &seqExpr{
					pos: position{line: 1053, col: 16, offset: 28575},
					exprs: []any{
						&stateCodeExpr{
							pos: position{line: 1053, col: 16, offset: 28575},
							run: (*parser).callonErrNamespace3,
						},
						&zeroOrMoreExpr{
							pos: position{line: 1055, col: 3, offset: 28610},
							expr: &seqExpr{
								pos: position{line: 1055, col: 4, offset: 28611},
								exprs: []any{
									&notExpr{
										pos: position{line: 1055, col: 4, offset: 28611},
										expr: &charClassMatcher{
											pos:        position{line: 1055, col: 5, offset: 28612},
											val:        "[\\r\\n]",
											chars:      []rune{'\r', '\n'},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&anyMatcher{
										line: 1055, col: 12, offset: 28619,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ErrHeader",
			pos:  position{line: 1059, col: 1, offset: 28724},
			expr: &actionExpr{
				pos: position{line: 1059, col: 13, offset: 28736},
				run: (*parser).callonErrHeader1,
				expr: &seqExpr{
					pos: position{line: 1059, col: 13, offset: 28736},
					exprs: []any{
						&stateCodeExpr{
							pos: position{line: 1059, col: 13, offset: 28736},
							run: (*parser).callonErrHeader3,
						},
						&zeroOrMoreExpr{
							pos: position{line: 1061, col: 3, offset: 28768},
							expr: &seqExpr{
								pos: position{line: 1061, col: 4, offset: 28769},
								exprs: []any{
									&notExpr{
										pos: position{line: 1061, col: 4, offset: 28769},
										expr: &charClassMatcher{
											pos:        position{line: 1061, col: 5, offset: 28770},
											val:        "[\\r\\n]",
											chars:      []rune{'\r', '\n'},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&anyMatcher{
										line: 1061, col: 12, offset: 28777,
									},
								},
							},
						},
					},
				},
			},
		},
	},
}

func (c *current) onDocument3(headers, defs any) (any, error) {
	return NewDocument(toHeaderSlice(headers), toDefinitionSlice(defs), NewLocationFromCurrent(c)), nil
}

func (p *parser) callonDocument3() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocument3(stack["headers"], stack["defs"])
}

func (c *current) onHeader5(v any) (any, error) {
	c.globalStore["parse"] = "header"
	return v, nil
}

func (p *parser) callonHeader5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeader5(stack["v"])
}

func (c *current) onHeader23() (bool, error) {
	/* fmt.Println("header predict:", c.pos, "text:", string(c.text)) */
	if state, ok := c.globalStore["parse"]; !ok || ok && state.(string) == "header" {
		return true, nil
	}
	return false, nil
}

func (p *parser) callonHeader23() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeader23()
}

func (c *current) onHeader14(x any) (any, error) {
	/* fmt.Println("header return:", c.pos, "text:", string(c.text)) */
	badHeader := x.([]any)[4].(*BadHeader)
	return badHeader, nil
}

func (p *parser) callonHeader14() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeader14(stack["x"])
}

func (c *current) onInclude2(include any) (any, error) {
	includeV, ok := include.(*Literal)
	if !ok {
		includeV = include.([]interface{})[0].(*Literal)
	}
	return NewInclude(includeV, NewLocationFromCurrent(c)), nil
}

func (p *parser) callonInclude2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInclude2(stack["include"])
}

func (c *current) onInclude7(x any) (any, error) {
	return x.([]any)[1], nil
}

func (p *parser) callonInclude7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInclude7(stack["x"])
}

func (c *current) onCppInclude2(include any) (any, error) {
	includeV, ok := include.(*Literal)
	if !ok {
		includeV = include.([]interface{})[0].(*Literal)
	}
	return NewCPPInclude(includeV, NewLocationFromCurrent(c)), nil
}

func (p *parser) callonCppInclude2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCppInclude2(stack["include"])
}

func (c *current) onCppInclude7(x any) (any, error) {
	return x.([]any)[1], nil
}

func (p *parser) callonCppInclude7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCppInclude7(stack["x"])
}

func (c *current) onNamespace2(language, name, annotations any) (any, error) {
	var lang string
	id, ok := language.(*Identifier)
	if ok {
		lang = id.Name
	} else {
		lang = "*"
	}
	return NewNamespace(lang, name.(*Identifier).Name, toAnnotationSlice(annotations), NewLocationFromCurrent(c)), nil
}

func (p *parser) callonNamespace2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamespace2(stack["language"], stack["name"], stack["annotations"])
}

func (c *current) onNamespace12(x any) (any, error) {
	return x.([]any)[1], nil
}

func (p *parser) callonNamespace12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamespace12(stack["x"])
}

func (c *current) onDefinition9(comments, v any) (any, error) {
	c.globalStore["parse"] = "definition"
	def := v.(Definition)
	def.SetComments(comments.(string))
	return def, nil
}

func (p *parser) callonDefinition9() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefinition9(stack["comments"], stack["v"])
}

func (c *current) onDefinition32() (bool, error) {
	/* fmt.Println("definition predict:", c.pos, "text:", string(c.text)) */
	if state, ok := c.globalStore["parse"]; ok && state.(string) == "definition" {
		return true, nil
	}
	return false, nil
}

func (p *parser) callonDefinition32() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefinition32()
}

func (c *current) onDefinition25(x any) (any, error) {
	/* fmt.Println("definition return:", c.pos, "text:", string(c.text)) */
	return x.([]any)[3], nil
}

func (p *parser) callonDefinition25() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefinition25(stack["x"])
}

func (c *current) onConst5(t, name, v any) (any, error) {
	return NewConst(name.(*Identifier), t.(*FieldType), v.(*ConstValue), "", NewLocationFromCurrent(c)), nil
}

func (p *parser) callonConst5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConst5(stack["t"], stack["name"], stack["v"])
}

func (c *current) onConst16(x any) (any, error) {
	return x.([]any)[1], nil
}

func (p *parser) callonConst16() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConst16(stack["x"])
}

func (c *current) onConstEqualValue2(v any) (any, error) {
	return v, nil
}

func (p *parser) callonConstEqualValue2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstEqualValue2(stack["v"])
}

func (c *current) onConstEqualValue7(x any) (any, error) {
	return x.([]any)[1], nil
}

func (p *parser) callonConstEqualValue7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstEqualValue7(stack["x"])
}

func (c *current) onConstEqualValue13(x any) (any, error) {
	return x.([]any)[1], nil
}

func (p *parser) callonConstEqualValue13() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstEqualValue13(stack["x"])
}

func (c *current) onTypedef3(t, alias any) (any, error) {
	return NewTypedef(t.(*FieldType), alias.(*Identifier), NewLocationFromCurrent(c)), nil
}

func (p *parser) callonTypedef3() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypedef3(stack["t"], stack["alias"])
}

func (c *current) onTypedef10(x any) (any, error) {
	return x.([]any)[1], nil
}

func (p *parser) callonTypedef10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypedef10(stack["x"])
}

func (c *current) onEnum5(name, v any) (any, error) {
	values := toEnumValueSlice(v)
	return NewEnum(name.(*Identifier), values, NewLocationFromCurrent(c)), nil
}

func (p *parser) callonEnum5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEnum5(stack["name"], stack["v"])
}

func (c *current) onEnum15(x any) (any, error) {
	return x.([]any)[1], nil
}

func (p *parser) callonEnum15() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEnum15(stack["x"])
}

func (c *current) onEnumValueLine1(comments, v any) (any, error) {
	v.(*EnumValue).Comments = comments.(string)
	return v, nil
}

func (p *parser) callonEnumValueLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEnumValueLine1(stack["comments"], stack["v"])
}

func (c *current) onEnumValue2(name, value any) (any, error) {
	var valueNode *ConstValue
	intV := int64(-1)
	if value != nil {
		//fmt.Println(value.(Node).Type(), value)
		valueNode = value.(*ConstValue)
		intV = value.(*ConstValue).Value.(int64)
	}

	return NewEnumValue(name.(*Identifier), valueNode, intV, "", NewLocationFromCurrent(c)), nil
}

func (p *parser) callonEnumValue2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEnumValue2(stack["name"], stack["value"])
}

func (c *current) onService5(name, extends, fns any) (any, error) {
	var extendsVal *Identifier
	if extends != nil {
		extendsVal = extends.([]any)[1].(*Identifier)
	}
	fnsVal := toFunctionSlice(fns)
	return NewService(name.(*Identifier), extendsVal, fnsVal, NewLocationFromCurrent(c)), nil
}

func (p *parser) callonService5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onService5(stack["name"], stack["extends"], stack["fns"])
}

func (c *current) onService20(x any) (any, error) {
	return x.([]any)[1], nil
}

func (p *parser) callonService20() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onService20(stack["x"])
}

func (c *current) onStruct5(id, fields any) (any, error) {
	return NewStruct(id.(*Identifier), toFieldSlice(fields), NewLocationFromCurrent(c)), nil
}

func (p *parser) callonStruct5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStruct5(stack["id"], stack["fields"])
}

func (c *current) onStruct15(x any) (any, error) {
	return x.([]any)[1], nil
}

func (p *parser) callonStruct15() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStruct15(stack["x"])
}

func (c *current) onUnion5(name, fields any) (any, error) {
	return NewUnion(name.(*Identifier), toFieldSlice(fields), NewLocationFromCurrent(c)), nil
}

func (p *parser) callonUnion5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnion5(stack["name"], stack["fields"])
}

func (c *current) onUnion15(x any) (any, error) {
	return x.([]any)[1], nil
}

func (p *parser) callonUnion15() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnion15(stack["x"])
}

func (c *current) onException5(name, fields any) (any, error) {
	return NewException(name.(*Identifier), toFieldSlice(fields), NewLocationFromCurrent(c)), nil
}

func (p *parser) callonException5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onException5(stack["name"], stack["fields"])
}

func (c *current) onException15(x any) (any, error) {
	return x.([]any)[1], nil
}

func (p *parser) callonException15() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onException15(stack["x"])
}

func (c *current) onFieldWithThrow3(x any) (any, error) {
	return x.([]any)[2], nil
}

func (p *parser) callonFieldWithThrow3() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldWithThrow3(stack["x"])
}

func (c *current) onField1(comments, index, required, fieldType, id, value, lineComments any) (any, error) {
	var constV *ConstValue
	if value != nil {
		constV = value.([]interface{})[1].(*ConstValue)
	}
	var requiredV *Required
	if required != nil {
		requiredV = required.(*Required)
	}

	return NewField(comments.(string), lineComments.(string), index.(*FieldIndex), requiredV, fieldType.(*FieldType), id.(*Identifier), constV, NewLocationFromCurrent(c)), nil
}

func (p *parser) callonField1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onField1(stack["comments"], stack["index"], stack["required"], stack["fieldType"], stack["id"], stack["value"], stack["lineComments"])
}

func (c *current) onFieldId2(i any) (any, error) {
	return i, nil
}

func (p *parser) callonFieldId2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldId2(stack["i"])
}

func (c *current) onFieldReq1(r any) (any, error) {
	if r == nil {
		return nil, nil
	}
	return r.(*Required), nil
}

func (p *parser) callonFieldReq1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldReq1(stack["r"])
}

func (c *current) onIsRequired1(v any) (any, error) {
	if v == nil {
		return nil, nil
	}
	return NewRequired(string(v.([]byte)) == "required", c.pos), nil
}

func (p *parser) callonIsRequired1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIsRequired1(stack["v"])
}

func (c *current) onFunction4(comments, oneway, ft, name, args, throws any) (any, error) {
	void := false
	var ftype *FieldType
	if str, ok := ft.(string); ok && str == "void" {
		void = true
	} else {
		ftype = ft.(*FieldType)
	}

	var throwsFields []*Field
	if throws != nil {
		throwsFields = throws.([]*Field)
	}
	return NewFunction(name.(*Identifier), oneway != nil, void, ftype, toFieldSlice(args), throwsFields, comments.(string), NewLocationFromCurrent(c)), nil
}

func (p *parser) callonFunction4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunction4(stack["comments"], stack["oneway"], stack["ft"], stack["name"], stack["args"], stack["throws"])
}

func (c *current) onFunction28(x any) (any, error) {
	return x.([]any)[2], nil
}

func (p *parser) callonFunction28() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunction28(stack["x"])
}

func (c *current) onFunctionFieldWithThrow2(v any) (any, error) {
	return v, nil
}

func (p *parser) callonFunctionFieldWithThrow2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunctionFieldWithThrow2(stack["v"])
}

func (c *current) onFunctionFieldWithThrow5(x any) (any, error) {
	return x.([]any)[2], nil
}

func (p *parser) callonFunctionFieldWithThrow5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunctionFieldWithThrow5(stack["x"])
}

func (c *current) onThrows1(fields any) (any, error) {
	return toFieldSlice(fields), nil
}

func (p *parser) callonThrows1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onThrows1(stack["fields"])
}

func (c *current) onFieldType1(v any) (any, error) {
	return v.(*FieldType), nil
}

func (p *parser) callonFieldType1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldType1(stack["v"])
}

func (c *current) onIdentifierType1(v any) (any, error) {
	return v.(*Identifier).ToFieldType(), nil
}

func (p *parser) callonIdentifierType1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierType1(stack["v"])
}

func (c *current) onBaseType1(v any) (any, error) {
	return NewFieldType(v.(*TypeName), nil, nil, NewLocationFromCurrent(c)), nil
}

func (p *parser) callonBaseType1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBaseType1(stack["v"])
}

func (c *current) onContainerType1(v any) (any, error) {
	return v.(*FieldType), nil
}

func (p *parser) callonContainerType1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContainerType1(stack["v"])
}

func (c *current) onMapType1(t, key, value any) (any, error) {
	return NewFieldType(t.(*TypeName), key.(*FieldType), value.(*FieldType), NewLocationFromCurrent(c)), nil
}

func (p *parser) callonMapType1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMapType1(stack["t"], stack["key"], stack["value"])
}

func (c *current) onSetType1(t, key any) (any, error) {
	return NewFieldType(t.(*TypeName), key.(*FieldType), nil, NewLocationFromCurrent(c)), nil
}

func (p *parser) callonSetType1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSetType1(stack["t"], stack["key"])
}

func (c *current) onListType1(t, key any) (any, error) {
	return NewFieldType(t.(*TypeName), key.(*FieldType), nil, NewLocationFromCurrent(c)), nil
}

func (p *parser) callonListType1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListType1(stack["t"], stack["key"])
}

func (c *current) onConstValue1(v any) (any, error) {
	if str, ok := v.(*Literal); ok {
		return NewConstValue("string", str.Value, NewLocationFromCurrent(c)), nil
	}
	return v.(*ConstValue), nil
}

func (p *parser) callonConstValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstValue1(stack["v"])
}

func (c *current) onIdentifierConst1(id any) (any, error) {
	return NewConstValue("identifier", id.(*Identifier).Name, NewLocationFromCurrent(c)), nil
}

func (p *parser) callonIdentifierConst1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierConst1(stack["id"])
}

func (c *current) onEnumValueIntConstant2(v any) (any, error) {
	return v, nil
}

func (p *parser) callonEnumValueIntConstant2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEnumValueIntConstant2(stack["v"])
}

func (c *current) onEnumValueIntConstant7(x any) (any, error) {
	return x.([]any)[2], nil
}

func (p *parser) callonEnumValueIntConstant7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEnumValueIntConstant7(stack["x"])
}

func (c *current) onIntConstant2(v any) (any, error) {
	return v.(*ConstValue), nil
}

func (p *parser) callonIntConstant2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIntConstant2(stack["v"])
}

func (c *current) onIntConstant14(x any) (any, error) {
	return x.([]any)[2], nil
}

func (p *parser) callonIntConstant14() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIntConstant14(stack["x"])
}

func (c *current) onHexIntConstant1() (any, error) {
	v, err := strconv.ParseInt(strings.TrimLeft(string(c.text), "0x"), 16, 64)
	if err != nil {
		return nil, err
	}

	cv := NewConstValue("i64", v, NewLocationFromCurrent(c))
	cv.ValueInText = string(c.text)

	return cv, nil
}

func (p *parser) callonHexIntConstant1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHexIntConstant1()
}

func (c *current) onOctIntConstant1() (any, error) {
	v, err := strconv.ParseInt(strings.TrimLeft(string(c.text), "0o"), 8, 64)
	if err != nil {
		return nil, err
	}
	cv := NewConstValue("i64", v, NewLocationFromCurrent(c))
	cv.ValueInText = string(c.text)

	return cv, nil
}

func (p *parser) callonOctIntConstant1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOctIntConstant1()
}

func (c *current) onNormalIntConstant1() (any, error) {
	v, err := strconv.ParseInt(string(c.text), 10, 64)
	if err != nil {
		return nil, err
	}
	cv := NewConstValue("i64", v, NewLocationFromCurrent(c))
	cv.ValueInText = string(c.text)

	return cv, nil
}

func (p *parser) callonNormalIntConstant1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalIntConstant1()
}

func (c *current) onFieldIndex2() (any, error) {
	v, err := strconv.ParseInt(string(c.text), 10, 64)
	if err != nil {
		return nil, err
	}
	return NewFieldIndex(int(v), NewLocationFromCurrent(c)), nil
}

func (p *parser) callonFieldIndex2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldIndex2()
}

func (c *current) onFieldIndex5(x any) (any, error) {
	return x.([]any)[2], nil
}

func (p *parser) callonFieldIndex5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldIndex5(stack["x"])
}

func (c *current) onDoubleConstant1(v any) (any, error) {
	return v, nil
}

func (p *parser) callonDoubleConstant1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleConstant1(stack["v"])
}

func (c *current) onDoubleConstantValue1() (any, error) {
	v, err := strconv.ParseFloat(string(c.text), 64)
	if err != nil {
		return nil, err
	}
	cv := NewConstValue("double", v, NewLocationFromCurrent(c))
	cv.ValueInText = string(c.text)

	return cv, nil
}

func (p *parser) callonDoubleConstantValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleConstantValue1()
}

func (c *current) onAnnotations1(annos any) (any, error) {
	return annos, nil
}

func (p *parser) callonAnnotations1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnnotations1(stack["annos"])
}

func (c *current) onAnnotation1(id, value any) (any, error) {
	return NewAnnotation(id.(*Identifier), value.(*Literal), NewLocationFromCurrent(c)), nil
}

func (p *parser) callonAnnotation1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnnotation1(stack["id"], stack["value"])
}

func (c *current) onConstList1(v any) (any, error) {
	return NewConstValue("list", toConstValueSlice(v), NewLocationFromCurrent(c)), nil
}

func (p *parser) callonConstList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstList1(stack["v"])
}

func (c *current) onConstListItem1(v any) (any, error) {
	return v.(*ConstValue), nil
}

func (p *parser) callonConstListItem1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstListItem1(stack["v"])
}

func (c *current) onConstMap1(v any) (any, error) {
	return NewConstValue("map", toConstValueSlice(v), NewLocationFromCurrent(c)), nil
}

func (p *parser) callonConstMap1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstMap1(stack["v"])
}

func (c *current) onConstMapItem1(key, value any) (any, error) {
	return NewMapConstValue(key.(*ConstValue), value.(*ConstValue), NewLocationFromCurrent(c)), nil
}

func (p *parser) callonConstMapItem1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstMapItem1(stack["key"], stack["value"])
}

func (c *current) onEscapeLiteralChar1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonEscapeLiteralChar1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapeLiteralChar1()
}

func (c *current) onLiteral5(l any) (any, error) {
	return l, nil
}

func (p *parser) callonLiteral5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteral5(stack["l"])
}

func (c *current) onLiteral12(t any) (any, error) {
	strs := toStringSlice(t)
	return NewLiteral(strings.Join(strs, ""), NewLocationFromCurrent(c)), nil
}

func (p *parser) callonLiteral12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteral12(stack["t"])
}

func (c *current) onLiteral117(x any) (any, error) {
	return x.([]any)[1], nil
}

func (p *parser) callonLiteral117() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteral117(stack["x"])
}

func (c *current) onLiteral22(t any) (any, error) {
	strs := toStringSlice(t)
	return NewLiteral(strings.Join(strs, ""), NewLocationFromCurrent(c)), nil
}

func (p *parser) callonLiteral22() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteral22(stack["t"])
}

func (c *current) onLiteral217(x any) (any, error) {
	return x.([]any)[1], nil
}

func (p *parser) callonLiteral217() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteral217(stack["x"])
}

func (c *current) onDefinitionIdentifier2(id any) (any, error) {
	return id.(*Identifier), nil
}

func (p *parser) callonDefinitionIdentifier2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefinitionIdentifier2(stack["id"])
}

func (c *current) onIdentifier1(id any) (any, error) {
	return id.(*Identifier), nil
}

func (p *parser) callonIdentifier1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier1(stack["id"])
}

func (c *current) onIdentifierToken1() (any, error) {
	return NewIdentifier(string(c.text), c.pos), nil
}

func (p *parser) callonIdentifierToken1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierToken1()
}

func (c *current) onLetter4() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonLetter4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetter4()
}

func (c *current) onLetterOrDigit5() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonLetterOrDigit5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetterOrDigit5()
}

func (c *current) onDigit1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonDigit1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDigit1()
}

func (c *current) onReservedComments1(comments any) (any, error) {
	return strings.Join(toStringSlice(comments), "\n"), nil
}

func (p *parser) callonReservedComments1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReservedComments1(stack["comments"])
}

func (c *current) onReservedEndLineComments1(comments any) (any, error) {
	return strings.Join(toStringSlice(comments), "\n"), nil
}

func (p *parser) callonReservedEndLineComments1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReservedEndLineComments1(stack["comments"])
}

func (c *current) onSpace1() (any, error) {
	return "", nil
}

func (p *parser) callonSpace1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpace1()
}

func (c *current) onIndent1() (any, error) {
	return "", nil
}

func (p *parser) callonIndent1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndent1()
}

func (c *current) onComment1(v any) (any, error) {
	return v.(string), nil
}

func (p *parser) callonComment1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComment1(stack["v"])
}

func (c *current) onLongComment1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonLongComment1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongComment1()
}

func (c *current) onLongCommentMatch1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonLongCommentMatch1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongCommentMatch1()
}

func (c *current) onLineComment1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonLineComment1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineComment1()
}

func (c *current) onLineCommentMatch1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonLineCommentMatch1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineCommentMatch1()
}

func (c *current) onUnixComment1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonUnixComment1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnixComment1()
}

func (c *current) onUnixCommentMatch1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonUnixCommentMatch1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnixCommentMatch1()
}

func (c *current) onBOOL1(t any) (any, error) {
	return t.(*TypeName), nil
}

func (p *parser) callonBOOL1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBOOL1(stack["t"])
}

func (c *current) onBOOLToken1() (any, error) {
	return NewTypeName(string(c.text), c.pos), nil
}

func (p *parser) callonBOOLToken1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBOOLToken1()
}

func (c *current) onBYTE1(t any) (any, error) {
	return t.(*TypeName), nil
}

func (p *parser) callonBYTE1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBYTE1(stack["t"])
}

func (c *current) onBYTEToken1() (any, error) {
	return NewTypeName(string(c.text), c.pos), nil
}

func (p *parser) callonBYTEToken1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBYTEToken1()
}

func (c *current) onI81(t any) (any, error) {
	return t.(*TypeName), nil
}

func (p *parser) callonI81() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onI81(stack["t"])
}

func (c *current) onI8Token1() (any, error) {
	return NewTypeName(string(c.text), c.pos), nil
}

func (p *parser) callonI8Token1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onI8Token1()
}

func (c *current) onI161(t any) (any, error) {
	return t.(*TypeName), nil
}

func (p *parser) callonI161() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onI161(stack["t"])
}

func (c *current) onI16Token1() (any, error) {
	return NewTypeName(string(c.text), c.pos), nil
}

func (p *parser) callonI16Token1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onI16Token1()
}

func (c *current) onI321(t any) (any, error) {
	return t.(*TypeName), nil
}

func (p *parser) callonI321() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onI321(stack["t"])
}

func (c *current) onI32Token1() (any, error) {
	return NewTypeName(string(c.text), c.pos), nil
}

func (p *parser) callonI32Token1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onI32Token1()
}

func (c *current) onI641(t any) (any, error) {
	return t.(*TypeName), nil
}

func (p *parser) callonI641() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onI641(stack["t"])
}

func (c *current) onI64Token1() (any, error) {
	return NewTypeName(string(c.text), c.pos), nil
}

func (p *parser) callonI64Token1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onI64Token1()
}

func (c *current) onDOUBLE1(t any) (any, error) {
	return t.(*TypeName), nil
}

func (p *parser) callonDOUBLE1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDOUBLE1(stack["t"])
}

func (c *current) onDOUBLEToken1() (any, error) {
	return NewTypeName(string(c.text), c.pos), nil
}

func (p *parser) callonDOUBLEToken1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDOUBLEToken1()
}

func (c *current) onSTRING1(t any) (any, error) {
	return t.(*TypeName), nil
}

func (p *parser) callonSTRING1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSTRING1(stack["t"])
}

func (c *current) onSTRINGToken1() (any, error) {
	return NewTypeName(string(c.text), c.pos), nil
}

func (p *parser) callonSTRINGToken1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSTRINGToken1()
}

func (c *current) onBINARY1(t any) (any, error) {
	return t.(*TypeName), nil
}

func (p *parser) callonBINARY1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBINARY1(stack["t"])
}

func (c *current) onBINARYToken1() (any, error) {
	return NewTypeName(string(c.text), c.pos), nil
}

func (p *parser) callonBINARYToken1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBINARYToken1()
}

func (c *current) onCONST1(t any) (any, error) {
	return t.(*TypeName), nil
}

func (p *parser) callonCONST1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCONST1(stack["t"])
}

func (c *current) onCONSTToken1() (any, error) {
	return NewTypeName(string(c.text), c.pos), nil
}

func (p *parser) callonCONSTToken1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCONSTToken1()
}

func (c *current) onONEWAY1(t any) (any, error) {
	return t.(*TypeName), nil
}

func (p *parser) callonONEWAY1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onONEWAY1(stack["t"])
}

func (c *current) onONEWAYToken1() (any, error) {
	return NewTypeName(string(c.text), c.pos), nil
}

func (p *parser) callonONEWAYToken1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onONEWAYToken1()
}

func (c *current) onTYPEDEF1() (any, error) {
	return "typedef", nil
}

func (p *parser) callonTYPEDEF1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTYPEDEF1()
}

func (c *current) onMAP1(t any) (any, error) {
	return t.(*TypeName), nil
}

func (p *parser) callonMAP1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMAP1(stack["t"])
}

func (c *current) onMAPToken1() (any, error) {
	return NewTypeName(string(c.text), c.pos), nil
}

func (p *parser) callonMAPToken1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMAPToken1()
}

func (c *current) onSET1(t any) (any, error) {
	return t.(*TypeName), nil
}

func (p *parser) callonSET1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSET1(stack["t"])
}

func (c *current) onSETToken1() (any, error) {
	return NewTypeName(string(c.text), c.pos), nil
}

func (p *parser) callonSETToken1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSETToken1()
}

func (c *current) onLIST1(t any) (any, error) {
	return t.(*TypeName), nil
}

func (p *parser) callonLIST1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLIST1(stack["t"])
}

func (c *current) onListToken1() (any, error) {
	return NewTypeName(string(c.text), c.pos), nil
}

func (p *parser) callonListToken1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListToken1()
}

func (c *current) onVOID1() (any, error) {
	return "void", nil
}

func (p *parser) callonVOID1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVOID1()
}

func (c *current) onTHROWS1() (any, error) {
	return "throws", nil
}

func (p *parser) callonTHROWS1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTHROWS1()
}

func (c *current) onEXCEPTION1() (any, error) {
	return "exception", nil
}

func (p *parser) callonEXCEPTION1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEXCEPTION1()
}

func (c *current) onEXTENDS1() (any, error) {
	return "extends", nil
}

func (p *parser) callonEXTENDS1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEXTENDS1()
}

func (c *current) onSERVICE1() (any, error) {
	return "service", nil
}

func (p *parser) callonSERVICE1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSERVICE1()
}

func (c *current) onSTRUCT1() (any, error) {
	return "struct", nil
}

func (p *parser) callonSTRUCT1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSTRUCT1()
}

func (c *current) onUNION1() (any, error) {
	return "union", nil
}

func (p *parser) callonUNION1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUNION1()
}

func (c *current) onENUM1() (any, error) {
	return "enum", nil
}

func (p *parser) callonENUM1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onENUM1()
}

func (c *current) onINCLUDE1() (any, error) {
	return "include", nil
}

func (p *parser) callonINCLUDE1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINCLUDE1()
}

func (c *current) onCPPINCLUDE1() (any, error) {
	return "cpp_include", nil
}

func (p *parser) callonCPPINCLUDE1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCPPINCLUDE1()
}

func (c *current) onNAMESPACE1() (any, error) {
	return "namespace", nil
}

func (p *parser) callonNAMESPACE1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNAMESPACE1()
}

func (c *current) onCPPTYPE1() (any, error) {
	return "cpp_type", nil
}

func (p *parser) callonCPPTYPE1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCPPTYPE1()
}

func (c *current) onLBRK1() (any, error) {
	return "[", nil
}

func (p *parser) callonLBRK1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLBRK1()
}

func (c *current) onRBRK1() (any, error) {
	return "]", nil
}

func (p *parser) callonRBRK1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRBRK1()
}

func (c *current) onLCUR1(t any) (any, error) {
	return t.(string), nil
}

func (p *parser) callonLCUR1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLCUR1(stack["t"])
}

func (c *current) onRCUR1(t any) (any, error) {
	return t.(string), nil
}

func (p *parser) callonRCUR1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRCUR1(stack["t"])
}

func (c *current) onLCURToken1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonLCURToken1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLCURToken1()
}

func (c *current) onRCURToken2() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonRCURToken2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRCURToken2()
}

func (c *current) onEQUAL1() (any, error) {
	return "=", nil
}

func (p *parser) callonEQUAL1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEQUAL1()
}

func (c *current) onLPOINT1() (any, error) {
	return "<", nil
}

func (p *parser) callonLPOINT1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLPOINT1()
}

func (c *current) onRPOINT1() (any, error) {
	return ">", nil
}

func (p *parser) callonRPOINT1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRPOINT1()
}

func (c *current) onCOMMA1() (any, error) {
	return ",", nil
}

func (p *parser) callonCOMMA1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCOMMA1()
}

func (c *current) onLPAR1() (any, error) {
	return "(", nil
}

func (p *parser) callonLPAR1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLPAR1()
}

func (c *current) onRPAR1() (any, error) {
	return ")", nil
}

func (p *parser) callonRPAR1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRPAR1()
}

func (c *current) onCOLON1() (any, error) {
	return ":", nil
}

func (p *parser) callonCOLON1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCOLON1()
}

func (c *current) onErrFieldIndex3() error {
	return InvalidFieldIndexError
}

func (p *parser) callonErrFieldIndex3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrFieldIndex3()
}

func (c *current) onErrFieldIndex1() (any, error) {
	// 消费到冒号或本行结束
	return NewBadFieldIndex(NewLocationFromCurrent(c)), nil
}

func (p *parser) callonErrFieldIndex1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrFieldIndex1()
}

func (c *current) onErrStructField3() error {
	return InvalidStructFieldError
}

func (p *parser) callonErrStructField3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrStructField3()
}

func (c *current) onErrStructField1() (any, error) {
	return NewField("", "", nil, nil, nil, nil, nil, NewLocationFromCurrent(c)), nil
}

func (p *parser) callonErrStructField1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrStructField1()
}

func (c *current) onErrStructIdentifier3() error {
	return InvalidStructIdentifierError
}

func (p *parser) callonErrStructIdentifier3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrStructIdentifier3()
}

func (c *current) onErrStructIdentifier1() (any, error) {
	// struct identifier 异常，consume 掉异常字符直到出现 '{' 为止
	t := NewIdentifier("", c.pos)
	t.BadNode = true

	return t, nil
}

func (p *parser) callonErrStructIdentifier1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrStructIdentifier1()
}

func (c *current) onErrStructRCUR3() error {
	return InvalidStructBlockRCURError
}

func (p *parser) callonErrStructRCUR3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrStructRCUR3()
}

func (c *current) onErrStructRCUR1() (any, error) {
	// 缺少 '}'，消费异常字符直到出现下一个 definition。TODO(jpf): 后面会加入 typedef 等定义，需要扩展补充
	return "?", nil
}

func (p *parser) callonErrStructRCUR1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrStructRCUR1()
}

func (c *current) onErrStructLCUR3() error {
	return InvalidStructBlockLCURError
}

func (p *parser) callonErrStructLCUR3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrStructLCUR3()
}

func (c *current) onErrStructLCUR1() (any, error) {
	// 缺少 '{'，消费异常字符直到出现下一个 Field 或者 '}'
	return "?", nil
}

func (p *parser) callonErrStructLCUR1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrStructLCUR1()
}

func (c *current) onErrUnionIdentifier3() error {
	return InvalidUnionIdentifierError
}

func (p *parser) callonErrUnionIdentifier3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrUnionIdentifier3()
}

func (c *current) onErrUnionIdentifier1() (any, error) {
	// identifier 异常，consume 掉异常字符直到出现 '{' 为止
	t := NewIdentifier("", c.pos)
	t.BadNode = true

	return t, nil
}

func (p *parser) callonErrUnionIdentifier1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrUnionIdentifier1()
}

func (c *current) onErrUnionRCUR3() error {
	return InvalidUnionBlockRCURError
}

func (p *parser) callonErrUnionRCUR3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrUnionRCUR3()
}

func (c *current) onErrUnionRCUR1() (any, error) {
	return "?", nil
}

func (p *parser) callonErrUnionRCUR1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrUnionRCUR1()
}

func (c *current) onErrUnionLCUR3() error {
	return InvalidUnionBlockLCURError
}

func (p *parser) callonErrUnionLCUR3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrUnionLCUR3()
}

func (c *current) onErrUnionLCUR1() (any, error) {
	// 缺少 '{'，消费异常字符直到出现下一个 Field 或者 '}'
	return "?", nil
}

func (p *parser) callonErrUnionLCUR1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrUnionLCUR1()
}

func (c *current) onErrUnionField3() error {
	return InvalidUnionFieldError
}

func (p *parser) callonErrUnionField3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrUnionField3()
}

func (c *current) onErrUnionField1() (any, error) {
	return NewField("", "", nil, nil, nil, nil, nil, NewLocationFromCurrent(c)), nil
}

func (p *parser) callonErrUnionField1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrUnionField1()
}

func (c *current) onErrExceptionIdentifier3() error {
	return InvalidExceptionIdentifierError
}

func (p *parser) callonErrExceptionIdentifier3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrExceptionIdentifier3()
}

func (c *current) onErrExceptionIdentifier1() (any, error) {
	// identifier 异常，consume 掉异常字符直到出现 '{' 为止
	t := NewIdentifier("", c.pos)
	t.BadNode = true

	return t, nil
}

func (p *parser) callonErrExceptionIdentifier1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrExceptionIdentifier1()
}

func (c *current) onErrExceptionRCUR3() error {
	return InvalidExceptionBlockRCURError
}

func (p *parser) callonErrExceptionRCUR3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrExceptionRCUR3()
}

func (c *current) onErrExceptionRCUR1() (any, error) {
	return "?", nil
}

func (p *parser) callonErrExceptionRCUR1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrExceptionRCUR1()
}

func (c *current) onErrExceptionLCUR3() error {
	return InvalidExceptionBlockLCURError
}

func (p *parser) callonErrExceptionLCUR3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrExceptionLCUR3()
}

func (c *current) onErrExceptionLCUR1() (any, error) {
	// 缺少 '{'，消费异常字符直到出现下一个 Field 或者 '}'
	return "?", nil
}

func (p *parser) callonErrExceptionLCUR1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrExceptionLCUR1()
}

func (c *current) onErrExceptionField3() error {
	return InvalidExceptionFieldError
}

func (p *parser) callonErrExceptionField3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrExceptionField3()
}

func (c *current) onErrExceptionField1() (any, error) {
	return NewField("", "", nil, nil, nil, nil, nil, NewLocationFromCurrent(c)), nil
}

func (p *parser) callonErrExceptionField1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrExceptionField1()
}

func (c *current) onErrEnumIdentifier3() error {
	return InvalidEnumIdentifierError
}

func (p *parser) callonErrEnumIdentifier3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrEnumIdentifier3()
}

func (c *current) onErrEnumIdentifier1() (any, error) {
	// enum identifier 异常，consume 掉异常字符直到出现 '{' 为止
	t := NewIdentifier("", c.pos)
	t.BadNode = true

	return t, nil
}

func (p *parser) callonErrEnumIdentifier1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrEnumIdentifier1()
}

func (c *current) onErrEnumRCUR3() error {
	return InvalidEnumBlockRCURError
}

func (p *parser) callonErrEnumRCUR3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrEnumRCUR3()
}

func (c *current) onErrEnumRCUR1() (any, error) {
	return "?", nil
}

func (p *parser) callonErrEnumRCUR1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrEnumRCUR1()
}

func (c *current) onErrEnumLCUR3() error {
	return InvalidEnumBlockLCURError
}

func (p *parser) callonErrEnumLCUR3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrEnumLCUR3()
}

func (c *current) onErrEnumLCUR1() (any, error) {
	// 缺少 '{'，消费异常字符直到出现下一个 Field 或者 '}'
	return "?", nil
}

func (p *parser) callonErrEnumLCUR1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrEnumLCUR1()
}

func (c *current) onErrEnumValue3() error {
	return InvalidEnumValueError
}

func (p *parser) callonErrEnumValue3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrEnumValue3()
}

func (c *current) onErrEnumValue1() (any, error) {
	return NewBadEnumValue(NewLocationFromCurrent(c)), nil
}

func (p *parser) callonErrEnumValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrEnumValue1()
}

func (c *current) onErrEnumValueIntConstant3() error {
	return InvalidEnumValueIntConstantError
}

func (p *parser) callonErrEnumValueIntConstant3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrEnumValueIntConstant3()
}

func (c *current) onErrEnumValueIntConstant1() (any, error) {
	return NewBadIntConstValue(NewLocationFromCurrent(c)), nil
}

func (p *parser) callonErrEnumValueIntConstant1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrEnumValueIntConstant1()
}

func (c *current) onErrTypedefIdentifier3() error {
	return InvalidTypedefIdentifierError
}

func (p *parser) callonErrTypedefIdentifier3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrTypedefIdentifier3()
}

func (c *current) onErrTypedefIdentifier1() (any, error) {
	t := NewIdentifier("", c.pos)
	t.BadNode = true

	return t, nil
}

func (p *parser) callonErrTypedefIdentifier1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrTypedefIdentifier1()
}

func (c *current) onErrConstIdentifier3() error {
	return InvalidConstIdentifierError
}

func (p *parser) callonErrConstIdentifier3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrConstIdentifier3()
}

func (c *current) onErrConstIdentifier1() (any, error) {
	t := NewIdentifier("", c.pos)
	t.BadNode = true

	return t, nil
}

func (p *parser) callonErrConstIdentifier1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrConstIdentifier1()
}

func (c *current) onErrConstMissingValue3() error {
	return InvalidConstMissingValueError
}

func (p *parser) callonErrConstMissingValue3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrConstMissingValue3()
}

func (c *current) onErrConstMissingValue1() (any, error) {
	return NewBadConstValue(NewLocationFromCurrent(c)), nil
}

func (p *parser) callonErrConstMissingValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrConstMissingValue1()
}

func (c *current) onErrConstConstValue3() error {
	return InvalidConstConstValueError
}

func (p *parser) callonErrConstConstValue3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrConstConstValue3()
}

func (c *current) onErrConstConstValue1() (any, error) {
	return NewBadConstValue(NewLocationFromCurrent(c)), nil
}

func (p *parser) callonErrConstConstValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrConstConstValue1()
}

func (c *current) onErrServiceIdentifier3() error {
	return InvalidServiceIdentifierError
}

func (p *parser) callonErrServiceIdentifier3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrServiceIdentifier3()
}

func (c *current) onErrServiceIdentifier1() (any, error) {
	// identifier 异常，consume 掉异常字符直到出现 '{' 为止
	t := NewIdentifier("", c.pos)
	t.BadNode = true

	return t, nil
}

func (p *parser) callonErrServiceIdentifier1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrServiceIdentifier1()
}

func (c *current) onErrServiceRCUR3() error {
	return InvalidServiceBlockRCURError
}

func (p *parser) callonErrServiceRCUR3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrServiceRCUR3()
}

func (c *current) onErrServiceRCUR1() (any, error) {
	return "?", nil
}

func (p *parser) callonErrServiceRCUR1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrServiceRCUR1()
}

func (c *current) onErrServiceFunction3() error {
	return InvalidServiceFunctionError
}

func (p *parser) callonErrServiceFunction3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrServiceFunction3()
}

func (c *current) onErrServiceFunction1() (any, error) {
	return NewBadFunction(NewLocationFromCurrent(c)), nil
}

func (p *parser) callonErrServiceFunction1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrServiceFunction1()
}

func (c *current) onErrFunctionIdentifier3() error {
	return InvalidFunctionIdentifierError
}

func (p *parser) callonErrFunctionIdentifier3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrFunctionIdentifier3()
}

func (c *current) onErrFunctionIdentifier1() (any, error) {
	// identifier 异常，consume 掉异常字符直到出现 '(' 为止
	t := NewIdentifier("", c.pos)
	t.BadNode = true

	return t, nil
}

func (p *parser) callonErrFunctionIdentifier1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrFunctionIdentifier1()
}

func (c *current) onErrFunctionArgument3() error {
	return InvalidFunctionArgumentError
}

func (p *parser) callonErrFunctionArgument3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrFunctionArgument3()
}

func (c *current) onErrFunctionArgument1() (any, error) {
	return NewField("", "", nil, nil, nil, nil, nil, NewLocationFromCurrent(c)), nil
}

func (p *parser) callonErrFunctionArgument1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrFunctionArgument1()
}

func (c *current) onErrLiteral1MissingRight3() error {
	return InvalidLiteral1MissingRightError
}

func (p *parser) callonErrLiteral1MissingRight3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrLiteral1MissingRight3()
}

func (c *current) onErrLiteral1MissingRight1() (any, error) {
	// 消费异常字符直到这行结束
	return NewBadLiteral(string(c.text), NewLocationFromCurrent(c)), nil
}

func (p *parser) callonErrLiteral1MissingRight1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrLiteral1MissingRight1()
}

func (c *current) onErrLiteral13() error {
	return InvalidLiteral1Error
}

func (p *parser) callonErrLiteral13() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrLiteral13()
}

func (c *current) onErrLiteral11() (any, error) {
	// 消费异常字符直到这行结束
	return NewBadLiteral(string(c.text), NewLocationFromCurrent(c)), nil
}

func (p *parser) callonErrLiteral11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrLiteral11()
}

func (c *current) onErrLiteral2MissingRight3() error {
	return InvalidLiteral2MissingRightError
}

func (p *parser) callonErrLiteral2MissingRight3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrLiteral2MissingRight3()
}

func (c *current) onErrLiteral2MissingRight1() (any, error) {
	// 消费异常字符直到这行结束
	return NewBadLiteral(string(c.text), NewLocationFromCurrent(c)), nil
}

func (p *parser) callonErrLiteral2MissingRight1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrLiteral2MissingRight1()
}

func (c *current) onErrLiteral23() error {
	return InvalidLiteral2Error
}

func (p *parser) callonErrLiteral23() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrLiteral23()
}

func (c *current) onErrLiteral21() (any, error) {
	// 消费异常字符直到这行结束
	return NewBadLiteral(string(c.text), NewLocationFromCurrent(c)), nil
}

func (p *parser) callonErrLiteral21() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrLiteral21()
}

func (c *current) onErrConst3() error {
	return InvalidConstError
}

func (p *parser) callonErrConst3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrConst3()
}

func (c *current) onErrConst1() (any, error) {
	// 消费异常字符直到这行结束
	return NewBadConst(NewLocationFromCurrent(c)), nil
}

func (p *parser) callonErrConst1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrConst1()
}

func (c *current) onErrTypedef3() error {
	return InvalidTypedefError
}

func (p *parser) callonErrTypedef3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrTypedef3()
}

func (c *current) onErrTypedef1() (any, error) {
	// 消费异常字符直到这行结束
	fmt.Println("text: ", string(c.text))
	return NewBadTypedef(NewLocationFromCurrent(c)), nil
}

func (p *parser) callonErrTypedef1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrTypedef1()
}

func (c *current) onErrEnum3() error {
	return InvalidEnumError
}

func (p *parser) callonErrEnum3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrEnum3()
}

func (c *current) onErrEnum1() (any, error) {
	// 消费异常字符直到这行结束
	return NewBadEnum(NewLocationFromCurrent(c)), nil
}

func (p *parser) callonErrEnum1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrEnum1()
}

func (c *current) onErrService3() error {
	return InvalidServiceError
}

func (p *parser) callonErrService3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrService3()
}

func (c *current) onErrService1() (any, error) {
	// 消费异常字符直到这行结束
	return NewBadService(NewLocationFromCurrent(c)), nil
}

func (p *parser) callonErrService1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrService1()
}

func (c *current) onErrStruct3() error {
	return InvalidStructError
}

func (p *parser) callonErrStruct3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrStruct3()
}

func (c *current) onErrStruct1() (any, error) {
	// 消费异常字符直到这行结束
	return NewBadStruct(NewLocationFromCurrent(c)), nil
}

func (p *parser) callonErrStruct1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrStruct1()
}

func (c *current) onErrUnion3() error {
	return InvalidUnionError
}

func (p *parser) callonErrUnion3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrUnion3()
}

func (c *current) onErrUnion1() (any, error) {
	// 消费异常字符直到这行结束
	return NewBadUnion(NewLocationFromCurrent(c)), nil
}

func (p *parser) callonErrUnion1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrUnion1()
}

func (c *current) onErrException3() error {
	return InvalidExceptionError
}

func (p *parser) callonErrException3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrException3()
}

func (c *current) onErrException1() (any, error) {
	// 消费异常字符直到这行结束
	return NewBadException(NewLocationFromCurrent(c)), nil
}

func (p *parser) callonErrException1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrException1()
}

func (c *current) onErrDefinition3() error {
	return InvalidDefinitionError
}

func (p *parser) callonErrDefinition3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrDefinition3()
}

func (c *current) onErrDefinition1() (any, error) {
	// 消费异常字符直到这行结束
	return NewBadDefinition(NewLocationFromCurrent(c)), nil
}

func (p *parser) callonErrDefinition1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrDefinition1()
}

func (c *current) onErrInclude3() error {
	return InvalidIncludeError
}

func (p *parser) callonErrInclude3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrInclude3()
}

func (c *current) onErrInclude1() (any, error) {
	// 消费异常字符直到这行结束
	return NewBadInclude(NewLocationFromCurrent(c)), nil
}

func (p *parser) callonErrInclude1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrInclude1()
}

func (c *current) onErrCppInclude3() error {
	return InvalidCppIncludeError
}

func (p *parser) callonErrCppInclude3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrCppInclude3()
}

func (c *current) onErrCppInclude1() (any, error) {
	// 消费异常字符直到这行结束
	return NewBadCPPInclude(NewLocationFromCurrent(c)), nil
}

func (p *parser) callonErrCppInclude1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrCppInclude1()
}

func (c *current) onErrNamespace3() error {
	return InvalidNamespaceError
}

func (p *parser) callonErrNamespace3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrNamespace3()
}

func (c *current) onErrNamespace1() (any, error) {
	// 消费异常字符直到这行结束
	return NewBadNamespace(NewLocationFromCurrent(c)), nil
}

func (p *parser) callonErrNamespace1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrNamespace1()
}

func (c *current) onErrHeader3() error {
	return InvalidHeaderError
}

func (p *parser) callonErrHeader3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrHeader3()
}

func (c *current) onErrHeader1() (any, error) {
	// 消费异常字符直到这行结束
	return NewBadHeader(NewLocationFromCurrent(c)), nil
}

func (p *parser) callonErrHeader1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrHeader1()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//	input := "input"
//	stats := Stats{}
//	_, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//	if err != nil {
//	    log.Panicln(err)
//	}
//	b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//	if err != nil {
//	    log.Panicln(err)
//	}
//	fmt.Println(string(b))
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value any) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value any) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i any, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (any, error) {
	b, err := io.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (any, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]any

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        any
}

type choiceExpr struct {
	pos          position
	alternatives []any
}

type actionExpr struct {
	pos  position
	expr any
	run  func(*parser) (any, error)
}

type recoveryExpr struct {
	pos          position
	expr         any
	recoverExpr  any
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []any
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  any
}

type expr struct {
	pos  position
	expr any
}

type (
	andExpr        expr
	notExpr        expr
	zeroOrOneExpr  expr
	zeroOrMoreExpr expr
	oneOrMoreExpr  expr
)

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   any
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[any]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]any
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]any
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]any)
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr any) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]any, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) in(s string) string {
	p.depth++
	return p.print(strings.Repeat(" ", p.depth)+">", s)
}

func (p *parser) out(s string) string {
	p.depth--
	return p.print(strings.Repeat(" ", p.depth)+"<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() any
}

var statePool = &sync.Pool{
	New: func() any { return make(storeDict) },
}

func (sd storeDict) Discard() {
	for k := range sd {
		delete(sd, k)
	}
	statePool.Put(sd)
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := statePool.Get().(storeDict)
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state.Discard()
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node any) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node any, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[any]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[any]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val any, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRule(rule *rule) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}

	if p.memoize {
		res, ok := p.getMemoized(rule)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
	}

	start := p.pt
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}

	if p.memoize {
		p.setMemoized(start, rule, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr any) (any, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val any
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]any, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
