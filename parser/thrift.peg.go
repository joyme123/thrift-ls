// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"sync"
	"unicode"
	"unicode/utf8"
)

func toStringSlice(strs any) []string {
	if strs == nil {
		return nil
	}

	items := strs.([]any)
	ret := make([]string, 0, len(items))
	for i := range items {
		var item string
		if _, ok := items[i].([]interface{}); ok {
			data := items[i].([]interface{})[1]
			if bs, ok := data.([]uint8); ok {
				item = string(bs)
			} else {
				item = items[i].([]interface{})[1].(string)
			}
		} else {
			item = items[i].(string)
		}

		ret = append(ret, item)
	}

	return ret
}

func toFieldSlice(fields any) []*Field {
	if fields == nil {
		return nil
	}

	items := fields.([]any)
	ret := make([]*Field, 0, len(items))
	for i := range items {
		item := items[i].(*Field)
		ret = append(ret, item)
	}
	return ret
}

func toConstValueSlice(values any) []*ConstValue {
	if values == nil {
		return nil
	}

	items := values.([]any)
	ret := make([]*ConstValue, 0, len(items))
	for i := range items {
		item := items[i].(*ConstValue)
		ret = append(ret, item)
	}
	return ret
}

func toString(text any) string {
	if text == nil {
		return ""
	}

	data := text.([]interface{})

	ret := bytes.NewBuffer(nil)
	for i := range data {
		ret.WriteString(data[i].(string))
	}

	return ret.String()
}

func toDefinitionSlice(defs any) []Definition {
	if defs == nil {
		return nil
	}
	items := defs.([]any)
	ret := make([]Definition, 0, len(items))
	for i := range items {
		ret = append(ret, items[i].(Definition))
	}
	return ret
}

func toEnumValueSlice(v any) []*EnumValue {
	if v == nil {
		return nil
	}
	values := v.([]any)

	ret := make([]*EnumValue, 0, len(values))
	value := int64(0)
	for _, v := range values {
		fields := v.([]any)
		comments := fields[0].(string)
		name := fields[1].(*Identifier)
		valuePair := fields[2]
		if valuePair != nil {
			value = valuePair.([]any)[1].(*ConstValue).Value.(int64)
		}

		enumValue := NewEnumValue(name, value, comments)
		value++
		ret = append(ret, enumValue)
	}
	return ret
}

var g = &grammar{
	rules: []*rule{
		{
			name: "Document",
			pos:  position{line: 111, col: 1, offset: 1940},
			expr: &actionExpr{
				pos: position{line: 111, col: 12, offset: 1951},
				run: (*parser).callonDocument1,
				expr: &seqExpr{
					pos: position{line: 111, col: 12, offset: 1951},
					exprs: []any{
						&zeroOrMoreExpr{
							pos: position{line: 111, col: 12, offset: 1951},
							expr: &ruleRefExpr{
								pos:  position{line: 111, col: 12, offset: 1951},
								name: "Header",
							},
						},
						&labeledExpr{
							pos:   position{line: 111, col: 21, offset: 1960},
							label: "def",
							expr: &zeroOrMoreExpr{
								pos: position{line: 111, col: 25, offset: 1964},
								expr: &ruleRefExpr{
									pos:  position{line: 111, col: 25, offset: 1964},
									name: "Definition",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 111, col: 37, offset: 1976},
							name: "Skip",
						},
						&notExpr{
							pos: position{line: 111, col: 42, offset: 1981},
							expr: &anyMatcher{
								line: 111, col: 43, offset: 1982,
							},
						},
					},
				},
			},
		},
		{
			name: "Header",
			pos:  position{line: 115, col: 1, offset: 2038},
			expr: &seqExpr{
				pos: position{line: 115, col: 11, offset: 2048},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 115, col: 11, offset: 2048},
						name: "Skip",
					},
					&choiceExpr{
						pos: position{line: 115, col: 17, offset: 2054},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 115, col: 17, offset: 2054},
								name: "Include",
							},
							&ruleRefExpr{
								pos:  position{line: 115, col: 27, offset: 2064},
								name: "CppInclude",
							},
							&ruleRefExpr{
								pos:  position{line: 115, col: 40, offset: 2077},
								name: "Namespace",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 115, col: 51, offset: 2088},
						name: "SkipLine",
					},
				},
			},
		},
		{
			name: "Include",
			pos:  position{line: 117, col: 1, offset: 2098},
			expr: &seqExpr{
				pos: position{line: 117, col: 12, offset: 2109},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 117, col: 12, offset: 2109},
						name: "INCLUDE",
					},
					&ruleRefExpr{
						pos:  position{line: 117, col: 20, offset: 2117},
						name: "Literal",
					},
				},
			},
		},
		{
			name: "CppInclude",
			pos:  position{line: 119, col: 1, offset: 2126},
			expr: &seqExpr{
				pos: position{line: 119, col: 15, offset: 2140},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 119, col: 15, offset: 2140},
						name: "CPPINCLUDE",
					},
					&ruleRefExpr{
						pos:  position{line: 119, col: 26, offset: 2151},
						name: "Literal",
					},
				},
			},
		},
		{
			name: "Namespace",
			pos:  position{line: 121, col: 1, offset: 2160},
			expr: &seqExpr{
				pos: position{line: 121, col: 14, offset: 2173},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 121, col: 14, offset: 2173},
						name: "NAMESPACE",
					},
					&ruleRefExpr{
						pos:  position{line: 121, col: 24, offset: 2183},
						name: "NamespaceScope",
					},
					&ruleRefExpr{
						pos:  position{line: 121, col: 39, offset: 2198},
						name: "Identifier",
					},
					&zeroOrOneExpr{
						pos: position{line: 121, col: 50, offset: 2209},
						expr: &ruleRefExpr{
							pos:  position{line: 121, col: 50, offset: 2209},
							name: "Annotations",
						},
					},
				},
			},
		},
		{
			name: "NamespaceScope",
			pos:  position{line: 123, col: 1, offset: 2223},
			expr: &choiceExpr{
				pos: position{line: 123, col: 19, offset: 2241},
				alternatives: []any{
					&seqExpr{
						pos: position{line: 123, col: 19, offset: 2241},
						exprs: []any{
							&ruleRefExpr{
								pos:  position{line: 123, col: 19, offset: 2241},
								name: "Skip",
							},
							&litMatcher{
								pos:        position{line: 124, col: 5, offset: 2250},
								val:        "*",
								ignoreCase: false,
								want:       "\"*\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 124, col: 9, offset: 2254},
								expr: &ruleRefExpr{
									pos:  position{line: 124, col: 9, offset: 2254},
									name: "Indent",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 125, col: 7, offset: 2268},
						name: "Identifier",
					},
				},
			},
		},
		{
			name: "Definition",
			pos:  position{line: 127, col: 1, offset: 2280},
			expr: &actionExpr{
				pos: position{line: 127, col: 14, offset: 2293},
				run: (*parser).callonDefinition1,
				expr: &seqExpr{
					pos: position{line: 127, col: 14, offset: 2293},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 127, col: 14, offset: 2293},
							label: "comments",
							expr: &ruleRefExpr{
								pos:  position{line: 127, col: 23, offset: 2302},
								name: "ReservedComments",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 127, col: 40, offset: 2319},
							name: "Skip",
						},
						&labeledExpr{
							pos:   position{line: 127, col: 45, offset: 2324},
							label: "v",
							expr: &choiceExpr{
								pos: position{line: 127, col: 48, offset: 2327},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 127, col: 48, offset: 2327},
										name: "Const",
									},
									&ruleRefExpr{
										pos:  position{line: 127, col: 56, offset: 2335},
										name: "Typedef",
									},
									&ruleRefExpr{
										pos:  position{line: 127, col: 66, offset: 2345},
										name: "Enum",
									},
									&ruleRefExpr{
										pos:  position{line: 127, col: 73, offset: 2352},
										name: "Service",
									},
									&ruleRefExpr{
										pos:  position{line: 127, col: 83, offset: 2362},
										name: "Struct",
									},
									&ruleRefExpr{
										pos:  position{line: 127, col: 92, offset: 2371},
										name: "Union",
									},
									&ruleRefExpr{
										pos:  position{line: 127, col: 100, offset: 2379},
										name: "Exception",
									},
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 127, col: 111, offset: 2390},
							expr: &ruleRefExpr{
								pos:  position{line: 127, col: 111, offset: 2390},
								name: "Annotations",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 127, col: 124, offset: 2403},
							name: "SkipLine",
						},
					},
				},
			},
		},
		{
			name: "Const",
			pos:  position{line: 133, col: 1, offset: 2493},
			expr: &actionExpr{
				pos: position{line: 133, col: 10, offset: 2502},
				run: (*parser).callonConst1,
				expr: &seqExpr{
					pos: position{line: 133, col: 10, offset: 2502},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 133, col: 10, offset: 2502},
							name: "CONST",
						},
						&labeledExpr{
							pos:   position{line: 133, col: 16, offset: 2508},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 133, col: 18, offset: 2510},
								name: "FieldType",
							},
						},
						&labeledExpr{
							pos:   position{line: 133, col: 28, offset: 2520},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 133, col: 33, offset: 2525},
								name: "Identifier",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 133, col: 44, offset: 2536},
							name: "EQUAL",
						},
						&labeledExpr{
							pos:   position{line: 133, col: 50, offset: 2542},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 133, col: 52, offset: 2544},
								name: "ConstValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 133, col: 63, offset: 2555},
							expr: &ruleRefExpr{
								pos:  position{line: 133, col: 63, offset: 2555},
								name: "ListSeparator",
							},
						},
					},
				},
			},
		},
		{
			name: "Typedef",
			pos:  position{line: 137, col: 1, offset: 2654},
			expr: &actionExpr{
				pos: position{line: 137, col: 12, offset: 2665},
				run: (*parser).callonTypedef1,
				expr: &seqExpr{
					pos: position{line: 137, col: 12, offset: 2665},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 137, col: 12, offset: 2665},
							name: "TYPEDEF",
						},
						&labeledExpr{
							pos:   position{line: 137, col: 20, offset: 2673},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 137, col: 22, offset: 2675},
								name: "FieldType",
							},
						},
						&labeledExpr{
							pos:   position{line: 137, col: 32, offset: 2685},
							label: "alias",
							expr: &ruleRefExpr{
								pos:  position{line: 137, col: 38, offset: 2691},
								name: "Identifier",
							},
						},
					},
				},
			},
		},
		{
			name: "Enum",
			pos:  position{line: 141, col: 1, offset: 2768},
			expr: &actionExpr{
				pos: position{line: 141, col: 10, offset: 2777},
				run: (*parser).callonEnum1,
				expr: &seqExpr{
					pos: position{line: 141, col: 10, offset: 2777},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 141, col: 10, offset: 2777},
							name: "ENUM",
						},
						&labeledExpr{
							pos:   position{line: 141, col: 15, offset: 2782},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 141, col: 20, offset: 2787},
								name: "Identifier",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 141, col: 31, offset: 2798},
							name: "LCUR",
						},
						&labeledExpr{
							pos:   position{line: 141, col: 36, offset: 2803},
							label: "v",
							expr: &zeroOrMoreExpr{
								pos: position{line: 141, col: 38, offset: 2805},
								expr: &seqExpr{
									pos: position{line: 141, col: 39, offset: 2806},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 141, col: 39, offset: 2806},
											name: "ReservedComments",
										},
										&ruleRefExpr{
											pos:  position{line: 141, col: 56, offset: 2823},
											name: "Identifier",
										},
										&zeroOrOneExpr{
											pos: position{line: 141, col: 67, offset: 2834},
											expr: &seqExpr{
												pos: position{line: 141, col: 68, offset: 2835},
												exprs: []any{
													&ruleRefExpr{
														pos:  position{line: 141, col: 68, offset: 2835},
														name: "EQUAL",
													},
													&ruleRefExpr{
														pos:  position{line: 141, col: 74, offset: 2841},
														name: "IntConstant",
													},
												},
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 141, col: 88, offset: 2855},
											expr: &ruleRefExpr{
												pos:  position{line: 141, col: 88, offset: 2855},
												name: "Annotations",
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 141, col: 101, offset: 2868},
											expr: &ruleRefExpr{
												pos:  position{line: 141, col: 101, offset: 2868},
												name: "ListSeparator",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 141, col: 116, offset: 2883},
											name: "SkipLine",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 141, col: 127, offset: 2894},
							name: "RCUR",
						},
					},
				},
			},
		},
		{
			name: "Service",
			pos:  position{line: 146, col: 1, offset: 2984},
			expr: &actionExpr{
				pos: position{line: 146, col: 12, offset: 2995},
				run: (*parser).callonService1,
				expr: &seqExpr{
					pos: position{line: 146, col: 12, offset: 2995},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 146, col: 12, offset: 2995},
							name: "SERVICE",
						},
						&ruleRefExpr{
							pos:  position{line: 146, col: 20, offset: 3003},
							name: "Identifier",
						},
						&zeroOrOneExpr{
							pos: position{line: 146, col: 31, offset: 3014},
							expr: &seqExpr{
								pos: position{line: 146, col: 33, offset: 3016},
								exprs: []any{
									&ruleRefExpr{
										pos:  position{line: 146, col: 33, offset: 3016},
										name: "EXTENDS",
									},
									&ruleRefExpr{
										pos:  position{line: 146, col: 41, offset: 3024},
										name: "Identifier",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 146, col: 55, offset: 3038},
							name: "LCUR",
						},
						&zeroOrMoreExpr{
							pos: position{line: 146, col: 60, offset: 3043},
							expr: &ruleRefExpr{
								pos:  position{line: 146, col: 60, offset: 3043},
								name: "Function",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 146, col: 70, offset: 3053},
							name: "RCUR",
						},
					},
				},
			},
		},
		{
			name: "Struct",
			pos:  position{line: 150, col: 1, offset: 3089},
			expr: &recoveryExpr{
				pos: position{line: 150, col: 10, offset: 3098},
				expr: &recoveryExpr{
					pos: position{line: 150, col: 10, offset: 3098},
					expr: &recoveryExpr{
						pos: position{line: 150, col: 10, offset: 3098},
						expr: &actionExpr{
							pos: position{line: 150, col: 10, offset: 3098},
							run: (*parser).callonStruct4,
							expr: &seqExpr{
								pos: position{line: 150, col: 10, offset: 3098},
								exprs: []any{
									&ruleRefExpr{
										pos:  position{line: 150, col: 10, offset: 3098},
										name: "STRUCT",
									},
									&labeledExpr{
										pos:   position{line: 150, col: 17, offset: 3105},
										label: "id",
										expr: &ruleRefExpr{
											pos:  position{line: 150, col: 20, offset: 3108},
											name: "StructIdentifier",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 150, col: 37, offset: 3125},
										name: "LCUR",
									},
									&labeledExpr{
										pos:   position{line: 150, col: 42, offset: 3130},
										label: "fields",
										expr: &zeroOrMoreExpr{
											pos: position{line: 150, col: 49, offset: 3137},
											expr: &ruleRefExpr{
												pos:  position{line: 150, col: 49, offset: 3137},
												name: "FieldWithThrow",
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 150, col: 65, offset: 3153},
										name: "RCUR",
									},
								},
							},
						},
						recoverExpr: &ruleRefExpr{
							pos:  position{line: 152, col: 21, offset: 3243},
							name: "ErrStructIdentifier",
						},
						failureLabel: []string{
							"errIdentifier",
						},
					},
					recoverExpr: &ruleRefExpr{
						pos:  position{line: 152, col: 53, offset: 3275},
						name: "ErrStructRCUR",
					},
					failureLabel: []string{
						"errRCUR",
					},
				},
				recoverExpr: &ruleRefExpr{
					pos:  position{line: 152, col: 81, offset: 3303},
					name: "ErrField",
				},
				failureLabel: []string{
					"errField",
				},
			},
		},
		{
			name: "Union",
			pos:  position{line: 154, col: 1, offset: 3313},
			expr: &actionExpr{
				pos: position{line: 154, col: 10, offset: 3322},
				run: (*parser).callonUnion1,
				expr: &seqExpr{
					pos: position{line: 154, col: 10, offset: 3322},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 154, col: 10, offset: 3322},
							name: "UNION",
						},
						&ruleRefExpr{
							pos:  position{line: 154, col: 16, offset: 3328},
							name: "Identifier",
						},
						&ruleRefExpr{
							pos:  position{line: 154, col: 27, offset: 3339},
							name: "LCUR",
						},
						&zeroOrMoreExpr{
							pos: position{line: 154, col: 32, offset: 3344},
							expr: &ruleRefExpr{
								pos:  position{line: 154, col: 32, offset: 3344},
								name: "Field",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 154, col: 39, offset: 3351},
							name: "RCUR",
						},
					},
				},
			},
		},
		{
			name: "Exception",
			pos:  position{line: 158, col: 1, offset: 3385},
			expr: &actionExpr{
				pos: position{line: 158, col: 14, offset: 3398},
				run: (*parser).callonException1,
				expr: &seqExpr{
					pos: position{line: 158, col: 14, offset: 3398},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 158, col: 14, offset: 3398},
							name: "EXCEPTION",
						},
						&ruleRefExpr{
							pos:  position{line: 158, col: 24, offset: 3408},
							name: "Identifier",
						},
						&ruleRefExpr{
							pos:  position{line: 158, col: 35, offset: 3419},
							name: "LCUR",
						},
						&zeroOrMoreExpr{
							pos: position{line: 158, col: 40, offset: 3424},
							expr: &ruleRefExpr{
								pos:  position{line: 158, col: 40, offset: 3424},
								name: "Field",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 158, col: 47, offset: 3431},
							name: "RCUR",
						},
					},
				},
			},
		},
		{
			name: "FieldWithThrow",
			pos:  position{line: 162, col: 1, offset: 3469},
			expr: &choiceExpr{
				pos: position{line: 162, col: 18, offset: 3486},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 162, col: 18, offset: 3486},
						name: "Field",
					},
					&actionExpr{
						pos: position{line: 162, col: 26, offset: 3494},
						run: (*parser).callonFieldWithThrow3,
						expr: &labeledExpr{
							pos:   position{line: 162, col: 26, offset: 3494},
							label: "x",
							expr: &seqExpr{
								pos: position{line: 162, col: 30, offset: 3498},
								exprs: []any{
									&notExpr{
										pos: position{line: 162, col: 30, offset: 3498},
										expr: &choiceExpr{
											pos: position{line: 162, col: 32, offset: 3500},
											alternatives: []any{
												&seqExpr{
													pos: position{line: 162, col: 33, offset: 3501},
													exprs: []any{
														&ruleRefExpr{
															pos:  position{line: 162, col: 33, offset: 3501},
															name: "Skip",
														},
														&litMatcher{
															pos:        position{line: 162, col: 38, offset: 3506},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
														&zeroOrMoreExpr{
															pos: position{line: 162, col: 42, offset: 3510},
															expr: &ruleRefExpr{
																pos:  position{line: 162, col: 42, offset: 3510},
																name: "Indent",
															},
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 162, col: 53, offset: 3521},
													name: "STRUCT",
												},
											},
										},
									},
									&throwExpr{
										pos:   position{line: 162, col: 61, offset: 3529},
										label: "errField",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Field",
			pos:  position{line: 166, col: 1, offset: 3574},
			expr: &actionExpr{
				pos: position{line: 166, col: 9, offset: 3582},
				run: (*parser).callonField1,
				expr: &seqExpr{
					pos: position{line: 166, col: 9, offset: 3582},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 166, col: 9, offset: 3582},
							label: "comments",
							expr: &ruleRefExpr{
								pos:  position{line: 166, col: 18, offset: 3591},
								name: "ReservedComments",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 166, col: 35, offset: 3608},
							name: "Skip",
						},
						&labeledExpr{
							pos:   position{line: 166, col: 40, offset: 3613},
							label: "index",
							expr: &ruleRefExpr{
								pos:  position{line: 166, col: 46, offset: 3619},
								name: "FieldId",
							},
						},
						&labeledExpr{
							pos:   position{line: 166, col: 54, offset: 3627},
							label: "required",
							expr: &zeroOrOneExpr{
								pos: position{line: 166, col: 63, offset: 3636},
								expr: &ruleRefExpr{
									pos:  position{line: 166, col: 63, offset: 3636},
									name: "FieldReq",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 166, col: 73, offset: 3646},
							label: "fieldType",
							expr: &ruleRefExpr{
								pos:  position{line: 166, col: 83, offset: 3656},
								name: "FieldType",
							},
						},
						&labeledExpr{
							pos:   position{line: 166, col: 93, offset: 3666},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 166, col: 96, offset: 3669},
								name: "Identifier",
							},
						},
						&labeledExpr{
							pos:   position{line: 166, col: 107, offset: 3680},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 166, col: 113, offset: 3686},
								expr: &seqExpr{
									pos: position{line: 166, col: 114, offset: 3687},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 166, col: 114, offset: 3687},
											name: "EQUAL",
										},
										&ruleRefExpr{
											pos:  position{line: 166, col: 120, offset: 3693},
											name: "ConstValue",
										},
									},
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 166, col: 133, offset: 3706},
							expr: &ruleRefExpr{
								pos:  position{line: 166, col: 133, offset: 3706},
								name: "Annotations",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 166, col: 146, offset: 3719},
							expr: &ruleRefExpr{
								pos:  position{line: 166, col: 146, offset: 3719},
								name: "ListSeparator",
							},
						},
						&labeledExpr{
							pos:   position{line: 166, col: 161, offset: 3734},
							label: "lineComments",
							expr: &ruleRefExpr{
								pos:  position{line: 166, col: 174, offset: 3747},
								name: "ReservedEndLineComments",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 166, col: 198, offset: 3771},
							name: "SkipLine",
						},
					},
				},
			},
		},
		{
			name: "FieldId",
			pos:  position{line: 180, col: 1, offset: 4123},
			expr: &actionExpr{
				pos: position{line: 180, col: 11, offset: 4133},
				run: (*parser).callonFieldId1,
				expr: &seqExpr{
					pos: position{line: 180, col: 11, offset: 4133},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 180, col: 11, offset: 4133},
							name: "Skip",
						},
						&labeledExpr{
							pos:   position{line: 180, col: 16, offset: 4138},
							label: "i",
							expr: &ruleRefExpr{
								pos:  position{line: 180, col: 18, offset: 4140},
								name: "FieldIndex",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 180, col: 29, offset: 4151},
							name: "COLON",
						},
						&zeroOrMoreExpr{
							pos: position{line: 180, col: 35, offset: 4157},
							expr: &ruleRefExpr{
								pos:  position{line: 180, col: 35, offset: 4157},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "FieldReq",
			pos:  position{line: 183, col: 1, offset: 4185},
			expr: &actionExpr{
				pos: position{line: 183, col: 12, offset: 4196},
				run: (*parser).callonFieldReq1,
				expr: &seqExpr{
					pos: position{line: 183, col: 12, offset: 4196},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 183, col: 12, offset: 4196},
							name: "Skip",
						},
						&labeledExpr{
							pos:   position{line: 183, col: 17, offset: 4201},
							label: "r",
							expr: &ruleRefExpr{
								pos:  position{line: 183, col: 19, offset: 4203},
								name: "IsRequired",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 183, col: 30, offset: 4214},
							expr: &ruleRefExpr{
								pos:  position{line: 183, col: 30, offset: 4214},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "IsRequired",
			pos:  position{line: 189, col: 1, offset: 4289},
			expr: &actionExpr{
				pos: position{line: 189, col: 14, offset: 4302},
				run: (*parser).callonIsRequired1,
				expr: &labeledExpr{
					pos:   position{line: 189, col: 14, offset: 4302},
					label: "v",
					expr: &choiceExpr{
						pos: position{line: 189, col: 17, offset: 4305},
						alternatives: []any{
							&litMatcher{
								pos:        position{line: 189, col: 17, offset: 4305},
								val:        "required",
								ignoreCase: false,
								want:       "\"required\"",
							},
							&litMatcher{
								pos:        position{line: 189, col: 30, offset: 4318},
								val:        "optional",
								ignoreCase: false,
								want:       "\"optional\"",
							},
						},
					},
				},
			},
		},
		{
			name: "Function",
			pos:  position{line: 196, col: 1, offset: 4437},
			expr: &seqExpr{
				pos: position{line: 196, col: 14, offset: 4450},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 196, col: 14, offset: 4450},
						name: "ReservedComments",
					},
					&ruleRefExpr{
						pos:  position{line: 196, col: 31, offset: 4467},
						name: "Skip",
					},
					&zeroOrOneExpr{
						pos: position{line: 196, col: 36, offset: 4472},
						expr: &ruleRefExpr{
							pos:  position{line: 196, col: 36, offset: 4472},
							name: "ONEWAY",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 196, col: 44, offset: 4480},
						name: "FunctionType",
					},
					&ruleRefExpr{
						pos:  position{line: 196, col: 57, offset: 4493},
						name: "Identifier",
					},
					&ruleRefExpr{
						pos:  position{line: 196, col: 68, offset: 4504},
						name: "LPAR",
					},
					&zeroOrMoreExpr{
						pos: position{line: 196, col: 73, offset: 4509},
						expr: &ruleRefExpr{
							pos:  position{line: 196, col: 73, offset: 4509},
							name: "Field",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 196, col: 80, offset: 4516},
						name: "RPAR",
					},
					&zeroOrOneExpr{
						pos: position{line: 196, col: 85, offset: 4521},
						expr: &ruleRefExpr{
							pos:  position{line: 196, col: 85, offset: 4521},
							name: "Throws",
						},
					},
					&zeroOrOneExpr{
						pos: position{line: 196, col: 93, offset: 4529},
						expr: &ruleRefExpr{
							pos:  position{line: 196, col: 93, offset: 4529},
							name: "Annotations",
						},
					},
					&zeroOrOneExpr{
						pos: position{line: 196, col: 106, offset: 4542},
						expr: &ruleRefExpr{
							pos:  position{line: 196, col: 106, offset: 4542},
							name: "ListSeparator",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 196, col: 121, offset: 4557},
						name: "SkipLine",
					},
				},
			},
		},
		{
			name: "FunctionType",
			pos:  position{line: 198, col: 1, offset: 4567},
			expr: &choiceExpr{
				pos: position{line: 198, col: 18, offset: 4584},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 198, col: 18, offset: 4584},
						name: "VOID",
					},
					&ruleRefExpr{
						pos:  position{line: 198, col: 25, offset: 4591},
						name: "FieldType",
					},
				},
			},
		},
		{
			name: "Throws",
			pos:  position{line: 200, col: 1, offset: 4602},
			expr: &seqExpr{
				pos: position{line: 200, col: 11, offset: 4612},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 200, col: 11, offset: 4612},
						name: "THROWS",
					},
					&ruleRefExpr{
						pos:  position{line: 200, col: 18, offset: 4619},
						name: "LPAR",
					},
					&zeroOrMoreExpr{
						pos: position{line: 200, col: 23, offset: 4624},
						expr: &ruleRefExpr{
							pos:  position{line: 200, col: 23, offset: 4624},
							name: "Field",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 200, col: 30, offset: 4631},
						name: "RPAR",
					},
				},
			},
		},
		{
			name: "FieldType",
			pos:  position{line: 202, col: 1, offset: 4637},
			expr: &actionExpr{
				pos: position{line: 202, col: 14, offset: 4650},
				run: (*parser).callonFieldType1,
				expr: &seqExpr{
					pos: position{line: 202, col: 14, offset: 4650},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 202, col: 14, offset: 4650},
							label: "v",
							expr: &choiceExpr{
								pos: position{line: 202, col: 17, offset: 4653},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 202, col: 17, offset: 4653},
										name: "ContainerType",
									},
									&ruleRefExpr{
										pos:  position{line: 202, col: 33, offset: 4669},
										name: "BaseType",
									},
									&ruleRefExpr{
										pos:  position{line: 202, col: 44, offset: 4680},
										name: "IdentifierType",
									},
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 202, col: 60, offset: 4696},
							expr: &ruleRefExpr{
								pos:  position{line: 202, col: 60, offset: 4696},
								name: "Annotations",
							},
						},
					},
				},
			},
		},
		{
			name: "IdentifierType",
			pos:  position{line: 206, col: 1, offset: 4742},
			expr: &actionExpr{
				pos: position{line: 206, col: 18, offset: 4759},
				run: (*parser).callonIdentifierType1,
				expr: &labeledExpr{
					pos:   position{line: 206, col: 18, offset: 4759},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 206, col: 20, offset: 4761},
						name: "Identifier",
					},
				},
			},
		},
		{
			name: "BaseType",
			pos:  position{line: 210, col: 1, offset: 4820},
			expr: &actionExpr{
				pos: position{line: 210, col: 12, offset: 4831},
				run: (*parser).callonBaseType1,
				expr: &labeledExpr{
					pos:   position{line: 210, col: 12, offset: 4831},
					label: "v",
					expr: &choiceExpr{
						pos: position{line: 210, col: 15, offset: 4834},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 210, col: 15, offset: 4834},
								name: "BOOL",
							},
							&ruleRefExpr{
								pos:  position{line: 210, col: 22, offset: 4841},
								name: "BYTE",
							},
							&ruleRefExpr{
								pos:  position{line: 210, col: 29, offset: 4848},
								name: "I8",
							},
							&ruleRefExpr{
								pos:  position{line: 210, col: 34, offset: 4853},
								name: "I16",
							},
							&ruleRefExpr{
								pos:  position{line: 210, col: 40, offset: 4859},
								name: "I32",
							},
							&ruleRefExpr{
								pos:  position{line: 210, col: 46, offset: 4865},
								name: "I64",
							},
							&ruleRefExpr{
								pos:  position{line: 210, col: 52, offset: 4871},
								name: "DOUBLE",
							},
							&ruleRefExpr{
								pos:  position{line: 210, col: 61, offset: 4880},
								name: "STRING",
							},
							&ruleRefExpr{
								pos:  position{line: 210, col: 70, offset: 4889},
								name: "BINARY",
							},
						},
					},
				},
			},
		},
		{
			name: "ContainerType",
			pos:  position{line: 214, col: 1, offset: 4953},
			expr: &actionExpr{
				pos: position{line: 214, col: 17, offset: 4969},
				run: (*parser).callonContainerType1,
				expr: &labeledExpr{
					pos:   position{line: 214, col: 17, offset: 4969},
					label: "v",
					expr: &choiceExpr{
						pos: position{line: 214, col: 20, offset: 4972},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 214, col: 20, offset: 4972},
								name: "MapType",
							},
							&ruleRefExpr{
								pos:  position{line: 214, col: 30, offset: 4982},
								name: "SetType",
							},
							&ruleRefExpr{
								pos:  position{line: 214, col: 40, offset: 4992},
								name: "ListType",
							},
						},
					},
				},
			},
		},
		{
			name: "MapType",
			pos:  position{line: 218, col: 1, offset: 5035},
			expr: &actionExpr{
				pos: position{line: 218, col: 12, offset: 5046},
				run: (*parser).callonMapType1,
				expr: &seqExpr{
					pos: position{line: 218, col: 12, offset: 5046},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 218, col: 12, offset: 5046},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 218, col: 14, offset: 5048},
								name: "MAP",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 218, col: 18, offset: 5052},
							expr: &ruleRefExpr{
								pos:  position{line: 218, col: 18, offset: 5052},
								name: "CppType",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 218, col: 27, offset: 5061},
							name: "LPOINT",
						},
						&labeledExpr{
							pos:   position{line: 218, col: 34, offset: 5068},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 218, col: 38, offset: 5072},
								name: "FieldType",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 218, col: 48, offset: 5082},
							name: "COMMA",
						},
						&labeledExpr{
							pos:   position{line: 218, col: 54, offset: 5088},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 218, col: 60, offset: 5094},
								name: "FieldType",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 218, col: 70, offset: 5104},
							name: "RPOINT",
						},
					},
				},
			},
		},
		{
			name: "SetType",
			pos:  position{line: 222, col: 1, offset: 5195},
			expr: &actionExpr{
				pos: position{line: 222, col: 11, offset: 5205},
				run: (*parser).callonSetType1,
				expr: &seqExpr{
					pos: position{line: 222, col: 11, offset: 5205},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 222, col: 11, offset: 5205},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 222, col: 13, offset: 5207},
								name: "SET",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 222, col: 17, offset: 5211},
							expr: &ruleRefExpr{
								pos:  position{line: 222, col: 17, offset: 5211},
								name: "CppType",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 222, col: 26, offset: 5220},
							name: "LPOINT",
						},
						&labeledExpr{
							pos:   position{line: 222, col: 33, offset: 5227},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 222, col: 37, offset: 5231},
								name: "FieldType",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 222, col: 47, offset: 5241},
							name: "RPOINT",
						},
					},
				},
			},
		},
		{
			name: "ListType",
			pos:  position{line: 226, col: 1, offset: 5317},
			expr: &actionExpr{
				pos: position{line: 226, col: 12, offset: 5328},
				run: (*parser).callonListType1,
				expr: &seqExpr{
					pos: position{line: 226, col: 12, offset: 5328},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 226, col: 12, offset: 5328},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 226, col: 14, offset: 5330},
								name: "LIST",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 226, col: 19, offset: 5335},
							name: "LPOINT",
						},
						&labeledExpr{
							pos:   position{line: 226, col: 26, offset: 5342},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 226, col: 30, offset: 5346},
								name: "FieldType",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 226, col: 40, offset: 5356},
							name: "RPOINT",
						},
						&zeroOrOneExpr{
							pos: position{line: 226, col: 47, offset: 5363},
							expr: &ruleRefExpr{
								pos:  position{line: 226, col: 47, offset: 5363},
								name: "CppType",
							},
						},
					},
				},
			},
		},
		{
			name: "CppType",
			pos:  position{line: 230, col: 1, offset: 5441},
			expr: &seqExpr{
				pos: position{line: 230, col: 11, offset: 5451},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 230, col: 11, offset: 5451},
						name: "CPPTYPE",
					},
					&ruleRefExpr{
						pos:  position{line: 230, col: 19, offset: 5459},
						name: "Literal",
					},
				},
			},
		},
		{
			name: "ConstValue",
			pos:  position{line: 232, col: 1, offset: 5468},
			expr: &actionExpr{
				pos: position{line: 232, col: 14, offset: 5481},
				run: (*parser).callonConstValue1,
				expr: &labeledExpr{
					pos:   position{line: 232, col: 14, offset: 5481},
					label: "v",
					expr: &choiceExpr{
						pos: position{line: 232, col: 17, offset: 5484},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 232, col: 17, offset: 5484},
								name: "DoubleConstant",
							},
							&ruleRefExpr{
								pos:  position{line: 232, col: 34, offset: 5501},
								name: "IntConstant",
							},
							&ruleRefExpr{
								pos:  position{line: 232, col: 48, offset: 5515},
								name: "Literal",
							},
							&ruleRefExpr{
								pos:  position{line: 232, col: 58, offset: 5525},
								name: "IdentifierConst",
							},
							&ruleRefExpr{
								pos:  position{line: 232, col: 76, offset: 5543},
								name: "ConstMap",
							},
							&ruleRefExpr{
								pos:  position{line: 232, col: 87, offset: 5554},
								name: "ConstList",
							},
						},
					},
				},
			},
		},
		{
			name: "IdentifierConst",
			pos:  position{line: 241, col: 1, offset: 5746},
			expr: &actionExpr{
				pos: position{line: 241, col: 19, offset: 5764},
				run: (*parser).callonIdentifierConst1,
				expr: &labeledExpr{
					pos:   position{line: 241, col: 19, offset: 5764},
					label: "id",
					expr: &ruleRefExpr{
						pos:  position{line: 241, col: 22, offset: 5767},
						name: "Identifier",
					},
				},
			},
		},
		{
			name: "IntConstant",
			pos:  position{line: 245, col: 1, offset: 5847},
			expr: &actionExpr{
				pos: position{line: 245, col: 15, offset: 5861},
				run: (*parser).callonIntConstant1,
				expr: &seqExpr{
					pos: position{line: 245, col: 15, offset: 5861},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 245, col: 15, offset: 5861},
							name: "Skip",
						},
						&labeledExpr{
							pos:   position{line: 245, col: 21, offset: 5867},
							label: "v",
							expr: &choiceExpr{
								pos: position{line: 245, col: 24, offset: 5870},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 245, col: 24, offset: 5870},
										name: "HexIntConstant",
									},
									&ruleRefExpr{
										pos:  position{line: 245, col: 41, offset: 5887},
										name: "OctIntConstant",
									},
									&ruleRefExpr{
										pos:  position{line: 245, col: 58, offset: 5904},
										name: "NormalIntConstant",
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 245, col: 78, offset: 5924},
							expr: &ruleRefExpr{
								pos:  position{line: 245, col: 78, offset: 5924},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "HexIntConstant",
			pos:  position{line: 249, col: 1, offset: 5966},
			expr: &actionExpr{
				pos: position{line: 249, col: 18, offset: 5983},
				run: (*parser).callonHexIntConstant1,
				expr: &seqExpr{
					pos: position{line: 249, col: 18, offset: 5983},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 249, col: 18, offset: 5983},
							val:        "0x",
							ignoreCase: false,
							want:       "\"0x\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 249, col: 23, offset: 5988},
							expr: &choiceExpr{
								pos: position{line: 249, col: 24, offset: 5989},
								alternatives: []any{
									&charClassMatcher{
										pos:        position{line: 249, col: 24, offset: 5989},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
									&charClassMatcher{
										pos:        position{line: 249, col: 32, offset: 5997},
										val:        "[A-Z]",
										ranges:     []rune{'A', 'Z'},
										ignoreCase: false,
										inverted:   false,
									},
									&charClassMatcher{
										pos:        position{line: 249, col: 40, offset: 6005},
										val:        "[a-z]",
										ranges:     []rune{'a', 'z'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OctIntConstant",
			pos:  position{line: 258, col: 1, offset: 6153},
			expr: &actionExpr{
				pos: position{line: 258, col: 18, offset: 6170},
				run: (*parser).callonOctIntConstant1,
				expr: &seqExpr{
					pos: position{line: 258, col: 18, offset: 6170},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 258, col: 18, offset: 6170},
							val:        "0o",
							ignoreCase: false,
							want:       "\"0o\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 258, col: 23, offset: 6175},
							expr: &ruleRefExpr{
								pos:  position{line: 258, col: 23, offset: 6175},
								name: "Digit",
							},
						},
					},
				},
			},
		},
		{
			name: "NormalIntConstant",
			pos:  position{line: 266, col: 1, offset: 6313},
			expr: &actionExpr{
				pos: position{line: 266, col: 21, offset: 6333},
				run: (*parser).callonNormalIntConstant1,
				expr: &seqExpr{
					pos: position{line: 266, col: 21, offset: 6333},
					exprs: []any{
						&zeroOrOneExpr{
							pos: position{line: 266, col: 21, offset: 6333},
							expr: &choiceExpr{
								pos: position{line: 266, col: 22, offset: 6334},
								alternatives: []any{
									&litMatcher{
										pos:        position{line: 266, col: 22, offset: 6334},
										val:        "+",
										ignoreCase: false,
										want:       "\"+\"",
									},
									&litMatcher{
										pos:        position{line: 266, col: 28, offset: 6340},
										val:        "-",
										ignoreCase: false,
										want:       "\"-\"",
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 266, col: 34, offset: 6346},
							expr: &ruleRefExpr{
								pos:  position{line: 266, col: 34, offset: 6346},
								name: "Digit",
							},
						},
					},
				},
			},
		},
		{
			name: "FieldIndex",
			pos:  position{line: 274, col: 1, offset: 6485},
			expr: &choiceExpr{
				pos: position{line: 274, col: 14, offset: 6498},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 274, col: 14, offset: 6498},
						run: (*parser).callonFieldIndex2,
						expr: &oneOrMoreExpr{
							pos: position{line: 274, col: 14, offset: 6498},
							expr: &ruleRefExpr{
								pos:  position{line: 274, col: 14, offset: 6498},
								name: "Digit",
							},
						},
					},
					&throwExpr{
						pos:   position{line: 280, col: 5, offset: 6616},
						label: "errFieldIndex",
					},
				},
			},
		},
		{
			name: "DoubleConstant",
			pos:  position{line: 282, col: 1, offset: 6634},
			expr: &actionExpr{
				pos: position{line: 282, col: 19, offset: 6652},
				run: (*parser).callonDoubleConstant1,
				expr: &seqExpr{
					pos: position{line: 282, col: 19, offset: 6652},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 282, col: 19, offset: 6652},
							name: "Skip",
						},
						&zeroOrOneExpr{
							pos: position{line: 282, col: 24, offset: 6657},
							expr: &choiceExpr{
								pos: position{line: 282, col: 25, offset: 6658},
								alternatives: []any{
									&litMatcher{
										pos:        position{line: 282, col: 25, offset: 6658},
										val:        "+",
										ignoreCase: false,
										want:       "\"+\"",
									},
									&litMatcher{
										pos:        position{line: 282, col: 31, offset: 6664},
										val:        "-",
										ignoreCase: false,
										want:       "\"-\"",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 282, col: 37, offset: 6670},
							label: "v",
							expr: &choiceExpr{
								pos: position{line: 283, col: 9, offset: 6682},
								alternatives: []any{
									&seqExpr{
										pos: position{line: 283, col: 9, offset: 6682},
										exprs: []any{
											&zeroOrMoreExpr{
												pos: position{line: 283, col: 9, offset: 6682},
												expr: &ruleRefExpr{
													pos:  position{line: 283, col: 9, offset: 6682},
													name: "Digit",
												},
											},
											&litMatcher{
												pos:        position{line: 283, col: 16, offset: 6689},
												val:        ".",
												ignoreCase: false,
												want:       "\".\"",
											},
											&oneOrMoreExpr{
												pos: position{line: 283, col: 20, offset: 6693},
												expr: &ruleRefExpr{
													pos:  position{line: 283, col: 20, offset: 6693},
													name: "Digit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 283, col: 28, offset: 6701},
												expr: &ruleRefExpr{
													pos:  position{line: 283, col: 28, offset: 6701},
													name: "Exponent",
												},
											},
										},
									},
									&seqExpr{
										pos: position{line: 284, col: 9, offset: 6719},
										exprs: []any{
											&oneOrMoreExpr{
												pos: position{line: 284, col: 9, offset: 6719},
												expr: &ruleRefExpr{
													pos:  position{line: 284, col: 9, offset: 6719},
													name: "Digit",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 284, col: 16, offset: 6726},
												name: "Exponent",
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 285, col: 7, offset: 6741},
							expr: &ruleRefExpr{
								pos:  position{line: 285, col: 7, offset: 6741},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "Exponent",
			pos:  position{line: 293, col: 1, offset: 6894},
			expr: &seqExpr{
				pos: position{line: 293, col: 12, offset: 6905},
				exprs: []any{
					&choiceExpr{
						pos: position{line: 293, col: 13, offset: 6906},
						alternatives: []any{
							&litMatcher{
								pos:        position{line: 293, col: 13, offset: 6906},
								val:        "e",
								ignoreCase: false,
								want:       "\"e\"",
							},
							&litMatcher{
								pos:        position{line: 293, col: 19, offset: 6912},
								val:        "E",
								ignoreCase: false,
								want:       "\"E\"",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 293, col: 24, offset: 6917},
						name: "IntConstant",
					},
				},
			},
		},
		{
			name: "Annotations",
			pos:  position{line: 295, col: 1, offset: 6930},
			expr: &seqExpr{
				pos: position{line: 295, col: 16, offset: 6945},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 295, col: 16, offset: 6945},
						name: "LPAR",
					},
					&oneOrMoreExpr{
						pos: position{line: 295, col: 21, offset: 6950},
						expr: &ruleRefExpr{
							pos:  position{line: 295, col: 21, offset: 6950},
							name: "Annotation",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 295, col: 33, offset: 6962},
						name: "RPAR",
					},
				},
			},
		},
		{
			name: "Annotation",
			pos:  position{line: 297, col: 1, offset: 6968},
			expr: &seqExpr{
				pos: position{line: 297, col: 15, offset: 6982},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 297, col: 15, offset: 6982},
						name: "Identifier",
					},
					&ruleRefExpr{
						pos:  position{line: 297, col: 26, offset: 6993},
						name: "EQUAL",
					},
					&ruleRefExpr{
						pos:  position{line: 297, col: 32, offset: 6999},
						name: "Literal",
					},
					&zeroOrOneExpr{
						pos: position{line: 297, col: 40, offset: 7007},
						expr: &ruleRefExpr{
							pos:  position{line: 297, col: 40, offset: 7007},
							name: "ListSeparator",
						},
					},
				},
			},
		},
		{
			name: "ConstList",
			pos:  position{line: 299, col: 1, offset: 7023},
			expr: &actionExpr{
				pos: position{line: 299, col: 14, offset: 7036},
				run: (*parser).callonConstList1,
				expr: &seqExpr{
					pos: position{line: 299, col: 14, offset: 7036},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 299, col: 14, offset: 7036},
							name: "LBRK",
						},
						&labeledExpr{
							pos:   position{line: 299, col: 19, offset: 7041},
							label: "v",
							expr: &zeroOrMoreExpr{
								pos: position{line: 299, col: 21, offset: 7043},
								expr: &ruleRefExpr{
									pos:  position{line: 299, col: 21, offset: 7043},
									name: "ConstListItem",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 299, col: 36, offset: 7058},
							name: "RBRK",
						},
					},
				},
			},
		},
		{
			name: "ConstListItem",
			pos:  position{line: 304, col: 1, offset: 7151},
			expr: &actionExpr{
				pos: position{line: 304, col: 17, offset: 7167},
				run: (*parser).callonConstListItem1,
				expr: &seqExpr{
					pos: position{line: 304, col: 17, offset: 7167},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 304, col: 17, offset: 7167},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 304, col: 19, offset: 7169},
								name: "ConstValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 304, col: 30, offset: 7180},
							expr: &ruleRefExpr{
								pos:  position{line: 304, col: 30, offset: 7180},
								name: "ListSeparator",
							},
						},
					},
				},
			},
		},
		{
			name: "ConstMap",
			pos:  position{line: 309, col: 1, offset: 7262},
			expr: &actionExpr{
				pos: position{line: 309, col: 13, offset: 7274},
				run: (*parser).callonConstMap1,
				expr: &seqExpr{
					pos: position{line: 309, col: 13, offset: 7274},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 309, col: 13, offset: 7274},
							name: "LCUR",
						},
						&labeledExpr{
							pos:   position{line: 309, col: 18, offset: 7279},
							label: "v",
							expr: &zeroOrMoreExpr{
								pos: position{line: 309, col: 20, offset: 7281},
								expr: &ruleRefExpr{
									pos:  position{line: 309, col: 20, offset: 7281},
									name: "ConstMapItem",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 309, col: 34, offset: 7295},
							name: "RCUR",
						},
					},
				},
			},
		},
		{
			name: "ConstMapItem",
			pos:  position{line: 313, col: 1, offset: 7361},
			expr: &actionExpr{
				pos: position{line: 313, col: 16, offset: 7376},
				run: (*parser).callonConstMapItem1,
				expr: &seqExpr{
					pos: position{line: 313, col: 16, offset: 7376},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 313, col: 16, offset: 7376},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 313, col: 20, offset: 7380},
								name: "ConstValue",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 313, col: 31, offset: 7391},
							name: "COLON",
						},
						&labeledExpr{
							pos:   position{line: 313, col: 37, offset: 7397},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 313, col: 43, offset: 7403},
								name: "ConstValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 313, col: 54, offset: 7414},
							expr: &ruleRefExpr{
								pos:  position{line: 313, col: 54, offset: 7414},
								name: "ListSeparator",
							},
						},
					},
				},
			},
		},
		{
			name: "EscapeLiteralChar",
			pos:  position{line: 317, col: 1, offset: 7504},
			expr: &actionExpr{
				pos: position{line: 317, col: 21, offset: 7524},
				run: (*parser).callonEscapeLiteralChar1,
				expr: &seqExpr{
					pos: position{line: 317, col: 21, offset: 7524},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 317, col: 21, offset: 7524},
							val:        "\\",
							ignoreCase: false,
							want:       "\"\\\\\"",
						},
						&charClassMatcher{
							pos:        position{line: 317, col: 26, offset: 7529},
							val:        "[\"']",
							chars:      []rune{'"', '\''},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "Literal",
			pos:  position{line: 321, col: 1, offset: 7567},
			expr: &actionExpr{
				pos: position{line: 321, col: 11, offset: 7577},
				run: (*parser).callonLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 321, col: 11, offset: 7577},
					label: "l",
					expr: &choiceExpr{
						pos: position{line: 321, col: 14, offset: 7580},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 321, col: 14, offset: 7580},
								name: "Literal1",
							},
							&ruleRefExpr{
								pos:  position{line: 321, col: 25, offset: 7591},
								name: "Literal2",
							},
						},
					},
				},
			},
		},
		{
			name: "Literal1",
			pos:  position{line: 325, col: 1, offset: 7621},
			expr: &actionExpr{
				pos: position{line: 325, col: 12, offset: 7632},
				run: (*parser).callonLiteral11,
				expr: &seqExpr{
					pos: position{line: 325, col: 12, offset: 7632},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 325, col: 12, offset: 7632},
							name: "Skip",
						},
						&litMatcher{
							pos:        position{line: 325, col: 17, offset: 7637},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 325, col: 21, offset: 7641},
							label: "t",
							expr: &zeroOrMoreExpr{
								pos: position{line: 325, col: 23, offset: 7643},
								expr: &choiceExpr{
									pos: position{line: 325, col: 24, offset: 7644},
									alternatives: []any{
										&ruleRefExpr{
											pos:  position{line: 325, col: 24, offset: 7644},
											name: "EscapeLiteralChar",
										},
										&seqExpr{
											pos: position{line: 325, col: 44, offset: 7664},
											exprs: []any{
												&notExpr{
													pos: position{line: 325, col: 44, offset: 7664},
													expr: &litMatcher{
														pos:        position{line: 325, col: 45, offset: 7665},
														val:        "\"",
														ignoreCase: false,
														want:       "\"\\\"\"",
													},
												},
												&anyMatcher{
													line: 325, col: 49, offset: 7669,
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 325, col: 53, offset: 7673},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 325, col: 57, offset: 7677},
							expr: &ruleRefExpr{
								pos:  position{line: 325, col: 57, offset: 7677},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "Literal2",
			pos:  position{line: 329, col: 1, offset: 7751},
			expr: &actionExpr{
				pos: position{line: 329, col: 12, offset: 7762},
				run: (*parser).callonLiteral21,
				expr: &seqExpr{
					pos: position{line: 329, col: 12, offset: 7762},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 329, col: 12, offset: 7762},
							name: "Skip",
						},
						&litMatcher{
							pos:        position{line: 329, col: 17, offset: 7767},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&labeledExpr{
							pos:   position{line: 329, col: 21, offset: 7771},
							label: "t",
							expr: &zeroOrMoreExpr{
								pos: position{line: 329, col: 23, offset: 7773},
								expr: &choiceExpr{
									pos: position{line: 329, col: 24, offset: 7774},
									alternatives: []any{
										&ruleRefExpr{
											pos:  position{line: 329, col: 24, offset: 7774},
											name: "EscapeLiteralChar",
										},
										&seqExpr{
											pos: position{line: 329, col: 44, offset: 7794},
											exprs: []any{
												&notExpr{
													pos: position{line: 329, col: 44, offset: 7794},
													expr: &litMatcher{
														pos:        position{line: 329, col: 45, offset: 7795},
														val:        "'",
														ignoreCase: false,
														want:       "\"'\"",
													},
												},
												&anyMatcher{
													line: 329, col: 49, offset: 7799,
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 329, col: 53, offset: 7803},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 329, col: 57, offset: 7807},
							expr: &ruleRefExpr{
								pos:  position{line: 329, col: 57, offset: 7807},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "StructIdentifier",
			pos:  position{line: 334, col: 1, offset: 7882},
			expr: &choiceExpr{
				pos: position{line: 334, col: 20, offset: 7901},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 334, col: 20, offset: 7901},
						run: (*parser).callonStructIdentifier2,
						expr: &labeledExpr{
							pos:   position{line: 334, col: 20, offset: 7901},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 334, col: 23, offset: 7904},
								name: "Identifier",
							},
						},
					},
					&throwExpr{
						pos:   position{line: 336, col: 5, offset: 7951},
						label: "errIdentifier",
					},
				},
			},
		},
		{
			name: "Identifier",
			pos:  position{line: 338, col: 1, offset: 7969},
			expr: &actionExpr{
				pos: position{line: 338, col: 14, offset: 7982},
				run: (*parser).callonIdentifier1,
				expr: &seqExpr{
					pos: position{line: 338, col: 14, offset: 7982},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 338, col: 14, offset: 7982},
							name: "Skip",
						},
						&labeledExpr{
							pos:   position{line: 338, col: 19, offset: 7987},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 338, col: 22, offset: 7990},
								name: "IdentifierToken",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 338, col: 38, offset: 8006},
							expr: &ruleRefExpr{
								pos:  position{line: 338, col: 38, offset: 8006},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "IdentifierToken",
			pos:  position{line: 342, col: 1, offset: 8049},
			expr: &actionExpr{
				pos: position{line: 342, col: 19, offset: 8067},
				run: (*parser).callonIdentifierToken1,
				expr: &seqExpr{
					pos: position{line: 342, col: 19, offset: 8067},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 342, col: 19, offset: 8067},
							name: "Letter",
						},
						&zeroOrMoreExpr{
							pos: position{line: 342, col: 26, offset: 8074},
							expr: &choiceExpr{
								pos: position{line: 342, col: 28, offset: 8076},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 342, col: 28, offset: 8076},
										name: "Letter",
									},
									&ruleRefExpr{
										pos:  position{line: 342, col: 37, offset: 8085},
										name: "Digit",
									},
									&litMatcher{
										pos:        position{line: 342, col: 45, offset: 8093},
										val:        ".",
										ignoreCase: false,
										want:       "\".\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListSeparator",
			pos:  position{line: 346, col: 1, offset: 8156},
			expr: &seqExpr{
				pos: position{line: 346, col: 17, offset: 8172},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 346, col: 17, offset: 8172},
						name: "Skip",
					},
					&choiceExpr{
						pos: position{line: 346, col: 23, offset: 8178},
						alternatives: []any{
							&litMatcher{
								pos:        position{line: 346, col: 23, offset: 8178},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
							&litMatcher{
								pos:        position{line: 346, col: 29, offset: 8184},
								val:        ";",
								ignoreCase: false,
								want:       "\";\"",
							},
						},
					},
					&zeroOrMoreExpr{
						pos: position{line: 346, col: 34, offset: 8189},
						expr: &ruleRefExpr{
							pos:  position{line: 346, col: 34, offset: 8189},
							name: "Indent",
						},
					},
				},
			},
		},
		{
			name: "Letter",
			pos:  position{line: 348, col: 1, offset: 8198},
			expr: &choiceExpr{
				pos: position{line: 348, col: 10, offset: 8207},
				alternatives: []any{
					&charClassMatcher{
						pos:        position{line: 348, col: 10, offset: 8207},
						val:        "[A-Z]",
						ranges:     []rune{'A', 'Z'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 348, col: 18, offset: 8215},
						val:        "[a-z]",
						ranges:     []rune{'a', 'z'},
						ignoreCase: false,
						inverted:   false,
					},
					&actionExpr{
						pos: position{line: 348, col: 26, offset: 8223},
						run: (*parser).callonLetter4,
						expr: &litMatcher{
							pos:        position{line: 348, col: 26, offset: 8223},
							val:        "_",
							ignoreCase: false,
							want:       "\"_\"",
						},
					},
				},
			},
		},
		{
			name: "LetterOrDigit",
			pos:  position{line: 351, col: 1, offset: 8259},
			expr: &choiceExpr{
				pos: position{line: 351, col: 17, offset: 8275},
				alternatives: []any{
					&charClassMatcher{
						pos:        position{line: 351, col: 17, offset: 8275},
						val:        "[a-z]",
						ranges:     []rune{'a', 'z'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 351, col: 25, offset: 8283},
						val:        "[A-Z]",
						ranges:     []rune{'A', 'Z'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 351, col: 33, offset: 8291},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&actionExpr{
						pos: position{line: 351, col: 41, offset: 8299},
						run: (*parser).callonLetterOrDigit5,
						expr: &charClassMatcher{
							pos:        position{line: 351, col: 41, offset: 8299},
							val:        "[_$]",
							chars:      []rune{'_', '$'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "Digit",
			pos:  position{line: 355, col: 1, offset: 8337},
			expr: &actionExpr{
				pos: position{line: 355, col: 9, offset: 8345},
				run: (*parser).callonDigit1,
				expr: &charClassMatcher{
					pos:        position{line: 355, col: 9, offset: 8345},
					val:        "[0-9]",
					ranges:     []rune{'0', '9'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "ReservedComments",
			pos:  position{line: 359, col: 1, offset: 8384},
			expr: &ruleRefExpr{
				pos:  position{line: 359, col: 20, offset: 8403},
				name: "Skip",
			},
		},
		{
			name: "ReservedEndLineComments",
			pos:  position{line: 360, col: 1, offset: 8409},
			expr: &ruleRefExpr{
				pos:  position{line: 360, col: 27, offset: 8435},
				name: "SkipLine",
			},
		},
		{
			name: "Skip",
			pos:  position{line: 362, col: 1, offset: 8445},
			expr: &actionExpr{
				pos: position{line: 362, col: 8, offset: 8452},
				run: (*parser).callonSkip1,
				expr: &labeledExpr{
					pos:   position{line: 362, col: 8, offset: 8452},
					label: "comments",
					expr: &zeroOrMoreExpr{
						pos: position{line: 362, col: 17, offset: 8461},
						expr: &choiceExpr{
							pos: position{line: 362, col: 18, offset: 8462},
							alternatives: []any{
								&ruleRefExpr{
									pos:  position{line: 362, col: 18, offset: 8462},
									name: "Space",
								},
								&ruleRefExpr{
									pos:  position{line: 362, col: 26, offset: 8470},
									name: "Comment",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SkipLine",
			pos:  position{line: 365, col: 1, offset: 8541},
			expr: &actionExpr{
				pos: position{line: 365, col: 12, offset: 8552},
				run: (*parser).callonSkipLine1,
				expr: &labeledExpr{
					pos:   position{line: 365, col: 12, offset: 8552},
					label: "comments",
					expr: &zeroOrMoreExpr{
						pos: position{line: 365, col: 21, offset: 8561},
						expr: &choiceExpr{
							pos: position{line: 365, col: 22, offset: 8562},
							alternatives: []any{
								&ruleRefExpr{
									pos:  position{line: 365, col: 22, offset: 8562},
									name: "Indent",
								},
								&ruleRefExpr{
									pos:  position{line: 365, col: 31, offset: 8571},
									name: "Comment",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Space",
			pos:  position{line: 369, col: 1, offset: 8643},
			expr: &actionExpr{
				pos: position{line: 369, col: 9, offset: 8651},
				run: (*parser).callonSpace1,
				expr: &oneOrMoreExpr{
					pos: position{line: 369, col: 9, offset: 8651},
					expr: &choiceExpr{
						pos: position{line: 369, col: 10, offset: 8652},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 369, col: 10, offset: 8652},
								name: "Indent",
							},
							&ruleRefExpr{
								pos:  position{line: 369, col: 19, offset: 8661},
								name: "CarriageReturnLineFeed",
							},
						},
					},
				},
			},
		},
		{
			name: "Indent",
			pos:  position{line: 372, col: 1, offset: 8706},
			expr: &actionExpr{
				pos: position{line: 372, col: 10, offset: 8715},
				run: (*parser).callonIndent1,
				expr: &charClassMatcher{
					pos:        position{line: 372, col: 10, offset: 8715},
					val:        "[ \\t\\v]",
					chars:      []rune{' ', '\t', '\v'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "CarriageReturnLineFeed",
			pos:  position{line: 375, col: 1, offset: 8743},
			expr: &charClassMatcher{
				pos:        position{line: 375, col: 26, offset: 8768},
				val:        "[\\r\\n]",
				chars:      []rune{'\r', '\n'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "Comment",
			pos:  position{line: 377, col: 1, offset: 8776},
			expr: &actionExpr{
				pos: position{line: 377, col: 11, offset: 8786},
				run: (*parser).callonComment1,
				expr: &labeledExpr{
					pos:   position{line: 377, col: 11, offset: 8786},
					label: "v",
					expr: &choiceExpr{
						pos: position{line: 377, col: 14, offset: 8789},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 377, col: 14, offset: 8789},
								name: "LongComment",
							},
							&ruleRefExpr{
								pos:  position{line: 377, col: 28, offset: 8803},
								name: "LineComment",
							},
							&ruleRefExpr{
								pos:  position{line: 377, col: 42, offset: 8817},
								name: "UnixComment",
							},
						},
					},
				},
			},
		},
		{
			name: "LongComment",
			pos:  position{line: 380, col: 1, offset: 8858},
			expr: &actionExpr{
				pos: position{line: 380, col: 15, offset: 8872},
				run: (*parser).callonLongComment1,
				expr: &seqExpr{
					pos: position{line: 380, col: 15, offset: 8872},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 380, col: 15, offset: 8872},
							val:        "/*",
							ignoreCase: false,
							want:       "\"/*\"",
						},
						&labeledExpr{
							pos:   position{line: 380, col: 20, offset: 8877},
							label: "comment",
							expr: &ruleRefExpr{
								pos:  position{line: 380, col: 28, offset: 8885},
								name: "LongCommentMatch",
							},
						},
						&litMatcher{
							pos:        position{line: 380, col: 45, offset: 8902},
							val:        "*/",
							ignoreCase: false,
							want:       "\"*/\"",
						},
					},
				},
			},
		},
		{
			name: "LongCommentMatch",
			pos:  position{line: 383, col: 1, offset: 8941},
			expr: &actionExpr{
				pos: position{line: 383, col: 20, offset: 8960},
				run: (*parser).callonLongCommentMatch1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 383, col: 20, offset: 8960},
					expr: &seqExpr{
						pos: position{line: 383, col: 21, offset: 8961},
						exprs: []any{
							&notExpr{
								pos: position{line: 383, col: 21, offset: 8961},
								expr: &litMatcher{
									pos:        position{line: 383, col: 22, offset: 8962},
									val:        "*/",
									ignoreCase: false,
									want:       "\"*/\"",
								},
							},
							&anyMatcher{
								line: 383, col: 27, offset: 8967,
							},
						},
					},
				},
			},
		},
		{
			name: "LineComment",
			pos:  position{line: 387, col: 1, offset: 9004},
			expr: &actionExpr{
				pos: position{line: 387, col: 15, offset: 9018},
				run: (*parser).callonLineComment1,
				expr: &seqExpr{
					pos: position{line: 387, col: 15, offset: 9018},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 387, col: 15, offset: 9018},
							val:        "//",
							ignoreCase: false,
							want:       "\"//\"",
						},
						&labeledExpr{
							pos:   position{line: 387, col: 20, offset: 9023},
							label: "comment",
							expr: &ruleRefExpr{
								pos:  position{line: 387, col: 28, offset: 9031},
								name: "LineCommentMatch",
							},
						},
					},
				},
			},
		},
		{
			name: "LineCommentMatch",
			pos:  position{line: 390, col: 1, offset: 9082},
			expr: &actionExpr{
				pos: position{line: 390, col: 20, offset: 9101},
				run: (*parser).callonLineCommentMatch1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 390, col: 20, offset: 9101},
					expr: &seqExpr{
						pos: position{line: 390, col: 21, offset: 9102},
						exprs: []any{
							&notExpr{
								pos: position{line: 390, col: 21, offset: 9102},
								expr: &charClassMatcher{
									pos:        position{line: 390, col: 22, offset: 9103},
									val:        "[\\r\\n]",
									chars:      []rune{'\r', '\n'},
									ignoreCase: false,
									inverted:   false,
								},
							},
							&anyMatcher{
								line: 390, col: 29, offset: 9110,
							},
						},
					},
				},
			},
		},
		{
			name: "UnixComment",
			pos:  position{line: 394, col: 1, offset: 9147},
			expr: &actionExpr{
				pos: position{line: 394, col: 15, offset: 9161},
				run: (*parser).callonUnixComment1,
				expr: &seqExpr{
					pos: position{line: 394, col: 15, offset: 9161},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 394, col: 15, offset: 9161},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
						&labeledExpr{
							pos:   position{line: 394, col: 19, offset: 9165},
							label: "comment",
							expr: &ruleRefExpr{
								pos:  position{line: 394, col: 27, offset: 9173},
								name: "UnixCommentMatch",
							},
						},
					},
				},
			},
		},
		{
			name: "UnixCommentMatch",
			pos:  position{line: 397, col: 1, offset: 9224},
			expr: &actionExpr{
				pos: position{line: 397, col: 20, offset: 9243},
				run: (*parser).callonUnixCommentMatch1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 397, col: 20, offset: 9243},
					expr: &seqExpr{
						pos: position{line: 397, col: 21, offset: 9244},
						exprs: []any{
							&notExpr{
								pos: position{line: 397, col: 21, offset: 9244},
								expr: &charClassMatcher{
									pos:        position{line: 397, col: 22, offset: 9245},
									val:        "[\\r\\n]",
									chars:      []rune{'\r', '\n'},
									ignoreCase: false,
									inverted:   false,
								},
							},
							&anyMatcher{
								line: 397, col: 29, offset: 9252,
							},
						},
					},
				},
			},
		},
		{
			name: "BOOL",
			pos:  position{line: 401, col: 1, offset: 9290},
			expr: &actionExpr{
				pos: position{line: 401, col: 15, offset: 9304},
				run: (*parser).callonBOOL1,
				expr: &seqExpr{
					pos: position{line: 401, col: 15, offset: 9304},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 401, col: 15, offset: 9304},
							name: "Skip",
						},
						&labeledExpr{
							pos:   position{line: 401, col: 20, offset: 9309},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 401, col: 22, offset: 9311},
								name: "BOOLToken",
							},
						},
						&notExpr{
							pos: position{line: 401, col: 39, offset: 9328},
							expr: &ruleRefExpr{
								pos:  position{line: 401, col: 40, offset: 9329},
								name: "LetterOrDigit",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 401, col: 55, offset: 9344},
							expr: &ruleRefExpr{
								pos:  position{line: 401, col: 55, offset: 9344},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "BOOLToken",
			pos:  position{line: 404, col: 1, offset: 9383},
			expr: &actionExpr{
				pos: position{line: 404, col: 14, offset: 9396},
				run: (*parser).callonBOOLToken1,
				expr: &litMatcher{
					pos:        position{line: 404, col: 14, offset: 9396},
					val:        "bool",
					ignoreCase: false,
					want:       "\"bool\"",
				},
			},
		},
		{
			name: "BYTE",
			pos:  position{line: 408, col: 1, offset: 9456},
			expr: &actionExpr{
				pos: position{line: 408, col: 15, offset: 9470},
				run: (*parser).callonBYTE1,
				expr: &seqExpr{
					pos: position{line: 408, col: 15, offset: 9470},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 408, col: 15, offset: 9470},
							name: "Skip",
						},
						&labeledExpr{
							pos:   position{line: 408, col: 20, offset: 9475},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 408, col: 22, offset: 9477},
								name: "BYTEToken",
							},
						},
						&notExpr{
							pos: position{line: 408, col: 39, offset: 9494},
							expr: &ruleRefExpr{
								pos:  position{line: 408, col: 40, offset: 9495},
								name: "LetterOrDigit",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 408, col: 55, offset: 9510},
							expr: &ruleRefExpr{
								pos:  position{line: 408, col: 55, offset: 9510},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "BYTEToken",
			pos:  position{line: 411, col: 1, offset: 9549},
			expr: &actionExpr{
				pos: position{line: 411, col: 13, offset: 9561},
				run: (*parser).callonBYTEToken1,
				expr: &litMatcher{
					pos:        position{line: 411, col: 13, offset: 9561},
					val:        "byte",
					ignoreCase: false,
					want:       "\"byte\"",
				},
			},
		},
		{
			name: "I8",
			pos:  position{line: 415, col: 1, offset: 9621},
			expr: &actionExpr{
				pos: position{line: 415, col: 15, offset: 9635},
				run: (*parser).callonI81,
				expr: &seqExpr{
					pos: position{line: 415, col: 15, offset: 9635},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 415, col: 15, offset: 9635},
							name: "Skip",
						},
						&labeledExpr{
							pos:   position{line: 415, col: 20, offset: 9640},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 415, col: 22, offset: 9642},
								name: "I8Token",
							},
						},
						&notExpr{
							pos: position{line: 415, col: 39, offset: 9659},
							expr: &ruleRefExpr{
								pos:  position{line: 415, col: 40, offset: 9660},
								name: "LetterOrDigit",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 415, col: 55, offset: 9675},
							expr: &ruleRefExpr{
								pos:  position{line: 415, col: 55, offset: 9675},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "I8Token",
			pos:  position{line: 418, col: 1, offset: 9714},
			expr: &actionExpr{
				pos: position{line: 418, col: 11, offset: 9724},
				run: (*parser).callonI8Token1,
				expr: &litMatcher{
					pos:        position{line: 418, col: 11, offset: 9724},
					val:        "i8",
					ignoreCase: false,
					want:       "\"i8\"",
				},
			},
		},
		{
			name: "I16",
			pos:  position{line: 423, col: 1, offset: 9783},
			expr: &actionExpr{
				pos: position{line: 423, col: 15, offset: 9797},
				run: (*parser).callonI161,
				expr: &seqExpr{
					pos: position{line: 423, col: 15, offset: 9797},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 423, col: 15, offset: 9797},
							name: "Skip",
						},
						&labeledExpr{
							pos:   position{line: 423, col: 20, offset: 9802},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 423, col: 22, offset: 9804},
								name: "I16Token",
							},
						},
						&notExpr{
							pos: position{line: 423, col: 39, offset: 9821},
							expr: &ruleRefExpr{
								pos:  position{line: 423, col: 40, offset: 9822},
								name: "LetterOrDigit",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 423, col: 55, offset: 9837},
							expr: &ruleRefExpr{
								pos:  position{line: 423, col: 55, offset: 9837},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "I16Token",
			pos:  position{line: 426, col: 1, offset: 9876},
			expr: &actionExpr{
				pos: position{line: 426, col: 12, offset: 9887},
				run: (*parser).callonI16Token1,
				expr: &litMatcher{
					pos:        position{line: 426, col: 12, offset: 9887},
					val:        "i16",
					ignoreCase: false,
					want:       "\"i16\"",
				},
			},
		},
		{
			name: "I32",
			pos:  position{line: 430, col: 1, offset: 9946},
			expr: &actionExpr{
				pos: position{line: 430, col: 15, offset: 9960},
				run: (*parser).callonI321,
				expr: &seqExpr{
					pos: position{line: 430, col: 15, offset: 9960},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 430, col: 15, offset: 9960},
							name: "Skip",
						},
						&labeledExpr{
							pos:   position{line: 430, col: 20, offset: 9965},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 430, col: 22, offset: 9967},
								name: "I32Token",
							},
						},
						&notExpr{
							pos: position{line: 430, col: 39, offset: 9984},
							expr: &ruleRefExpr{
								pos:  position{line: 430, col: 40, offset: 9985},
								name: "LetterOrDigit",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 430, col: 55, offset: 10000},
							expr: &ruleRefExpr{
								pos:  position{line: 430, col: 55, offset: 10000},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "I32Token",
			pos:  position{line: 433, col: 1, offset: 10039},
			expr: &actionExpr{
				pos: position{line: 433, col: 12, offset: 10050},
				run: (*parser).callonI32Token1,
				expr: &litMatcher{
					pos:        position{line: 433, col: 12, offset: 10050},
					val:        "i32",
					ignoreCase: false,
					want:       "\"i32\"",
				},
			},
		},
		{
			name: "I64",
			pos:  position{line: 437, col: 1, offset: 10109},
			expr: &actionExpr{
				pos: position{line: 437, col: 15, offset: 10123},
				run: (*parser).callonI641,
				expr: &seqExpr{
					pos: position{line: 437, col: 15, offset: 10123},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 437, col: 15, offset: 10123},
							name: "Skip",
						},
						&labeledExpr{
							pos:   position{line: 437, col: 20, offset: 10128},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 437, col: 22, offset: 10130},
								name: "I64Token",
							},
						},
						&notExpr{
							pos: position{line: 437, col: 39, offset: 10147},
							expr: &ruleRefExpr{
								pos:  position{line: 437, col: 40, offset: 10148},
								name: "LetterOrDigit",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 437, col: 55, offset: 10163},
							expr: &ruleRefExpr{
								pos:  position{line: 437, col: 55, offset: 10163},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "I64Token",
			pos:  position{line: 440, col: 1, offset: 10202},
			expr: &actionExpr{
				pos: position{line: 440, col: 12, offset: 10213},
				run: (*parser).callonI64Token1,
				expr: &litMatcher{
					pos:        position{line: 440, col: 12, offset: 10213},
					val:        "i64",
					ignoreCase: false,
					want:       "\"i64\"",
				},
			},
		},
		{
			name: "DOUBLE",
			pos:  position{line: 444, col: 1, offset: 10272},
			expr: &actionExpr{
				pos: position{line: 444, col: 15, offset: 10286},
				run: (*parser).callonDOUBLE1,
				expr: &seqExpr{
					pos: position{line: 444, col: 15, offset: 10286},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 444, col: 15, offset: 10286},
							name: "Skip",
						},
						&labeledExpr{
							pos:   position{line: 444, col: 20, offset: 10291},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 444, col: 22, offset: 10293},
								name: "DOUBLEToken",
							},
						},
						&notExpr{
							pos: position{line: 444, col: 39, offset: 10310},
							expr: &ruleRefExpr{
								pos:  position{line: 444, col: 40, offset: 10311},
								name: "LetterOrDigit",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 444, col: 55, offset: 10326},
							expr: &ruleRefExpr{
								pos:  position{line: 444, col: 55, offset: 10326},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "DOUBLEToken",
			pos:  position{line: 447, col: 1, offset: 10365},
			expr: &actionExpr{
				pos: position{line: 447, col: 15, offset: 10379},
				run: (*parser).callonDOUBLEToken1,
				expr: &litMatcher{
					pos:        position{line: 447, col: 15, offset: 10379},
					val:        "double",
					ignoreCase: false,
					want:       "\"double\"",
				},
			},
		},
		{
			name: "STRING",
			pos:  position{line: 451, col: 1, offset: 10441},
			expr: &actionExpr{
				pos: position{line: 451, col: 15, offset: 10455},
				run: (*parser).callonSTRING1,
				expr: &seqExpr{
					pos: position{line: 451, col: 15, offset: 10455},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 451, col: 15, offset: 10455},
							name: "Skip",
						},
						&labeledExpr{
							pos:   position{line: 451, col: 20, offset: 10460},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 451, col: 22, offset: 10462},
								name: "STRINGToken",
							},
						},
						&notExpr{
							pos: position{line: 451, col: 39, offset: 10479},
							expr: &ruleRefExpr{
								pos:  position{line: 451, col: 40, offset: 10480},
								name: "LetterOrDigit",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 451, col: 55, offset: 10495},
							expr: &ruleRefExpr{
								pos:  position{line: 451, col: 55, offset: 10495},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "STRINGToken",
			pos:  position{line: 454, col: 1, offset: 10534},
			expr: &actionExpr{
				pos: position{line: 454, col: 15, offset: 10548},
				run: (*parser).callonSTRINGToken1,
				expr: &litMatcher{
					pos:        position{line: 454, col: 15, offset: 10548},
					val:        "string",
					ignoreCase: false,
					want:       "\"string\"",
				},
			},
		},
		{
			name: "BINARY",
			pos:  position{line: 458, col: 1, offset: 10610},
			expr: &actionExpr{
				pos: position{line: 458, col: 15, offset: 10624},
				run: (*parser).callonBINARY1,
				expr: &seqExpr{
					pos: position{line: 458, col: 15, offset: 10624},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 458, col: 15, offset: 10624},
							name: "Skip",
						},
						&labeledExpr{
							pos:   position{line: 458, col: 20, offset: 10629},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 458, col: 22, offset: 10631},
								name: "BINARYToken",
							},
						},
						&notExpr{
							pos: position{line: 458, col: 39, offset: 10648},
							expr: &ruleRefExpr{
								pos:  position{line: 458, col: 40, offset: 10649},
								name: "LetterOrDigit",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 458, col: 55, offset: 10664},
							expr: &ruleRefExpr{
								pos:  position{line: 458, col: 55, offset: 10664},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "BINARYToken",
			pos:  position{line: 461, col: 1, offset: 10703},
			expr: &actionExpr{
				pos: position{line: 461, col: 15, offset: 10717},
				run: (*parser).callonBINARYToken1,
				expr: &litMatcher{
					pos:        position{line: 461, col: 15, offset: 10717},
					val:        "binary",
					ignoreCase: false,
					want:       "\"binary\"",
				},
			},
		},
		{
			name: "CONST",
			pos:  position{line: 465, col: 1, offset: 10779},
			expr: &actionExpr{
				pos: position{line: 465, col: 15, offset: 10793},
				run: (*parser).callonCONST1,
				expr: &seqExpr{
					pos: position{line: 465, col: 15, offset: 10793},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 465, col: 15, offset: 10793},
							name: "Skip",
						},
						&labeledExpr{
							pos:   position{line: 465, col: 20, offset: 10798},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 465, col: 22, offset: 10800},
								name: "CONSTToken",
							},
						},
						&notExpr{
							pos: position{line: 465, col: 41, offset: 10819},
							expr: &ruleRefExpr{
								pos:  position{line: 465, col: 42, offset: 10820},
								name: "LetterOrDigit",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 465, col: 57, offset: 10835},
							expr: &ruleRefExpr{
								pos:  position{line: 465, col: 57, offset: 10835},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "CONSTToken",
			pos:  position{line: 468, col: 1, offset: 10874},
			expr: &actionExpr{
				pos: position{line: 468, col: 14, offset: 10887},
				run: (*parser).callonCONSTToken1,
				expr: &litMatcher{
					pos:        position{line: 468, col: 14, offset: 10887},
					val:        "const",
					ignoreCase: false,
					want:       "\"const\"",
				},
			},
		},
		{
			name: "ONEWAY",
			pos:  position{line: 472, col: 1, offset: 10948},
			expr: &actionExpr{
				pos: position{line: 472, col: 15, offset: 10962},
				run: (*parser).callonONEWAY1,
				expr: &seqExpr{
					pos: position{line: 472, col: 15, offset: 10962},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 472, col: 15, offset: 10962},
							name: "Skip",
						},
						&labeledExpr{
							pos:   position{line: 472, col: 20, offset: 10967},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 472, col: 22, offset: 10969},
								name: "ONEWAYToken",
							},
						},
						&notExpr{
							pos: position{line: 472, col: 41, offset: 10988},
							expr: &ruleRefExpr{
								pos:  position{line: 472, col: 42, offset: 10989},
								name: "LetterOrDigit",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 472, col: 57, offset: 11004},
							expr: &ruleRefExpr{
								pos:  position{line: 472, col: 57, offset: 11004},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "ONEWAYToken",
			pos:  position{line: 475, col: 1, offset: 11043},
			expr: &actionExpr{
				pos: position{line: 475, col: 15, offset: 11057},
				run: (*parser).callonONEWAYToken1,
				expr: &litMatcher{
					pos:        position{line: 475, col: 15, offset: 11057},
					val:        "oneway",
					ignoreCase: false,
					want:       "\"oneway\"",
				},
			},
		},
		{
			name: "TYPEDEF",
			pos:  position{line: 479, col: 1, offset: 11119},
			expr: &actionExpr{
				pos: position{line: 479, col: 15, offset: 11133},
				run: (*parser).callonTYPEDEF1,
				expr: &seqExpr{
					pos: position{line: 479, col: 15, offset: 11133},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 479, col: 15, offset: 11133},
							name: "Skip",
						},
						&litMatcher{
							pos:        position{line: 479, col: 20, offset: 11138},
							val:        "typedef",
							ignoreCase: false,
							want:       "\"typedef\"",
						},
						&notExpr{
							pos: position{line: 479, col: 36, offset: 11154},
							expr: &ruleRefExpr{
								pos:  position{line: 479, col: 37, offset: 11155},
								name: "LetterOrDigit",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 479, col: 52, offset: 11170},
							expr: &ruleRefExpr{
								pos:  position{line: 479, col: 52, offset: 11170},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "MAP",
			pos:  position{line: 482, col: 1, offset: 11205},
			expr: &actionExpr{
				pos: position{line: 482, col: 15, offset: 11219},
				run: (*parser).callonMAP1,
				expr: &seqExpr{
					pos: position{line: 482, col: 15, offset: 11219},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 482, col: 15, offset: 11219},
							name: "Skip",
						},
						&labeledExpr{
							pos:   position{line: 482, col: 20, offset: 11224},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 482, col: 22, offset: 11226},
								name: "MAPToken",
							},
						},
						&notExpr{
							pos: position{line: 482, col: 41, offset: 11245},
							expr: &ruleRefExpr{
								pos:  position{line: 482, col: 42, offset: 11246},
								name: "LetterOrDigit",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 482, col: 57, offset: 11261},
							expr: &ruleRefExpr{
								pos:  position{line: 482, col: 57, offset: 11261},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "MAPToken",
			pos:  position{line: 485, col: 1, offset: 11300},
			expr: &actionExpr{
				pos: position{line: 485, col: 12, offset: 11311},
				run: (*parser).callonMAPToken1,
				expr: &litMatcher{
					pos:        position{line: 485, col: 12, offset: 11311},
					val:        "map",
					ignoreCase: false,
					want:       "\"map\"",
				},
			},
		},
		{
			name: "SET",
			pos:  position{line: 489, col: 1, offset: 11370},
			expr: &actionExpr{
				pos: position{line: 489, col: 15, offset: 11384},
				run: (*parser).callonSET1,
				expr: &seqExpr{
					pos: position{line: 489, col: 15, offset: 11384},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 489, col: 15, offset: 11384},
							name: "Skip",
						},
						&labeledExpr{
							pos:   position{line: 489, col: 20, offset: 11389},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 489, col: 22, offset: 11391},
								name: "SETToken",
							},
						},
						&notExpr{
							pos: position{line: 489, col: 41, offset: 11410},
							expr: &ruleRefExpr{
								pos:  position{line: 489, col: 42, offset: 11411},
								name: "LetterOrDigit",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 489, col: 57, offset: 11426},
							expr: &ruleRefExpr{
								pos:  position{line: 489, col: 57, offset: 11426},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "SETToken",
			pos:  position{line: 492, col: 1, offset: 11465},
			expr: &actionExpr{
				pos: position{line: 492, col: 12, offset: 11476},
				run: (*parser).callonSETToken1,
				expr: &litMatcher{
					pos:        position{line: 492, col: 12, offset: 11476},
					val:        "set",
					ignoreCase: false,
					want:       "\"set\"",
				},
			},
		},
		{
			name: "LIST",
			pos:  position{line: 496, col: 1, offset: 11535},
			expr: &actionExpr{
				pos: position{line: 496, col: 15, offset: 11549},
				run: (*parser).callonLIST1,
				expr: &seqExpr{
					pos: position{line: 496, col: 15, offset: 11549},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 496, col: 15, offset: 11549},
							name: "Skip",
						},
						&labeledExpr{
							pos:   position{line: 496, col: 20, offset: 11554},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 496, col: 22, offset: 11556},
								name: "ListToken",
							},
						},
						&notExpr{
							pos: position{line: 496, col: 41, offset: 11575},
							expr: &ruleRefExpr{
								pos:  position{line: 496, col: 42, offset: 11576},
								name: "LetterOrDigit",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 496, col: 57, offset: 11591},
							expr: &ruleRefExpr{
								pos:  position{line: 496, col: 57, offset: 11591},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "ListToken",
			pos:  position{line: 499, col: 1, offset: 11630},
			expr: &actionExpr{
				pos: position{line: 499, col: 13, offset: 11642},
				run: (*parser).callonListToken1,
				expr: &litMatcher{
					pos:        position{line: 499, col: 13, offset: 11642},
					val:        "list",
					ignoreCase: false,
					want:       "\"list\"",
				},
			},
		},
		{
			name: "VOID",
			pos:  position{line: 503, col: 1, offset: 11702},
			expr: &actionExpr{
				pos: position{line: 503, col: 15, offset: 11716},
				run: (*parser).callonVOID1,
				expr: &seqExpr{
					pos: position{line: 503, col: 15, offset: 11716},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 503, col: 15, offset: 11716},
							name: "Skip",
						},
						&litMatcher{
							pos:        position{line: 503, col: 20, offset: 11721},
							val:        "void",
							ignoreCase: false,
							want:       "\"void\"",
						},
						&notExpr{
							pos: position{line: 503, col: 36, offset: 11737},
							expr: &ruleRefExpr{
								pos:  position{line: 503, col: 37, offset: 11738},
								name: "LetterOrDigit",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 503, col: 52, offset: 11753},
							expr: &ruleRefExpr{
								pos:  position{line: 503, col: 52, offset: 11753},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "THROWS",
			pos:  position{line: 506, col: 1, offset: 11785},
			expr: &actionExpr{
				pos: position{line: 506, col: 15, offset: 11799},
				run: (*parser).callonTHROWS1,
				expr: &seqExpr{
					pos: position{line: 506, col: 15, offset: 11799},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 506, col: 15, offset: 11799},
							name: "Skip",
						},
						&litMatcher{
							pos:        position{line: 506, col: 20, offset: 11804},
							val:        "throws",
							ignoreCase: false,
							want:       "\"throws\"",
						},
						&notExpr{
							pos: position{line: 506, col: 36, offset: 11820},
							expr: &ruleRefExpr{
								pos:  position{line: 506, col: 37, offset: 11821},
								name: "LetterOrDigit",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 506, col: 52, offset: 11836},
							expr: &ruleRefExpr{
								pos:  position{line: 506, col: 52, offset: 11836},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "EXCEPTION",
			pos:  position{line: 509, col: 1, offset: 11870},
			expr: &actionExpr{
				pos: position{line: 509, col: 15, offset: 11884},
				run: (*parser).callonEXCEPTION1,
				expr: &seqExpr{
					pos: position{line: 509, col: 15, offset: 11884},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 509, col: 15, offset: 11884},
							name: "Skip",
						},
						&litMatcher{
							pos:        position{line: 509, col: 20, offset: 11889},
							val:        "exception",
							ignoreCase: false,
							want:       "\"exception\"",
						},
						&notExpr{
							pos: position{line: 509, col: 36, offset: 11905},
							expr: &ruleRefExpr{
								pos:  position{line: 509, col: 37, offset: 11906},
								name: "LetterOrDigit",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 509, col: 52, offset: 11921},
							expr: &ruleRefExpr{
								pos:  position{line: 509, col: 52, offset: 11921},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "EXTENDS",
			pos:  position{line: 512, col: 1, offset: 11958},
			expr: &actionExpr{
				pos: position{line: 512, col: 15, offset: 11972},
				run: (*parser).callonEXTENDS1,
				expr: &seqExpr{
					pos: position{line: 512, col: 15, offset: 11972},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 512, col: 15, offset: 11972},
							name: "Skip",
						},
						&litMatcher{
							pos:        position{line: 512, col: 20, offset: 11977},
							val:        "extends",
							ignoreCase: false,
							want:       "\"extends\"",
						},
						&notExpr{
							pos: position{line: 512, col: 36, offset: 11993},
							expr: &ruleRefExpr{
								pos:  position{line: 512, col: 37, offset: 11994},
								name: "LetterOrDigit",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 512, col: 52, offset: 12009},
							expr: &ruleRefExpr{
								pos:  position{line: 512, col: 52, offset: 12009},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "SERVICE",
			pos:  position{line: 515, col: 1, offset: 12044},
			expr: &actionExpr{
				pos: position{line: 515, col: 15, offset: 12058},
				run: (*parser).callonSERVICE1,
				expr: &seqExpr{
					pos: position{line: 515, col: 15, offset: 12058},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 515, col: 15, offset: 12058},
							name: "Skip",
						},
						&litMatcher{
							pos:        position{line: 515, col: 20, offset: 12063},
							val:        "service",
							ignoreCase: false,
							want:       "\"service\"",
						},
						&notExpr{
							pos: position{line: 515, col: 36, offset: 12079},
							expr: &ruleRefExpr{
								pos:  position{line: 515, col: 37, offset: 12080},
								name: "LetterOrDigit",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 515, col: 52, offset: 12095},
							expr: &ruleRefExpr{
								pos:  position{line: 515, col: 52, offset: 12095},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "STRUCT",
			pos:  position{line: 518, col: 1, offset: 12130},
			expr: &actionExpr{
				pos: position{line: 518, col: 15, offset: 12144},
				run: (*parser).callonSTRUCT1,
				expr: &seqExpr{
					pos: position{line: 518, col: 15, offset: 12144},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 518, col: 15, offset: 12144},
							name: "Skip",
						},
						&litMatcher{
							pos:        position{line: 518, col: 20, offset: 12149},
							val:        "struct",
							ignoreCase: false,
							want:       "\"struct\"",
						},
						&notExpr{
							pos: position{line: 518, col: 36, offset: 12165},
							expr: &ruleRefExpr{
								pos:  position{line: 518, col: 37, offset: 12166},
								name: "LetterOrDigit",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 518, col: 52, offset: 12181},
							expr: &ruleRefExpr{
								pos:  position{line: 518, col: 52, offset: 12181},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "UNION",
			pos:  position{line: 521, col: 1, offset: 12215},
			expr: &actionExpr{
				pos: position{line: 521, col: 15, offset: 12229},
				run: (*parser).callonUNION1,
				expr: &seqExpr{
					pos: position{line: 521, col: 15, offset: 12229},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 521, col: 15, offset: 12229},
							name: "Skip",
						},
						&litMatcher{
							pos:        position{line: 521, col: 20, offset: 12234},
							val:        "union",
							ignoreCase: false,
							want:       "\"union\"",
						},
						&notExpr{
							pos: position{line: 521, col: 36, offset: 12250},
							expr: &ruleRefExpr{
								pos:  position{line: 521, col: 37, offset: 12251},
								name: "LetterOrDigit",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 521, col: 52, offset: 12266},
							expr: &ruleRefExpr{
								pos:  position{line: 521, col: 52, offset: 12266},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "ENUM",
			pos:  position{line: 524, col: 1, offset: 12299},
			expr: &actionExpr{
				pos: position{line: 524, col: 15, offset: 12313},
				run: (*parser).callonENUM1,
				expr: &seqExpr{
					pos: position{line: 524, col: 15, offset: 12313},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 524, col: 15, offset: 12313},
							name: "Skip",
						},
						&litMatcher{
							pos:        position{line: 524, col: 20, offset: 12318},
							val:        "enum",
							ignoreCase: false,
							want:       "\"enum\"",
						},
						&notExpr{
							pos: position{line: 524, col: 36, offset: 12334},
							expr: &ruleRefExpr{
								pos:  position{line: 524, col: 37, offset: 12335},
								name: "LetterOrDigit",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 524, col: 52, offset: 12350},
							expr: &ruleRefExpr{
								pos:  position{line: 524, col: 52, offset: 12350},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "INCLUDE",
			pos:  position{line: 527, col: 1, offset: 12382},
			expr: &actionExpr{
				pos: position{line: 527, col: 15, offset: 12396},
				run: (*parser).callonINCLUDE1,
				expr: &seqExpr{
					pos: position{line: 527, col: 15, offset: 12396},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 527, col: 15, offset: 12396},
							name: "Skip",
						},
						&litMatcher{
							pos:        position{line: 527, col: 20, offset: 12401},
							val:        "include",
							ignoreCase: false,
							want:       "\"include\"",
						},
						&notExpr{
							pos: position{line: 527, col: 36, offset: 12417},
							expr: &ruleRefExpr{
								pos:  position{line: 527, col: 37, offset: 12418},
								name: "LetterOrDigit",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 527, col: 52, offset: 12433},
							expr: &ruleRefExpr{
								pos:  position{line: 527, col: 52, offset: 12433},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "CPPINCLUDE",
			pos:  position{line: 530, col: 1, offset: 12468},
			expr: &actionExpr{
				pos: position{line: 530, col: 15, offset: 12482},
				run: (*parser).callonCPPINCLUDE1,
				expr: &seqExpr{
					pos: position{line: 530, col: 15, offset: 12482},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 530, col: 15, offset: 12482},
							name: "Skip",
						},
						&litMatcher{
							pos:        position{line: 530, col: 20, offset: 12487},
							val:        "cpp_include",
							ignoreCase: false,
							want:       "\"cpp_include\"",
						},
						&notExpr{
							pos: position{line: 530, col: 36, offset: 12503},
							expr: &ruleRefExpr{
								pos:  position{line: 530, col: 37, offset: 12504},
								name: "LetterOrDigit",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 530, col: 52, offset: 12519},
							expr: &ruleRefExpr{
								pos:  position{line: 530, col: 52, offset: 12519},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "NAMESPACE",
			pos:  position{line: 533, col: 1, offset: 12558},
			expr: &actionExpr{
				pos: position{line: 533, col: 15, offset: 12572},
				run: (*parser).callonNAMESPACE1,
				expr: &seqExpr{
					pos: position{line: 533, col: 15, offset: 12572},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 533, col: 15, offset: 12572},
							name: "Skip",
						},
						&litMatcher{
							pos:        position{line: 533, col: 20, offset: 12577},
							val:        "namespace",
							ignoreCase: false,
							want:       "\"namespace\"",
						},
						&notExpr{
							pos: position{line: 533, col: 36, offset: 12593},
							expr: &ruleRefExpr{
								pos:  position{line: 533, col: 37, offset: 12594},
								name: "LetterOrDigit",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 533, col: 52, offset: 12609},
							expr: &ruleRefExpr{
								pos:  position{line: 533, col: 52, offset: 12609},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "CPPTYPE",
			pos:  position{line: 536, col: 1, offset: 12646},
			expr: &actionExpr{
				pos: position{line: 536, col: 15, offset: 12660},
				run: (*parser).callonCPPTYPE1,
				expr: &seqExpr{
					pos: position{line: 536, col: 15, offset: 12660},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 536, col: 15, offset: 12660},
							name: "Skip",
						},
						&litMatcher{
							pos:        position{line: 536, col: 20, offset: 12665},
							val:        "cpp_type",
							ignoreCase: false,
							want:       "\"cpp_type\"",
						},
						&notExpr{
							pos: position{line: 536, col: 36, offset: 12681},
							expr: &ruleRefExpr{
								pos:  position{line: 536, col: 37, offset: 12682},
								name: "LetterOrDigit",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 536, col: 52, offset: 12697},
							expr: &ruleRefExpr{
								pos:  position{line: 536, col: 52, offset: 12697},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "LBRK",
			pos:  position{line: 539, col: 1, offset: 12733},
			expr: &actionExpr{
				pos: position{line: 539, col: 15, offset: 12747},
				run: (*parser).callonLBRK1,
				expr: &seqExpr{
					pos: position{line: 539, col: 15, offset: 12747},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 539, col: 15, offset: 12747},
							name: "Skip",
						},
						&litMatcher{
							pos:        position{line: 539, col: 20, offset: 12752},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 539, col: 28, offset: 12760},
							expr: &ruleRefExpr{
								pos:  position{line: 539, col: 28, offset: 12760},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "RBRK",
			pos:  position{line: 542, col: 1, offset: 12789},
			expr: &actionExpr{
				pos: position{line: 542, col: 15, offset: 12803},
				run: (*parser).callonRBRK1,
				expr: &seqExpr{
					pos: position{line: 542, col: 15, offset: 12803},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 542, col: 15, offset: 12803},
							name: "Skip",
						},
						&litMatcher{
							pos:        position{line: 542, col: 20, offset: 12808},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 542, col: 28, offset: 12816},
							expr: &ruleRefExpr{
								pos:  position{line: 542, col: 28, offset: 12816},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "LCUR",
			pos:  position{line: 546, col: 1, offset: 12872},
			expr: &actionExpr{
				pos: position{line: 546, col: 14, offset: 12885},
				run: (*parser).callonLCUR1,
				expr: &seqExpr{
					pos: position{line: 546, col: 14, offset: 12885},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 546, col: 14, offset: 12885},
							name: "Skip",
						},
						&labeledExpr{
							pos:   position{line: 546, col: 19, offset: 12890},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 546, col: 21, offset: 12892},
								name: "LCURToken",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 546, col: 35, offset: 12906},
							expr: &ruleRefExpr{
								pos:  position{line: 546, col: 35, offset: 12906},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "RCUR",
			pos:  position{line: 549, col: 1, offset: 12942},
			expr: &actionExpr{
				pos: position{line: 549, col: 14, offset: 12955},
				run: (*parser).callonRCUR1,
				expr: &seqExpr{
					pos: position{line: 549, col: 14, offset: 12955},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 549, col: 14, offset: 12955},
							name: "Skip",
						},
						&labeledExpr{
							pos:   position{line: 549, col: 19, offset: 12960},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 549, col: 21, offset: 12962},
								name: "RCURToken",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 549, col: 35, offset: 12976},
							expr: &ruleRefExpr{
								pos:  position{line: 549, col: 35, offset: 12976},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "LCURToken",
			pos:  position{line: 552, col: 1, offset: 13012},
			expr: &actionExpr{
				pos: position{line: 552, col: 13, offset: 13024},
				run: (*parser).callonLCURToken1,
				expr: &litMatcher{
					pos:        position{line: 552, col: 13, offset: 13024},
					val:        "{",
					ignoreCase: false,
					want:       "\"{\"",
				},
			},
		},
		{
			name: "RCURToken",
			pos:  position{line: 555, col: 1, offset: 13060},
			expr: &choiceExpr{
				pos: position{line: 555, col: 13, offset: 13072},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 555, col: 13, offset: 13072},
						run: (*parser).callonRCURToken2,
						expr: &litMatcher{
							pos:        position{line: 555, col: 13, offset: 13072},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
					&throwExpr{
						pos:   position{line: 557, col: 5, offset: 13110},
						label: "errRCUR",
					},
				},
			},
		},
		{
			name: "EQUAL",
			pos:  position{line: 558, col: 1, offset: 13121},
			expr: &actionExpr{
				pos: position{line: 558, col: 15, offset: 13135},
				run: (*parser).callonEQUAL1,
				expr: &seqExpr{
					pos: position{line: 558, col: 15, offset: 13135},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 558, col: 15, offset: 13135},
							name: "Skip",
						},
						&litMatcher{
							pos:        position{line: 558, col: 20, offset: 13140},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 558, col: 28, offset: 13148},
							expr: &ruleRefExpr{
								pos:  position{line: 558, col: 28, offset: 13148},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "LPOINT",
			pos:  position{line: 561, col: 1, offset: 13177},
			expr: &actionExpr{
				pos: position{line: 561, col: 15, offset: 13191},
				run: (*parser).callonLPOINT1,
				expr: &seqExpr{
					pos: position{line: 561, col: 15, offset: 13191},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 561, col: 15, offset: 13191},
							name: "Skip",
						},
						&litMatcher{
							pos:        position{line: 561, col: 20, offset: 13196},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 561, col: 28, offset: 13204},
							expr: &ruleRefExpr{
								pos:  position{line: 561, col: 28, offset: 13204},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "RPOINT",
			pos:  position{line: 564, col: 1, offset: 13233},
			expr: &actionExpr{
				pos: position{line: 564, col: 15, offset: 13247},
				run: (*parser).callonRPOINT1,
				expr: &seqExpr{
					pos: position{line: 564, col: 15, offset: 13247},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 564, col: 15, offset: 13247},
							name: "Skip",
						},
						&litMatcher{
							pos:        position{line: 564, col: 20, offset: 13252},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 564, col: 28, offset: 13260},
							expr: &ruleRefExpr{
								pos:  position{line: 564, col: 28, offset: 13260},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "COMMA",
			pos:  position{line: 567, col: 1, offset: 13289},
			expr: &actionExpr{
				pos: position{line: 567, col: 15, offset: 13303},
				run: (*parser).callonCOMMA1,
				expr: &seqExpr{
					pos: position{line: 567, col: 15, offset: 13303},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 567, col: 15, offset: 13303},
							name: "Skip",
						},
						&litMatcher{
							pos:        position{line: 567, col: 20, offset: 13308},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 567, col: 28, offset: 13316},
							expr: &ruleRefExpr{
								pos:  position{line: 567, col: 28, offset: 13316},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "LPAR",
			pos:  position{line: 570, col: 1, offset: 13345},
			expr: &actionExpr{
				pos: position{line: 570, col: 15, offset: 13359},
				run: (*parser).callonLPAR1,
				expr: &seqExpr{
					pos: position{line: 570, col: 15, offset: 13359},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 570, col: 15, offset: 13359},
							name: "Skip",
						},
						&litMatcher{
							pos:        position{line: 570, col: 20, offset: 13364},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 570, col: 28, offset: 13372},
							expr: &ruleRefExpr{
								pos:  position{line: 570, col: 28, offset: 13372},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "RPAR",
			pos:  position{line: 573, col: 1, offset: 13401},
			expr: &actionExpr{
				pos: position{line: 573, col: 15, offset: 13415},
				run: (*parser).callonRPAR1,
				expr: &seqExpr{
					pos: position{line: 573, col: 15, offset: 13415},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 573, col: 15, offset: 13415},
							name: "Skip",
						},
						&litMatcher{
							pos:        position{line: 573, col: 20, offset: 13420},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 573, col: 28, offset: 13428},
							expr: &ruleRefExpr{
								pos:  position{line: 573, col: 28, offset: 13428},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "COLON",
			pos:  position{line: 576, col: 1, offset: 13457},
			expr: &actionExpr{
				pos: position{line: 576, col: 15, offset: 13471},
				run: (*parser).callonCOLON1,
				expr: &seqExpr{
					pos: position{line: 576, col: 15, offset: 13471},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 576, col: 15, offset: 13471},
							name: "Skip",
						},
						&litMatcher{
							pos:        position{line: 576, col: 20, offset: 13476},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 576, col: 28, offset: 13484},
							expr: &ruleRefExpr{
								pos:  position{line: 576, col: 28, offset: 13484},
								name: "Indent",
							},
						},
					},
				},
			},
		},
		{
			name: "DefinitionStart",
			pos:  position{line: 580, col: 1, offset: 13514},
			expr: &litMatcher{
				pos:        position{line: 580, col: 19, offset: 13532},
				val:        "struct",
				ignoreCase: false,
				want:       "\"struct\"",
			},
		},
		{
			name: "ErrField",
			pos:  position{line: 582, col: 1, offset: 13542},
			expr: &actionExpr{
				pos: position{line: 582, col: 12, offset: 13553},
				run: (*parser).callonErrField1,
				expr: &seqExpr{
					pos: position{line: 582, col: 12, offset: 13553},
					exprs: []any{
						&stateCodeExpr{
							pos: position{line: 582, col: 12, offset: 13553},
							run: (*parser).callonErrField3,
						},
						&zeroOrMoreExpr{
							pos: position{line: 584, col: 3, offset: 13590},
							expr: &seqExpr{
								pos: position{line: 584, col: 5, offset: 13592},
								exprs: []any{
									&notExpr{
										pos: position{line: 584, col: 5, offset: 13592},
										expr: &choiceExpr{
											pos: position{line: 584, col: 7, offset: 13594},
											alternatives: []any{
												&ruleRefExpr{
													pos:  position{line: 584, col: 7, offset: 13594},
													name: "Field",
												},
												&seqExpr{
													pos: position{line: 584, col: 16, offset: 13603},
													exprs: []any{
														&ruleRefExpr{
															pos:  position{line: 584, col: 16, offset: 13603},
															name: "Skip",
														},
														&litMatcher{
															pos:        position{line: 584, col: 21, offset: 13608},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
														&zeroOrMoreExpr{
															pos: position{line: 584, col: 25, offset: 13612},
															expr: &ruleRefExpr{
																pos:  position{line: 584, col: 25, offset: 13612},
																name: "Indent",
															},
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 584, col: 36, offset: 13623},
													name: "STRUCT",
												},
											},
										},
									},
									&anyMatcher{
										line: 584, col: 45, offset: 13632,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ErrStructIdentifier",
			pos:  position{line: 588, col: 1, offset: 13695},
			expr: &actionExpr{
				pos: position{line: 588, col: 23, offset: 13717},
				run: (*parser).callonErrStructIdentifier1,
				expr: &seqExpr{
					pos: position{line: 588, col: 23, offset: 13717},
					exprs: []any{
						&stateCodeExpr{
							pos: position{line: 588, col: 23, offset: 13717},
							run: (*parser).callonErrStructIdentifier3,
						},
						&zeroOrMoreExpr{
							pos: position{line: 590, col: 3, offset: 13759},
							expr: &seqExpr{
								pos: position{line: 590, col: 5, offset: 13761},
								exprs: []any{
									&notExpr{
										pos: position{line: 590, col: 5, offset: 13761},
										expr: &litMatcher{
											pos:        position{line: 590, col: 6, offset: 13762},
											val:        "{",
											ignoreCase: false,
											want:       "\"{\"",
										},
									},
									&anyMatcher{
										line: 590, col: 10, offset: 13766,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ErrStructRCUR",
			pos:  position{line: 597, col: 1, offset: 13950},
			expr: &actionExpr{
				pos: position{line: 597, col: 17, offset: 13966},
				run: (*parser).callonErrStructRCUR1,
				expr: &seqExpr{
					pos: position{line: 597, col: 17, offset: 13966},
					exprs: []any{
						&stateCodeExpr{
							pos: position{line: 597, col: 17, offset: 13966},
							run: (*parser).callonErrStructRCUR3,
						},
						&zeroOrMoreExpr{
							pos: position{line: 599, col: 3, offset: 14007},
							expr: &seqExpr{
								pos: position{line: 599, col: 5, offset: 14009},
								exprs: []any{
									&notExpr{
										pos: position{line: 599, col: 5, offset: 14009},
										expr: &ruleRefExpr{
											pos:  position{line: 599, col: 6, offset: 14010},
											name: "STRUCT",
										},
									},
									&anyMatcher{
										line: 599, col: 13, offset: 14017,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ErrStructLCUR",
			pos:  position{line: 603, col: 1, offset: 14174},
			expr: &actionExpr{
				pos: position{line: 603, col: 17, offset: 14190},
				run: (*parser).callonErrStructLCUR1,
				expr: &seqExpr{
					pos: position{line: 603, col: 17, offset: 14190},
					exprs: []any{
						&stateCodeExpr{
							pos: position{line: 603, col: 17, offset: 14190},
							run: (*parser).callonErrStructLCUR3,
						},
						&zeroOrMoreExpr{
							pos: position{line: 605, col: 3, offset: 14231},
							expr: &seqExpr{
								pos: position{line: 605, col: 5, offset: 14233},
								exprs: []any{
									&notExpr{
										pos: position{line: 605, col: 5, offset: 14233},
										expr: &litMatcher{
											pos:        position{line: 605, col: 6, offset: 14234},
											val:        "}",
											ignoreCase: false,
											want:       "\"}\"",
										},
									},
									&anyMatcher{
										line: 605, col: 10, offset: 14238,
									},
								},
							},
						},
					},
				},
			},
		},
	},
}

func (c *current) onDocument1(def any) (any, error) {
	return NewDocument(toDefinitionSlice(def)), nil
}

func (p *parser) callonDocument1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocument1(stack["def"])
}

func (c *current) onDefinition1(comments, v any) (any, error) {
	def := v.(Definition)
	def.SetComments(comments.(string))
	return def, nil
}

func (p *parser) callonDefinition1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefinition1(stack["comments"], stack["v"])
}

func (c *current) onConst1(t, name, v any) (any, error) {
	return NewConst(name.(*Identifier), t.(*FieldType), v.(*ConstValue), ""), nil
}

func (p *parser) callonConst1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConst1(stack["t"], stack["name"], stack["v"])
}

func (c *current) onTypedef1(t, alias any) (any, error) {
	return NewTypedef(t.(*FieldType), alias.(*Identifier)), nil
}

func (p *parser) callonTypedef1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypedef1(stack["t"], stack["alias"])
}

func (c *current) onEnum1(name, v any) (any, error) {
	values := toEnumValueSlice(v)
	return NewEnum(name.(*Identifier), values), nil
}

func (p *parser) callonEnum1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEnum1(stack["name"], stack["v"])
}

func (c *current) onService1() (any, error) {
	return NewService(), nil
}

func (p *parser) callonService1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onService1()
}

func (c *current) onStruct4(id, fields any) (any, error) {
	return NewStruct(id.(*Identifier), toFieldSlice(fields)), nil
}

func (p *parser) callonStruct4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStruct4(stack["id"], stack["fields"])
}

func (c *current) onUnion1() (any, error) {
	return NewUnion(), nil
}

func (p *parser) callonUnion1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnion1()
}

func (c *current) onException1() (any, error) {
	return NewException(), nil
}

func (p *parser) callonException1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onException1()
}

func (c *current) onFieldWithThrow3(x any) (any, error) {
	return x.([]any)[1], nil
}

func (p *parser) callonFieldWithThrow3() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldWithThrow3(stack["x"])
}

func (c *current) onField1(comments, index, required, fieldType, id, value, lineComments any) (any, error) {
	var constV *ConstValue
	if value != nil {
		constV = value.([]interface{})[1].(*ConstValue)
	}
	var requiredV *Required
	if required != nil {
		requiredV = required.(*Required)
	}

	return NewField(comments.(string), lineComments.(string), int(index.(int64)), requiredV, fieldType.(*FieldType), id.(*Identifier), constV), nil
}

func (p *parser) callonField1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onField1(stack["comments"], stack["index"], stack["required"], stack["fieldType"], stack["id"], stack["value"], stack["lineComments"])
}

func (c *current) onFieldId1(i any) (any, error) {
	return i, nil
}

func (p *parser) callonFieldId1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldId1(stack["i"])
}

func (c *current) onFieldReq1(r any) (any, error) {
	if r == nil {
		return nil, nil
	}
	return r.(*Required), nil
}

func (p *parser) callonFieldReq1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldReq1(stack["r"])
}

func (c *current) onIsRequired1(v any) (any, error) {
	if v == nil {
		return nil, nil
	}
	return NewRequired(string(v.([]byte)) == "required", c.pos), nil
}

func (p *parser) callonIsRequired1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIsRequired1(stack["v"])
}

func (c *current) onFieldType1(v any) (any, error) {
	return v.(*FieldType), nil
}

func (p *parser) callonFieldType1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldType1(stack["v"])
}

func (c *current) onIdentifierType1(v any) (any, error) {
	return v.(*Identifier).ToFieldType(), nil
}

func (p *parser) callonIdentifierType1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierType1(stack["v"])
}

func (c *current) onBaseType1(v any) (any, error) {
	return NewFieldType(v.(*TypeName), nil, nil), nil
}

func (p *parser) callonBaseType1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBaseType1(stack["v"])
}

func (c *current) onContainerType1(v any) (any, error) {
	return v.(*FieldType), nil
}

func (p *parser) callonContainerType1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContainerType1(stack["v"])
}

func (c *current) onMapType1(t, key, value any) (any, error) {
	return NewFieldType(t.(*TypeName), key.(*FieldType), value.(*FieldType)), nil
}

func (p *parser) callonMapType1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMapType1(stack["t"], stack["key"], stack["value"])
}

func (c *current) onSetType1(t, key any) (any, error) {
	return NewFieldType(t.(*TypeName), key.(*FieldType), nil), nil
}

func (p *parser) callonSetType1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSetType1(stack["t"], stack["key"])
}

func (c *current) onListType1(t, key any) (any, error) {
	return NewFieldType(t.(*TypeName), key.(*FieldType), nil), nil
}

func (p *parser) callonListType1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListType1(stack["t"], stack["key"])
}

func (c *current) onConstValue1(v any) (any, error) {
	if str, ok := v.(string); ok {
		fmt.Println("constvalue string", v)
		return NewConstValue("string", str), nil
	}
	fmt.Println("constvalue", v)
	return v.(*ConstValue), nil
}

func (p *parser) callonConstValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstValue1(stack["v"])
}

func (c *current) onIdentifierConst1(id any) (any, error) {
	return NewConstValue("identifier", id.(*Identifier).Name), nil
}

func (p *parser) callonIdentifierConst1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierConst1(stack["id"])
}

func (c *current) onIntConstant1(v any) (any, error) {
	return v.(*ConstValue), nil
}

func (p *parser) callonIntConstant1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIntConstant1(stack["v"])
}

func (c *current) onHexIntConstant1() (any, error) {
	v, err := strconv.ParseInt(string(c.text), 16, 64)
	if err != nil {
		return nil, err
	}

	return NewConstValue("i64", v), nil
}

func (p *parser) callonHexIntConstant1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHexIntConstant1()
}

func (c *current) onOctIntConstant1() (any, error) {
	v, err := strconv.ParseInt(string(c.text), 8, 64)
	if err != nil {
		return nil, err
	}
	return NewConstValue("i64", v), nil
}

func (p *parser) callonOctIntConstant1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOctIntConstant1()
}

func (c *current) onNormalIntConstant1() (any, error) {
	v, err := strconv.ParseInt(string(c.text), 10, 64)
	if err != nil {
		return nil, err
	}
	return NewConstValue("i64", v), nil
}

func (p *parser) callonNormalIntConstant1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalIntConstant1()
}

func (c *current) onFieldIndex2() (any, error) {
	v, err := strconv.ParseInt(string(c.text), 10, 64)
	if err != nil {
		return nil, err
	}
	return v, nil
}

func (p *parser) callonFieldIndex2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldIndex2()
}

func (c *current) onDoubleConstant1(v any) (any, error) {
	v, err := strconv.ParseFloat(string(c.text), 64)
	if err != nil {
		return nil, err
	}
	return NewConstValue("double", v), nil

}

func (p *parser) callonDoubleConstant1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleConstant1(stack["v"])
}

func (c *current) onConstList1(v any) (any, error) {
	fmt.Println("constlist")
	return NewConstValue("list", toConstValueSlice(v)), nil
}

func (p *parser) callonConstList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstList1(stack["v"])
}

func (c *current) onConstListItem1(v any) (any, error) {
	fmt.Println("ConstListItem", v)
	return v.(*ConstValue), nil
}

func (p *parser) callonConstListItem1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstListItem1(stack["v"])
}

func (c *current) onConstMap1(v any) (any, error) {
	return NewConstValue("map", toConstValueSlice(v)), nil
}

func (p *parser) callonConstMap1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstMap1(stack["v"])
}

func (c *current) onConstMapItem1(key, value any) (any, error) {
	return NewMapConstValue(key.(*ConstValue), value.(*ConstValue)), nil
}

func (p *parser) callonConstMapItem1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstMapItem1(stack["key"], stack["value"])
}

func (c *current) onEscapeLiteralChar1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonEscapeLiteralChar1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapeLiteralChar1()
}

func (c *current) onLiteral1(l any) (any, error) {
	return l, nil
}

func (p *parser) callonLiteral1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteral1(stack["l"])
}

func (c *current) onLiteral11(t any) (any, error) {
	strs := toStringSlice(t)
	return strings.Join(strs, ""), nil
}

func (p *parser) callonLiteral11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteral11(stack["t"])
}

func (c *current) onLiteral21(t any) (any, error) {
	strs := toStringSlice(t)
	return strings.Join(strs, ""), nil
}

func (p *parser) callonLiteral21() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteral21(stack["t"])
}

func (c *current) onStructIdentifier2(id any) (any, error) {
	return id.(*Identifier), nil
}

func (p *parser) callonStructIdentifier2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStructIdentifier2(stack["id"])
}

func (c *current) onIdentifier1(id any) (any, error) {
	return id.(*Identifier), nil
}

func (p *parser) callonIdentifier1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier1(stack["id"])
}

func (c *current) onIdentifierToken1() (any, error) {
	return NewIdentifier(string(c.text), c.pos), nil
}

func (p *parser) callonIdentifierToken1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierToken1()
}

func (c *current) onLetter4() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonLetter4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetter4()
}

func (c *current) onLetterOrDigit5() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonLetterOrDigit5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetterOrDigit5()
}

func (c *current) onDigit1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonDigit1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDigit1()
}

func (c *current) onSkip1(comments any) (any, error) {
	return strings.Join(toStringSlice(comments), "\n"), nil
}

func (p *parser) callonSkip1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSkip1(stack["comments"])
}

func (c *current) onSkipLine1(comments any) (any, error) {
	return strings.Join(toStringSlice(comments), "\n"), nil
}

func (p *parser) callonSkipLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSkipLine1(stack["comments"])
}

func (c *current) onSpace1() (any, error) {
	return "", nil
}

func (p *parser) callonSpace1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpace1()
}

func (c *current) onIndent1() (any, error) {
	return "", nil
}

func (p *parser) callonIndent1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndent1()
}

func (c *current) onComment1(v any) (any, error) {
	return v.(string), nil
}

func (p *parser) callonComment1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComment1(stack["v"])
}

func (c *current) onLongComment1(comment any) (any, error) {
	return comment.(string), nil
}

func (p *parser) callonLongComment1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongComment1(stack["comment"])
}

func (c *current) onLongCommentMatch1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonLongCommentMatch1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongCommentMatch1()
}

func (c *current) onLineComment1(comment any) (any, error) {
	return comment.(string), nil
}

func (p *parser) callonLineComment1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineComment1(stack["comment"])
}

func (c *current) onLineCommentMatch1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonLineCommentMatch1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineCommentMatch1()
}

func (c *current) onUnixComment1(comment any) (any, error) {
	return comment.(string), nil
}

func (p *parser) callonUnixComment1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnixComment1(stack["comment"])
}

func (c *current) onUnixCommentMatch1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonUnixCommentMatch1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnixCommentMatch1()
}

func (c *current) onBOOL1(t any) (any, error) {
	return t.(*TypeName), nil
}

func (p *parser) callonBOOL1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBOOL1(stack["t"])
}

func (c *current) onBOOLToken1() (any, error) {
	return NewTypeName(string(c.text), c.pos), nil
}

func (p *parser) callonBOOLToken1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBOOLToken1()
}

func (c *current) onBYTE1(t any) (any, error) {
	return t.(*TypeName), nil
}

func (p *parser) callonBYTE1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBYTE1(stack["t"])
}

func (c *current) onBYTEToken1() (any, error) {
	return NewTypeName(string(c.text), c.pos), nil
}

func (p *parser) callonBYTEToken1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBYTEToken1()
}

func (c *current) onI81(t any) (any, error) {
	return t.(*TypeName), nil
}

func (p *parser) callonI81() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onI81(stack["t"])
}

func (c *current) onI8Token1() (any, error) {
	return NewTypeName(string(c.text), c.pos), nil
}

func (p *parser) callonI8Token1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onI8Token1()
}

func (c *current) onI161(t any) (any, error) {
	return t.(*TypeName), nil
}

func (p *parser) callonI161() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onI161(stack["t"])
}

func (c *current) onI16Token1() (any, error) {
	return NewTypeName(string(c.text), c.pos), nil
}

func (p *parser) callonI16Token1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onI16Token1()
}

func (c *current) onI321(t any) (any, error) {
	return t.(*TypeName), nil
}

func (p *parser) callonI321() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onI321(stack["t"])
}

func (c *current) onI32Token1() (any, error) {
	return NewTypeName(string(c.text), c.pos), nil
}

func (p *parser) callonI32Token1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onI32Token1()
}

func (c *current) onI641(t any) (any, error) {
	return t.(*TypeName), nil
}

func (p *parser) callonI641() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onI641(stack["t"])
}

func (c *current) onI64Token1() (any, error) {
	return NewTypeName(string(c.text), c.pos), nil
}

func (p *parser) callonI64Token1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onI64Token1()
}

func (c *current) onDOUBLE1(t any) (any, error) {
	return t.(*TypeName), nil
}

func (p *parser) callonDOUBLE1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDOUBLE1(stack["t"])
}

func (c *current) onDOUBLEToken1() (any, error) {
	return NewTypeName(string(c.text), c.pos), nil
}

func (p *parser) callonDOUBLEToken1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDOUBLEToken1()
}

func (c *current) onSTRING1(t any) (any, error) {
	return t.(*TypeName), nil
}

func (p *parser) callonSTRING1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSTRING1(stack["t"])
}

func (c *current) onSTRINGToken1() (any, error) {
	return NewTypeName(string(c.text), c.pos), nil
}

func (p *parser) callonSTRINGToken1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSTRINGToken1()
}

func (c *current) onBINARY1(t any) (any, error) {
	return t.(*TypeName), nil
}

func (p *parser) callonBINARY1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBINARY1(stack["t"])
}

func (c *current) onBINARYToken1() (any, error) {
	return NewTypeName(string(c.text), c.pos), nil
}

func (p *parser) callonBINARYToken1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBINARYToken1()
}

func (c *current) onCONST1(t any) (any, error) {
	return t.(*TypeName), nil
}

func (p *parser) callonCONST1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCONST1(stack["t"])
}

func (c *current) onCONSTToken1() (any, error) {
	return NewTypeName(string(c.text), c.pos), nil
}

func (p *parser) callonCONSTToken1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCONSTToken1()
}

func (c *current) onONEWAY1(t any) (any, error) {
	return t.(*TypeName), nil
}

func (p *parser) callonONEWAY1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onONEWAY1(stack["t"])
}

func (c *current) onONEWAYToken1() (any, error) {
	return NewTypeName(string(c.text), c.pos), nil
}

func (p *parser) callonONEWAYToken1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onONEWAYToken1()
}

func (c *current) onTYPEDEF1() (any, error) {
	return "typedef", nil
}

func (p *parser) callonTYPEDEF1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTYPEDEF1()
}

func (c *current) onMAP1(t any) (any, error) {
	return t.(*TypeName), nil
}

func (p *parser) callonMAP1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMAP1(stack["t"])
}

func (c *current) onMAPToken1() (any, error) {
	return NewTypeName(string(c.text), c.pos), nil
}

func (p *parser) callonMAPToken1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMAPToken1()
}

func (c *current) onSET1(t any) (any, error) {
	return t.(*TypeName), nil
}

func (p *parser) callonSET1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSET1(stack["t"])
}

func (c *current) onSETToken1() (any, error) {
	return NewTypeName(string(c.text), c.pos), nil
}

func (p *parser) callonSETToken1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSETToken1()
}

func (c *current) onLIST1(t any) (any, error) {
	return t.(*TypeName), nil
}

func (p *parser) callonLIST1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLIST1(stack["t"])
}

func (c *current) onListToken1() (any, error) {
	return NewTypeName(string(c.text), c.pos), nil
}

func (p *parser) callonListToken1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListToken1()
}

func (c *current) onVOID1() (any, error) {
	return "void", nil
}

func (p *parser) callonVOID1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVOID1()
}

func (c *current) onTHROWS1() (any, error) {
	return "throws", nil
}

func (p *parser) callonTHROWS1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTHROWS1()
}

func (c *current) onEXCEPTION1() (any, error) {
	return "exception", nil
}

func (p *parser) callonEXCEPTION1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEXCEPTION1()
}

func (c *current) onEXTENDS1() (any, error) {
	return "extends", nil
}

func (p *parser) callonEXTENDS1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEXTENDS1()
}

func (c *current) onSERVICE1() (any, error) {
	return "service", nil
}

func (p *parser) callonSERVICE1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSERVICE1()
}

func (c *current) onSTRUCT1() (any, error) {
	return "struct", nil
}

func (p *parser) callonSTRUCT1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSTRUCT1()
}

func (c *current) onUNION1() (any, error) {
	return "union", nil
}

func (p *parser) callonUNION1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUNION1()
}

func (c *current) onENUM1() (any, error) {
	return "enum", nil
}

func (p *parser) callonENUM1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onENUM1()
}

func (c *current) onINCLUDE1() (any, error) {
	return "include", nil
}

func (p *parser) callonINCLUDE1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINCLUDE1()
}

func (c *current) onCPPINCLUDE1() (any, error) {
	return "cpp_include", nil
}

func (p *parser) callonCPPINCLUDE1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCPPINCLUDE1()
}

func (c *current) onNAMESPACE1() (any, error) {
	return "namespace", nil
}

func (p *parser) callonNAMESPACE1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNAMESPACE1()
}

func (c *current) onCPPTYPE1() (any, error) {
	return "cpp_type", nil
}

func (p *parser) callonCPPTYPE1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCPPTYPE1()
}

func (c *current) onLBRK1() (any, error) {
	return "[", nil
}

func (p *parser) callonLBRK1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLBRK1()
}

func (c *current) onRBRK1() (any, error) {
	fmt.Println("match RBRK")
	return "]", nil
}

func (p *parser) callonRBRK1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRBRK1()
}

func (c *current) onLCUR1(t any) (any, error) {
	return t.(string), nil
}

func (p *parser) callonLCUR1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLCUR1(stack["t"])
}

func (c *current) onRCUR1(t any) (any, error) {
	return t.(string), nil
}

func (p *parser) callonRCUR1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRCUR1(stack["t"])
}

func (c *current) onLCURToken1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonLCURToken1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLCURToken1()
}

func (c *current) onRCURToken2() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonRCURToken2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRCURToken2()
}

func (c *current) onEQUAL1() (any, error) {
	return "=", nil
}

func (p *parser) callonEQUAL1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEQUAL1()
}

func (c *current) onLPOINT1() (any, error) {
	return "<", nil
}

func (p *parser) callonLPOINT1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLPOINT1()
}

func (c *current) onRPOINT1() (any, error) {
	return ">", nil
}

func (p *parser) callonRPOINT1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRPOINT1()
}

func (c *current) onCOMMA1() (any, error) {
	return ",", nil
}

func (p *parser) callonCOMMA1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCOMMA1()
}

func (c *current) onLPAR1() (any, error) {
	return "(", nil
}

func (p *parser) callonLPAR1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLPAR1()
}

func (c *current) onRPAR1() (any, error) {
	return ")", nil
}

func (p *parser) callonRPAR1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRPAR1()
}

func (c *current) onCOLON1() (any, error) {
	return ":", nil
}

func (p *parser) callonCOLON1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCOLON1()
}

func (c *current) onErrField3() error {
	return InvalidStructFieldError
}

func (p *parser) callonErrField3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrField3()
}

func (c *current) onErrField1() (any, error) {
	return NewField("", "", 0, nil, nil, nil, nil), nil
}

func (p *parser) callonErrField1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrField1()
}

func (c *current) onErrStructIdentifier3() error {
	return InvalidStructIdentifierError
}

func (p *parser) callonErrStructIdentifier3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrStructIdentifier3()
}

func (c *current) onErrStructIdentifier1() (any, error) {
	// struct identifier 异常，consume 掉异常字符直到出现 '{' 为止
	t := NewIdentifier("", c.pos)
	t.BadNode = true

	return t, nil
}

func (p *parser) callonErrStructIdentifier1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrStructIdentifier1()
}

func (c *current) onErrStructRCUR3() error {
	return InvalidStructBlockRCURError
}

func (p *parser) callonErrStructRCUR3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrStructRCUR3()
}

func (c *current) onErrStructRCUR1() (any, error) {
	// 缺少 '}'，消费异常字符直到出现下一个 struct。TODO(jpf): 后面会加入 typedef 等定义，需要扩展补充
	return "?", nil
}

func (p *parser) callonErrStructRCUR1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrStructRCUR1()
}

func (c *current) onErrStructLCUR3() error {
	return InvalidStructBlockLCURError
}

func (p *parser) callonErrStructLCUR3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrStructLCUR3()
}

func (c *current) onErrStructLCUR1() (any, error) {
	// 缺少 '{'，消费异常字符直到出现下一个 Field 或者 '}'
	return "?", nil
}

func (p *parser) callonErrStructLCUR1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onErrStructLCUR1()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//	input := "input"
//	stats := Stats{}
//	_, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//	if err != nil {
//	    log.Panicln(err)
//	}
//	b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//	if err != nil {
//	    log.Panicln(err)
//	}
//	fmt.Println(string(b))
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value any) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value any) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i any, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (any, error) {
	b, err := io.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (any, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]any

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        any
}

type choiceExpr struct {
	pos          position
	alternatives []any
}

type actionExpr struct {
	pos  position
	expr any
	run  func(*parser) (any, error)
}

type recoveryExpr struct {
	pos          position
	expr         any
	recoverExpr  any
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []any
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  any
}

type expr struct {
	pos  position
	expr any
}

type (
	andExpr        expr
	notExpr        expr
	zeroOrOneExpr  expr
	zeroOrMoreExpr expr
	oneOrMoreExpr  expr
)

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   any
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[any]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]any
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]any
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]any)
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr any) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]any, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) in(s string) string {
	p.depth++
	return p.print(strings.Repeat(" ", p.depth)+">", s)
}

func (p *parser) out(s string) string {
	p.depth--
	return p.print(strings.Repeat(" ", p.depth)+"<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() any
}

var statePool = &sync.Pool{
	New: func() any { return make(storeDict) },
}

func (sd storeDict) Discard() {
	for k := range sd {
		delete(sd, k)
	}
	statePool.Put(sd)
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := statePool.Get().(storeDict)
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state.Discard()
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node any) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node any, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[any]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[any]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val any, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRule(rule *rule) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}

	if p.memoize {
		res, ok := p.getMemoized(rule)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
	}

	start := p.pt
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}

	if p.memoize {
		p.setMemoized(start, rule, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr any) (any, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val any
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]any, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
